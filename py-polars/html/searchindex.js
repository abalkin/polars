Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pearson_corr", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pearson_corr.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_delta", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pearson_corr", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.__iter__", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.all", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.combine", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.combine", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 81, 90, 105, 118, 121, 122, 216, 218, 236, 248, 538, 613], "refer": [0, 92, 93, 95, 406, 464, 538, 792, 855, 893], "input": [0, 55, 83, 92, 93, 95, 186, 213, 236, 381, 391, 487, 505, 513, 514, 517, 538, 547, 592, 608, 619, 774, 893], "output": [0, 25, 27, 28, 65, 95, 112, 122, 144, 145, 156, 166, 171, 174, 183, 186, 209, 213, 236, 244, 248, 383, 384, 390, 482, 487, 513, 524, 538, 547, 568, 569, 578, 583, 592, 608, 611, 613, 619, 628, 881, 893], "seri": [0, 1, 20, 46, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 85, 90, 111, 112, 114, 118, 122, 128, 136, 138, 140, 141, 146, 149, 150, 152, 154, 162, 163, 167, 179, 180, 186, 194, 198, 203, 204, 213, 217, 236, 247, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 262, 269, 270, 277, 278, 281, 282, 283, 286, 292, 293, 297, 298, 310, 311, 314, 317, 320, 322, 324, 327, 331, 333, 336, 337, 340, 341, 349, 350, 356, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 382, 383, 402, 406, 407, 408, 409, 410, 412, 424, 425, 428, 431, 432, 439, 458, 464, 468, 473, 474, 475, 476, 481, 487, 488, 490, 491, 492, 493, 494, 495, 497, 498, 499, 505, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 525, 526, 527, 528, 529, 538, 547, 564, 592, 608, 619, 885, 887, 889, 892, 896, 897, 898], "datafram": [0, 1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 44, 46, 55, 56, 57, 58, 59, 60, 62, 63, 64, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 106, 107, 108, 110, 112, 113, 234, 235, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 283, 284, 285, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 490, 491, 492, 493, 494, 495, 496, 499, 502, 503, 504, 505, 507, 508, 510, 514, 515, 516, 517, 518, 519, 523, 524, 525, 526, 527, 528, 529, 530, 538, 547, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 619, 627, 647, 665, 674, 689, 837, 839, 851, 852, 862, 863, 872, 873, 881, 893], "lazyfram": [0, 1, 43, 45, 55, 56, 57, 58, 59, 62, 63, 103, 104, 105, 106, 107, 108, 110, 114, 160, 173, 236, 283, 353, 538, 547, 618, 899], "express": [0, 60, 62, 65, 112, 114, 115, 122, 134, 136, 143, 169, 174, 182, 186, 192, 213, 216, 218, 236, 244, 245, 247, 248, 265, 283, 294, 295, 296, 299, 305, 307, 312, 328, 347, 350, 353, 360, 362, 366, 369, 374, 377, 382, 383, 384, 388, 389, 390, 391, 402, 403, 404, 409, 423, 424, 425, 427, 429, 434, 440, 448, 464, 470, 473, 479, 481, 484, 488, 491, 492, 496, 497, 498, 499, 503, 504, 505, 506, 507, 508, 512, 513, 514, 517, 519, 521, 522, 523, 524, 526, 527, 530, 537, 547, 553, 561, 564, 586, 592, 594, 595, 596, 597, 599, 608, 609, 612, 613, 619, 647, 678, 679, 680, 688, 697, 717, 740, 810, 817, 831, 839, 893], "extend": [0, 83, 236, 350, 538, 547, 627, 740, 893], "function": [0, 56, 57, 58, 59, 60, 64, 81, 92, 93, 95, 103, 113, 122, 131, 138, 165, 172, 173, 174, 205, 208, 218, 236, 245, 248, 283, 305, 331, 344, 345, 346, 383, 384, 400, 412, 413, 414, 415, 416, 417, 419, 420, 421, 433, 477, 485, 487, 497, 498, 505, 506, 508, 513, 521, 538, 547, 578, 582, 585, 613, 619, 628, 665, 688, 720, 734, 735, 736, 737, 798, 812, 813, 819, 824, 893], "data": [0, 1, 13, 16, 30, 46, 55, 56, 58, 63, 70, 71, 75, 77, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 100, 101, 103, 110, 111, 113, 114, 115, 121, 123, 124, 133, 142, 144, 156, 157, 158, 160, 173, 177, 182, 183, 184, 190, 197, 201, 202, 213, 215, 234, 236, 291, 310, 332, 340, 361, 368, 370, 406, 422, 423, 433, 464, 477, 479, 491, 524, 538, 547, 551, 552, 561, 568, 585, 596, 597, 608, 612, 619, 627, 672, 677, 681, 693, 695, 729, 792, 808, 809, 819, 824, 855, 874, 875, 877, 879, 883, 892, 893], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 65, 70, 80, 82, 83, 84, 85, 86, 90, 92, 93, 94, 95, 103, 104, 109, 110, 111, 114, 117, 118, 122, 132, 138, 142, 144, 145, 146, 157, 197, 201, 202, 204, 206, 207, 236, 248, 270, 283, 291, 292, 294, 295, 296, 311, 314, 317, 320, 322, 324, 327, 333, 341, 347, 358, 364, 366, 367, 409, 459, 460, 461, 464, 477, 487, 492, 500, 501, 502, 504, 505, 512, 538, 547, 553, 561, 568, 569, 586, 595, 596, 597, 604, 605, 619, 652, 665, 672, 674, 678, 679, 680, 696, 699, 702, 708, 710, 713, 716, 722, 730, 748, 819, 850, 851, 852, 874, 875, 877, 884, 893], "config": [0, 55, 186, 213, 236, 547, 592, 608, 619], "except": [0, 147, 159, 195, 236, 547, 574, 619, 875, 883, 893], "test": [0, 95, 547, 570, 577, 619], "util": [0, 508, 547, 561, 619], "sql": [0, 43, 102, 158, 236, 547], "These": [1, 119, 336, 537, 725], "allow": [1, 46, 70, 81, 103, 105, 106, 107, 108, 114, 115, 121, 156, 159, 160, 182, 183, 184, 215, 236, 328, 408, 423, 464, 538, 573, 574, 578, 596, 597, 609, 619, 717, 794, 809, 811, 855, 893], "you": [1, 29, 55, 80, 82, 83, 84, 86, 90, 92, 93, 95, 100, 103, 110, 118, 122, 129, 133, 156, 159, 169, 183, 199, 201, 205, 218, 236, 248, 265, 294, 295, 296, 347, 353, 362, 383, 408, 413, 414, 415, 416, 417, 419, 420, 421, 449, 452, 464, 488, 497, 506, 538, 553, 558, 570, 574, 577, 595, 597, 613, 619, 627, 647, 678, 679, 680, 794, 840, 843, 855, 875, 883, 893], "regist": [1, 56, 57, 58, 59], "custom": [1, 56, 57, 58, 59, 122, 218, 236, 248, 283, 383, 412, 487, 513, 538, 578, 613, 619, 628, 665, 798, 893], "dedic": [1, 81, 156, 183, 236], "namespac": [1, 235, 537, 547, 618], "underli": [1, 66, 73, 80, 82, 83, 84, 86, 100, 114, 115, 133, 156, 157, 183, 197, 236, 287, 310, 311, 312, 313, 316, 318, 319, 321, 323, 325, 326, 329, 330, 332, 338, 339, 340, 342, 408, 422, 440, 442, 538, 627, 668, 695, 696, 697, 698, 701, 703, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 729, 731, 794, 808, 819, 831, 833, 871, 875, 893], "polar": [1, 236, 537, 538, 547, 619, 893, 899, 900], "class": [1, 2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 85, 112, 113, 201, 202, 236, 538, 547, 619, 874, 875, 893, 899], "without": [1, 64, 94, 97, 101, 104, 105, 208, 236, 305, 331, 413, 414, 415, 416, 417, 419, 420, 421, 523, 538, 688, 693, 720, 893], "requir": [1, 29, 85, 110, 111, 171, 172, 202, 236, 344, 345, 346, 428, 464, 479, 538, 597, 619, 735, 736, 737, 818, 855, 875, 879, 893], "subclass": [1, 236], "mixin": 1, "expr": [1, 55, 56, 57, 58, 59, 60, 63, 65, 132, 134, 136, 143, 144, 145, 158, 169, 174, 182, 186, 192, 213, 216, 236, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 538, 539, 542, 543, 544, 560, 562, 564, 567, 568, 569, 573, 587, 592, 594, 599, 608, 612, 619, 647, 688, 697, 741, 817, 831, 835, 853, 866, 893], "ar": [1, 9, 15, 29, 46, 65, 72, 79, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 100, 103, 104, 105, 106, 107, 110, 111, 113, 114, 117, 119, 121, 122, 129, 131, 134, 138, 144, 145, 156, 159, 160, 165, 166, 172, 182, 183, 186, 198, 202, 209, 213, 236, 245, 283, 301, 303, 304, 308, 309, 331, 336, 343, 362, 364, 366, 367, 368, 370, 371, 372, 375, 406, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 430, 433, 435, 436, 449, 452, 453, 471, 488, 489, 494, 524, 531, 532, 534, 537, 538, 539, 542, 543, 544, 547, 558, 562, 568, 569, 570, 574, 577, 578, 582, 583, 586, 589, 592, 596, 597, 608, 609, 619, 625, 627, 665, 686, 687, 720, 725, 733, 734, 747, 756, 759, 760, 761, 762, 763, 764, 770, 792, 796, 798, 804, 821, 824, 840, 843, 844, 864, 875, 883, 885, 887, 889, 893, 896, 897, 898], "all": [1, 6, 12, 15, 20, 23, 30, 62, 63, 65, 80, 83, 85, 86, 87, 92, 93, 94, 95, 96, 100, 103, 106, 107, 112, 113, 115, 129, 135, 147, 152, 154, 156, 157, 160, 165, 168, 169, 177, 182, 183, 191, 195, 200, 206, 209, 236, 246, 247, 265, 270, 280, 283, 285, 299, 305, 347, 357, 358, 361, 364, 367, 371, 372, 374, 377, 379, 383, 384, 395, 399, 403, 406, 411, 428, 434, 441, 447, 448, 451, 454, 455, 457, 463, 470, 482, 492, 504, 526, 538, 547, 553, 556, 558, 561, 563, 578, 582, 586, 595, 598, 604, 609, 619, 647, 652, 662, 665, 688, 754, 767, 792, 825, 832, 838, 839, 842, 845, 846, 848, 854, 893], "support": [1, 29, 63, 80, 81, 82, 83, 84, 85, 86, 94, 95, 102, 104, 112, 115, 119, 121, 156, 157, 183, 191, 199, 236, 278, 434, 458, 464, 538, 598, 619, 660, 825, 849, 855, 893], "target": [1, 61, 446, 464, 837, 855], "thi": [1, 6, 23, 25, 27, 29, 45, 46, 55, 60, 62, 63, 64, 80, 82, 83, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 100, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 121, 122, 129, 130, 131, 133, 138, 143, 144, 145, 146, 150, 152, 154, 156, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 176, 177, 182, 183, 184, 186, 189, 191, 193, 194, 197, 199, 201, 202, 205, 206, 208, 209, 210, 211, 213, 214, 216, 218, 235, 236, 245, 247, 248, 257, 259, 265, 270, 283, 292, 299, 305, 310, 311, 318, 328, 331, 337, 340, 347, 349, 360, 361, 362, 366, 377, 382, 383, 388, 389, 390, 391, 397, 398, 400, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 425, 427, 428, 429, 434, 435, 436, 450, 451, 456, 457, 463, 464, 467, 468, 478, 479, 480, 481, 482, 485, 488, 493, 495, 497, 499, 504, 505, 506, 508, 523, 527, 538, 547, 548, 550, 553, 558, 561, 567, 568, 569, 571, 574, 578, 582, 583, 586, 589, 592, 594, 595, 596, 597, 598, 604, 608, 609, 610, 611, 613, 618, 619, 627, 628, 637, 640, 647, 652, 674, 688, 693, 695, 696, 697, 703, 717, 720, 726, 729, 734, 739, 746, 747, 752, 753, 758, 759, 765, 768, 771, 775, 776, 777, 778, 780, 781, 783, 784, 786, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 802, 805, 806, 807, 809, 812, 813, 814, 817, 818, 819, 820, 825, 826, 828, 841, 842, 847, 848, 854, 855, 858, 859, 862, 863, 864, 871, 873, 874, 875, 876, 878, 879, 882, 883, 893], "featur": [1, 29, 46, 61, 236], "i": [1, 12, 25, 27, 28, 46, 55, 61, 62, 63, 64, 65, 67, 69, 70, 72, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 92, 93, 94, 96, 100, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 121, 122, 129, 131, 139, 142, 143, 144, 145, 146, 150, 151, 153, 155, 156, 157, 159, 160, 163, 165, 166, 169, 171, 173, 174, 182, 183, 184, 191, 194, 197, 205, 206, 208, 209, 216, 218, 235, 236, 245, 246, 247, 248, 265, 268, 278, 282, 283, 305, 312, 328, 331, 336, 344, 345, 346, 349, 358, 360, 362, 375, 383, 391, 400, 406, 408, 410, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 429, 430, 433, 434, 435, 436, 440, 441, 446, 447, 448, 450, 451, 453, 456, 457, 458, 461, 463, 464, 467, 482, 488, 489, 493, 495, 497, 498, 499, 506, 512, 523, 527, 538, 553, 558, 561, 567, 568, 569, 572, 574, 576, 578, 582, 583, 586, 595, 596, 597, 598, 604, 611, 613, 619, 626, 627, 628, 647, 650, 660, 664, 688, 697, 717, 720, 725, 734, 735, 736, 737, 739, 747, 748, 751, 752, 753, 755, 765, 766, 768, 769, 770, 792, 794, 796, 809, 810, 811, 812, 813, 814, 820, 821, 824, 825, 828, 831, 832, 837, 838, 839, 841, 842, 844, 847, 848, 849, 852, 854, 855, 858, 871, 875, 881, 882, 883, 893], "primarili": 1, "intend": 1, "us": [1, 8, 10, 12, 15, 20, 21, 25, 29, 46, 55, 65, 80, 81, 83, 84, 86, 88, 90, 92, 93, 94, 95, 96, 100, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 118, 122, 134, 135, 138, 144, 145, 156, 157, 159, 163, 165, 168, 169, 173, 174, 182, 184, 186, 192, 194, 205, 206, 209, 213, 216, 218, 236, 243, 248, 265, 283, 287, 288, 292, 305, 308, 309, 340, 343, 344, 345, 346, 347, 352, 353, 361, 362, 375, 383, 387, 406, 408, 410, 413, 414, 415, 416, 417, 419, 420, 421, 423, 425, 428, 429, 433, 435, 436, 442, 443, 444, 449, 450, 456, 458, 460, 462, 464, 487, 488, 489, 492, 494, 497, 499, 506, 508, 512, 514, 517, 522, 523, 527, 537, 538, 547, 553, 556, 562, 563, 567, 568, 569, 570, 574, 576, 577, 582, 592, 597, 599, 604, 608, 613, 619, 628, 647, 665, 668, 669, 674, 688, 729, 733, 735, 736, 737, 741, 742, 747, 770, 792, 794, 796, 809, 812, 813, 814, 818, 820, 824, 828, 833, 834, 840, 841, 847, 849, 851, 855, 866, 874, 875, 882, 883, 893], "librari": [1, 66, 73, 383, 538, 900], "author": 1, "domain": 1, "specif": [1, 23, 80, 82, 84, 86, 94, 102, 104, 114, 156, 236, 412, 464, 526, 538, 798, 855, 893], "capabl": 1, "which": [1, 15, 24, 25, 26, 27, 28, 29, 55, 56, 57, 58, 59, 83, 92, 93, 94, 95, 102, 103, 104, 110, 129, 133, 144, 145, 192, 206, 236, 245, 283, 350, 362, 364, 367, 368, 370, 371, 372, 391, 413, 414, 415, 416, 417, 419, 420, 421, 453, 538, 558, 568, 569, 596, 597, 604, 611, 619, 627, 740, 756, 760, 761, 762, 763, 764, 812, 844, 893], "mai": [1, 29, 63, 64, 80, 82, 83, 84, 86, 92, 94, 96, 104, 105, 106, 122, 131, 133, 159, 188, 189, 208, 236, 277, 282, 283, 305, 310, 318, 331, 347, 413, 414, 415, 416, 417, 419, 420, 421, 426, 427, 464, 497, 498, 506, 521, 538, 574, 578, 593, 594, 597, 610, 613, 619, 627, 659, 664, 688, 695, 703, 720, 734, 816, 817, 855, 893], "exist": [1, 80, 94, 104, 114, 213, 236, 312, 608, 619, 697], "belong": [1, 144, 236, 568, 619], "core": [1, 202, 236], "cannot": [1, 81, 92, 93, 110, 122, 184, 218, 236, 248, 287, 423, 442, 460, 538, 595, 613, 619, 668, 809, 833, 851, 893], "overrid": [1, 80, 82, 83, 84, 85, 86, 112, 113, 115, 236], "str": [1, 5, 7, 9, 11, 12, 15, 16, 23, 24, 25, 26, 27, 28, 29, 32, 40, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 61, 64, 65, 80, 82, 83, 84, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 112, 113, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 138, 140, 142, 143, 144, 145, 147, 149, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 194, 195, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 243, 244, 248, 262, 263, 268, 269, 270, 278, 281, 283, 307, 311, 328, 331, 334, 336, 337, 341, 347, 349, 350, 351, 353, 355, 360, 362, 366, 369, 384, 390, 392, 400, 403, 409, 411, 413, 414, 415, 416, 417, 419, 420, 421, 427, 428, 435, 436, 468, 469, 470, 473, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 538, 542, 553, 554, 555, 556, 557, 558, 560, 561, 564, 566, 567, 568, 569, 571, 573, 574, 582, 583, 586, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 604, 605, 608, 609, 610, 611, 613, 614, 615, 619, 624, 645, 652, 665, 672, 689, 696, 717, 720, 723, 725, 726, 730, 739, 742, 775, 778, 783, 784, 795, 812, 813, 859, 861, 873, 893, 896], "dt": [1, 55, 145, 236, 464, 544, 569, 619, 855, 898], "attempt": [1, 201, 236], "do": [1, 55, 62, 103, 133, 159, 197, 205, 208, 236, 265, 305, 451, 457, 463, 485, 538, 553, 574, 578, 586, 595, 596, 597, 619, 627, 647, 688, 842, 848, 854, 875, 883, 893], "so": [1, 46, 102, 103, 104, 142, 144, 145, 174, 236, 268, 362, 451, 457, 463, 489, 538, 568, 569, 619, 650, 842, 848, 854], "rais": [1, 11, 15, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 110, 111, 182, 236, 282, 287, 390, 402, 440, 442, 464, 512, 538, 664, 668, 831, 833, 855, 875, 883, 893], "an": [1, 56, 58, 59, 62, 65, 66, 70, 71, 73, 80, 92, 93, 94, 95, 100, 102, 103, 106, 113, 114, 115, 122, 123, 124, 131, 134, 136, 138, 144, 145, 156, 157, 159, 169, 171, 174, 180, 182, 197, 201, 208, 213, 218, 236, 244, 245, 248, 265, 268, 282, 283, 287, 291, 294, 295, 296, 300, 301, 302, 303, 304, 305, 312, 340, 350, 353, 362, 374, 383, 384, 391, 404, 412, 413, 414, 415, 416, 417, 419, 420, 421, 440, 442, 447, 464, 473, 488, 492, 503, 508, 512, 521, 523, 538, 547, 551, 552, 553, 556, 561, 564, 568, 569, 574, 578, 586, 595, 599, 608, 609, 613, 619, 647, 650, 664, 668, 672, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 697, 729, 734, 740, 798, 799, 800, 801, 802, 803, 805, 806, 807, 812, 813, 831, 833, 838, 855, 875, 883, 893], "attributeerror": 1, "howev": [1, 83, 131, 236, 734, 893], "can": [1, 55, 65, 71, 83, 92, 93, 95, 96, 103, 105, 106, 113, 114, 115, 122, 130, 138, 143, 144, 169, 174, 186, 192, 205, 208, 213, 216, 218, 236, 248, 265, 283, 301, 304, 305, 328, 336, 347, 350, 361, 362, 395, 408, 413, 414, 415, 416, 417, 419, 420, 421, 425, 428, 430, 433, 448, 451, 457, 463, 482, 485, 488, 492, 499, 504, 508, 514, 527, 537, 538, 553, 568, 592, 599, 608, 610, 613, 619, 628, 647, 665, 688, 717, 725, 740, 779, 794, 812, 813, 814, 818, 821, 824, 839, 842, 848, 854, 893], "other": [1, 15, 65, 92, 93, 95, 103, 110, 111, 129, 133, 139, 158, 159, 165, 166, 182, 186, 213, 234, 236, 247, 262, 294, 295, 296, 307, 366, 436, 477, 538, 547, 558, 573, 574, 582, 583, 592, 608, 609, 619, 627, 644, 678, 679, 680, 691, 759, 811, 877, 884, 892, 893], "onli": [1, 15, 23, 46, 55, 61, 63, 92, 93, 94, 95, 96, 100, 103, 104, 106, 107, 108, 114, 115, 119, 122, 129, 143, 156, 159, 163, 183, 192, 194, 199, 236, 243, 293, 294, 295, 296, 328, 356, 408, 480, 522, 526, 538, 553, 558, 570, 574, 577, 599, 619, 675, 678, 679, 680, 717, 745, 794, 871, 893], "gener": [1, 102, 112, 113, 114, 115, 184, 205, 236, 283, 337, 423, 429, 538, 665, 726, 809, 820, 893], "userwarn": 1, "pl": [1, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 94, 95, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 529, 530, 538, 548, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 651, 652, 654, 659, 660, 663, 665, 672, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 772, 775, 776, 777, 778, 779, 780, 781, 787, 788, 789, 791, 792, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 893], "register_expr_namespac": [1, 56, 58, 59], "greet": 1, "def": [1, 56, 57, 58, 59, 113, 114, 115, 173, 205, 236, 585, 619], "__init__": [1, 2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 112], "self": [1, 56, 57, 58, 59, 62, 400, 538, 553, 561, 586, 595, 619, 627, 812, 813, 884, 893], "_expr": [1, 57], "hello": [1, 451, 457, 463, 485, 652, 842, 848, 854], "return": [1, 23, 25, 27, 28, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 72, 74, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 103, 104, 118, 122, 123, 127, 129, 130, 131, 132, 134, 135, 138, 142, 147, 149, 155, 156, 157, 158, 160, 161, 168, 169, 171, 172, 173, 174, 182, 183, 184, 195, 196, 202, 205, 206, 213, 215, 216, 218, 221, 225, 230, 236, 245, 246, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 263, 266, 268, 269, 270, 281, 282, 286, 288, 297, 298, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 349, 359, 362, 364, 365, 366, 367, 368, 370, 371, 372, 378, 382, 391, 395, 409, 410, 423, 424, 430, 431, 432, 439, 441, 443, 445, 446, 447, 448, 449, 450, 452, 453, 456, 458, 459, 460, 461, 467, 472, 473, 474, 475, 476, 478, 480, 481, 482, 487, 488, 492, 500, 501, 502, 508, 510, 512, 513, 523, 528, 530, 538, 553, 556, 558, 559, 561, 570, 576, 577, 578, 585, 586, 595, 596, 597, 603, 604, 608, 611, 614, 615, 619, 624, 625, 626, 628, 635, 636, 638, 639, 642, 643, 645, 648, 650, 651, 652, 663, 664, 667, 669, 689, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 731, 734, 739, 747, 749, 754, 756, 757, 759, 760, 761, 762, 763, 764, 767, 769, 772, 779, 796, 797, 809, 810, 811, 813, 821, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 843, 844, 847, 849, 850, 851, 852, 855, 858, 865, 867, 878, 880, 884, 893], "lit": [1, 90, 118, 286, 362, 374, 497, 499, 506, 527, 530, 538, 667, 742, 893], "alia": [1, 55, 57, 59, 144, 145, 161, 207, 213, 236, 248, 259, 265, 294, 295, 296, 300, 301, 302, 303, 304, 306, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 324, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 353, 355, 360, 362, 365, 366, 374, 377, 378, 393, 400, 401, 408, 424, 440, 441, 444, 447, 449, 452, 458, 460, 461, 462, 477, 478, 484, 490, 491, 493, 494, 499, 502, 503, 507, 522, 526, 527, 538, 568, 569, 571, 577, 605, 608, 612, 619, 640, 647, 695, 696, 700, 717, 724, 729, 730, 772, 851, 852, 893], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 451, 457, 463, 652, 842, 848, 854], "select": [1, 55, 56, 57, 58, 60, 91, 92, 93, 94, 96, 100, 102, 103, 105, 122, 155, 159, 169, 173, 182, 191, 203, 207, 209, 236, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 283, 284, 285, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 354, 356, 357, 358, 360, 361, 363, 364, 366, 367, 369, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 450, 451, 453, 456, 457, 459, 460, 461, 463, 465, 466, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 487, 488, 490, 492, 493, 495, 496, 499, 502, 504, 505, 507, 508, 510, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 538, 554, 571, 574, 585, 598, 605, 609, 611, 619, 647, 665, 812, 813, 825, 837, 839, 866, 893], "shape": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 77, 80, 82, 83, 84, 85, 86, 87, 90, 103, 105, 114, 115, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 158, 159, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 184, 186, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 490, 491, 492, 493, 494, 495, 496, 499, 502, 503, 504, 505, 507, 508, 510, 514, 515, 516, 517, 518, 519, 523, 524, 525, 526, 527, 528, 529, 530, 538, 551, 553, 557, 558, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 592, 593, 594, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 613, 614, 615, 619, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 646, 647, 648, 651, 652, 654, 659, 660, 663, 665, 672, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 754, 756, 759, 760, 761, 762, 763, 764, 767, 769, 772, 779, 787, 788, 789, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 816, 820, 821, 822, 823, 825, 826, 827, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 863, 865, 866, 867, 868, 869, 872, 873, 877, 879, 880, 881, 884, 893], "3": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 95, 102, 103, 105, 109, 110, 111, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 243, 244, 245, 248, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 291, 292, 293, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 323, 325, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 377, 379, 380, 381, 382, 384, 395, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 435, 436, 437, 440, 443, 444, 446, 449, 452, 453, 458, 459, 460, 461, 462, 468, 469, 470, 472, 473, 474, 478, 480, 481, 482, 484, 485, 490, 491, 492, 493, 494, 495, 496, 499, 503, 504, 505, 507, 510, 512, 514, 515, 516, 517, 519, 523, 524, 525, 526, 527, 528, 529, 530, 538, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 619, 624, 627, 628, 629, 631, 632, 633, 635, 636, 637, 638, 639, 646, 647, 648, 651, 654, 659, 660, 663, 665, 672, 674, 675, 676, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 708, 710, 711, 712, 714, 716, 718, 720, 721, 724, 725, 726, 728, 729, 730, 734, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 753, 754, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 787, 788, 789, 791, 792, 795, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 820, 822, 823, 824, 825, 826, 828, 834, 835, 837, 840, 843, 844, 849, 853, 863, 864, 865, 866, 867, 868, 869, 871, 872, 874, 875, 876, 879, 880, 881, 882, 884, 893], "1": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 102, 103, 104, 105, 109, 110, 111, 112, 114, 115, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 512, 514, 515, 516, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 529, 530, 538, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 650, 651, 654, 659, 660, 663, 665, 672, 674, 675, 676, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 735, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 753, 754, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 771, 772, 775, 776, 777, 778, 779, 780, 781, 787, 788, 789, 791, 792, 795, 796, 797, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 837, 839, 851, 852, 855, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 893], "2": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 80, 82, 83, 84, 85, 86, 87, 102, 103, 105, 109, 110, 111, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 242, 243, 244, 246, 247, 248, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 336, 337, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 439, 441, 444, 447, 448, 449, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 465, 466, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 490, 491, 492, 493, 494, 495, 496, 499, 502, 503, 504, 505, 507, 508, 510, 512, 514, 515, 516, 517, 518, 519, 523, 524, 525, 526, 527, 528, 529, 530, 538, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 619, 624, 627, 628, 630, 634, 635, 636, 637, 638, 639, 646, 647, 648, 651, 652, 654, 659, 660, 663, 665, 674, 675, 676, 681, 682, 685, 686, 687, 688, 689, 690, 691, 697, 701, 705, 706, 712, 714, 719, 720, 721, 725, 728, 731, 733, 734, 735, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 753, 754, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 787, 788, 789, 791, 792, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 820, 822, 824, 825, 826, 827, 828, 830, 832, 838, 839, 842, 843, 844, 845, 846, 848, 851, 852, 854, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 893], "column_0": [1, 80, 122, 205, 236], "register_dataframe_namespac": [1, 57, 58, 59], "split": [1, 56, 157, 171, 216, 236, 460, 461, 851, 852], "splitfram": [1, 56], "df": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 56, 57, 60, 80, 81, 82, 83, 84, 85, 86, 87, 93, 103, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 283, 284, 285, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 490, 491, 492, 493, 494, 495, 496, 499, 502, 503, 504, 505, 507, 508, 510, 514, 515, 516, 517, 518, 519, 523, 524, 525, 526, 527, 528, 529, 530, 538, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 593, 594, 595, 598, 599, 600, 601, 602, 604, 605, 606, 610, 611, 613, 614, 615, 619, 647, 665, 674, 837, 839, 846, 851, 852, 873, 893], "_df": [1, 56], "by_alternate_row": 1, "list": [1, 32, 55, 56, 58, 62, 64, 80, 82, 83, 84, 86, 87, 89, 91, 92, 93, 94, 96, 100, 102, 103, 104, 113, 114, 115, 125, 130, 131, 132, 136, 141, 144, 149, 156, 168, 171, 182, 183, 186, 192, 198, 199, 205, 206, 207, 208, 213, 217, 236, 243, 262, 264, 265, 266, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 347, 349, 355, 383, 391, 392, 400, 409, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 427, 435, 436, 447, 459, 468, 469, 473, 492, 493, 499, 503, 514, 517, 526, 527, 538, 554, 557, 558, 559, 560, 564, 568, 582, 592, 604, 605, 608, 609, 619, 641, 644, 646, 647, 648, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 676, 734, 739, 743, 746, 759, 796, 798, 799, 800, 801, 802, 803, 805, 806, 807, 810, 838, 850, 861, 866, 874, 893], "with_row_count": [1, 236, 619, 813, 893], "name": [1, 13, 17, 19, 27, 45, 56, 57, 58, 59, 64, 65, 69, 80, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 100, 101, 103, 106, 107, 108, 111, 112, 113, 114, 115, 122, 125, 128, 129, 137, 140, 142, 156, 158, 159, 165, 174, 178, 182, 183, 185, 186, 198, 204, 205, 207, 213, 214, 215, 236, 244, 248, 283, 331, 336, 347, 362, 374, 384, 390, 392, 403, 468, 469, 470, 485, 486, 492, 496, 499, 504, 510, 511, 514, 517, 519, 520, 522, 524, 527, 528, 538, 554, 557, 573, 574, 582, 589, 591, 592, 599, 605, 608, 610, 611, 612, 619, 624, 665, 677, 720, 725, 795, 859, 861, 873, 876, 893], "n": [1, 10, 12, 20, 28, 32, 33, 56, 57, 58, 59, 65, 89, 90, 92, 93, 103, 118, 122, 133, 144, 147, 156, 157, 161, 171, 183, 184, 195, 196, 199, 202, 221, 230, 236, 264, 269, 281, 305, 306, 310, 312, 315, 335, 340, 350, 359, 378, 401, 409, 423, 433, 460, 461, 472, 474, 478, 508, 510, 522, 528, 538, 553, 568, 570, 577, 602, 603, 614, 615, 619, 627, 646, 651, 663, 688, 690, 695, 697, 700, 724, 729, 740, 749, 772, 787, 809, 824, 828, 851, 852, 865, 867, 878, 882, 893], "filter": [1, 56, 94, 103, 104, 105, 129, 153, 218, 236, 444, 462, 484, 488, 538, 558, 561, 571, 613, 619, 812, 893], "col": [1, 25, 55, 56, 57, 58, 60, 84, 86, 103, 113, 114, 122, 136, 143, 144, 145, 153, 155, 169, 173, 182, 186, 192, 207, 213, 216, 236, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 283, 284, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 350, 353, 354, 355, 356, 360, 361, 362, 363, 365, 366, 368, 369, 370, 373, 374, 375, 376, 380, 381, 382, 385, 386, 387, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 493, 494, 499, 502, 505, 507, 508, 509, 514, 517, 520, 526, 527, 530, 538, 564, 567, 568, 569, 571, 585, 592, 599, 605, 608, 609, 612, 619, 647, 665, 674, 717, 796, 812, 813, 837, 839, 855, 893], "0": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 29, 55, 56, 57, 59, 60, 64, 87, 92, 93, 95, 96, 100, 102, 103, 105, 106, 107, 108, 109, 112, 113, 114, 115, 118, 122, 123, 124, 126, 127, 130, 134, 135, 138, 139, 141, 142, 144, 146, 150, 155, 156, 157, 158, 160, 162, 163, 164, 167, 168, 169, 170, 172, 175, 176, 180, 184, 185, 186, 189, 191, 192, 193, 194, 200, 203, 205, 208, 209, 210, 213, 214, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 236, 242, 243, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 265, 268, 274, 283, 291, 293, 295, 296, 297, 298, 300, 305, 308, 309, 316, 319, 320, 322, 323, 327, 332, 333, 337, 344, 345, 346, 348, 349, 350, 351, 352, 356, 358, 361, 364, 367, 368, 370, 371, 372, 374, 375, 380, 381, 383, 385, 386, 387, 394, 397, 398, 399, 401, 402, 405, 406, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 428, 430, 431, 432, 433, 437, 438, 446, 467, 471, 475, 476, 477, 483, 488, 490, 491, 493, 496, 497, 499, 503, 506, 515, 516, 519, 520, 524, 527, 529, 530, 538, 551, 552, 557, 559, 562, 563, 568, 573, 576, 581, 586, 587, 591, 592, 594, 595, 597, 599, 600, 606, 608, 609, 610, 613, 619, 629, 630, 631, 632, 633, 634, 635, 637, 639, 647, 650, 672, 675, 677, 682, 683, 688, 689, 691, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 715, 716, 721, 722, 726, 733, 735, 736, 737, 739, 741, 745, 748, 756, 758, 760, 761, 762, 763, 764, 769, 770, 776, 777, 787, 791, 792, 798, 800, 801, 803, 804, 805, 807, 809, 821, 822, 823, 827, 828, 830, 837, 839, 858, 868, 869, 872, 876, 877, 882, 883, 893], "drop": [1, 83, 122, 128, 129, 206, 213, 236, 264, 306, 308, 309, 538, 558, 604, 608, 619, 646, 690, 692, 893], "aaa": 1, "bbb": 1, "ccc": 1, "ddd": 1, "eee": 1, "fff": 1, "column": [1, 12, 13, 16, 17, 19, 27, 46, 55, 56, 63, 64, 65, 67, 69, 80, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 110, 114, 121, 122, 127, 128, 129, 130, 132, 137, 140, 142, 143, 144, 145, 149, 150, 156, 158, 159, 162, 163, 164, 165, 167, 168, 169, 170, 173, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 192, 193, 194, 198, 200, 203, 205, 206, 207, 208, 209, 210, 213, 214, 216, 236, 245, 246, 248, 257, 259, 262, 266, 282, 283, 312, 313, 316, 318, 319, 321, 323, 325, 326, 329, 330, 332, 338, 339, 342, 347, 349, 353, 355, 362, 374, 389, 390, 392, 400, 403, 407, 409, 413, 414, 415, 416, 417, 419, 420, 421, 428, 435, 436, 445, 453, 460, 461, 464, 470, 484, 485, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 506, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 538, 557, 558, 559, 560, 567, 568, 569, 573, 574, 578, 579, 580, 581, 582, 584, 585, 587, 589, 591, 592, 599, 600, 601, 604, 605, 606, 608, 609, 610, 611, 619, 625, 626, 644, 648, 664, 698, 701, 703, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 731, 739, 818, 836, 844, 851, 852, 863, 873, 893], "txt": 1, "utf8": [1, 8, 15, 46, 83, 92, 93, 103, 112, 130, 131, 138, 185, 201, 236, 270, 349, 439, 443, 446, 447, 448, 449, 458, 459, 460, 461, 464, 492, 494, 538, 559, 591, 619, 652, 723, 739, 768, 830, 834, 837, 838, 839, 840, 849, 850, 851, 852, 855, 893], "register_lazyframe_namespac": [1, 56, 57, 59], "dtypeoper": [1, 58], "ldf": [1, 58, 550, 552, 557, 558, 560, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 589, 590, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 612, 613, 614, 615, 619], "_ldf": [1, 58], "upcast_integer_typ": [1, 58], "with_column": [1, 58, 145, 173, 236, 248, 265, 291, 292, 294, 295, 296, 301, 304, 306, 337, 358, 361, 362, 365, 368, 370, 371, 372, 374, 400, 401, 444, 449, 452, 454, 455, 458, 460, 461, 462, 464, 467, 469, 477, 488, 491, 493, 494, 499, 503, 526, 527, 530, 538, 569, 585, 619, 647, 674, 726, 855], "tp": [1, 58], "cast": [1, 57, 58, 80, 117, 138, 144, 145, 173, 202, 213, 236, 247, 292, 303, 304, 310, 311, 408, 448, 467, 471, 477, 494, 538, 568, 569, 585, 608, 619, 674, 686, 687, 695, 696, 794, 839, 864, 873, 877, 893], "int64": [1, 27, 57, 58, 90, 118, 130, 138, 144, 145, 173, 185, 197, 236, 303, 304, 314, 317, 320, 322, 324, 327, 333, 347, 408, 471, 477, 488, 492, 504, 538, 559, 568, 569, 585, 591, 611, 619, 686, 687, 699, 702, 708, 710, 713, 716, 722, 794, 811, 864, 875, 876, 877, 893], "int8": [1, 58, 138, 236, 303, 304, 471, 538, 686, 687, 690, 797, 864, 893], "int16": [1, 58, 303, 304, 471, 538, 686, 687, 864, 893], "int32": [1, 58, 83, 114, 115, 144, 145, 157, 236, 291, 318, 342, 477, 538, 568, 569, 619, 703, 731, 877, 893], "b": [1, 24, 25, 26, 29, 46, 58, 63, 80, 82, 83, 84, 85, 86, 87, 95, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 244, 247, 248, 258, 262, 265, 270, 272, 285, 291, 292, 299, 307, 308, 309, 347, 351, 352, 353, 355, 357, 358, 361, 362, 364, 367, 368, 369, 370, 371, 372, 374, 377, 379, 384, 395, 399, 403, 411, 428, 434, 445, 454, 468, 469, 470, 480, 482, 484, 485, 490, 491, 492, 494, 495, 496, 499, 503, 504, 505, 507, 510, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 538, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 573, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 614, 615, 619, 627, 647, 674, 689, 691, 733, 734, 742, 759, 768, 795, 811, 836, 845, 863, 880, 893], "4": [1, 12, 20, 24, 25, 26, 29, 46, 55, 56, 57, 58, 59, 60, 63, 65, 80, 82, 83, 84, 85, 86, 87, 103, 109, 110, 111, 115, 122, 123, 124, 126, 129, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 165, 168, 169, 171, 173, 174, 175, 179, 183, 187, 195, 196, 197, 198, 199, 200, 204, 205, 207, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 242, 243, 247, 248, 258, 264, 265, 266, 269, 277, 278, 281, 285, 291, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 312, 313, 317, 323, 324, 325, 329, 330, 331, 332, 333, 336, 338, 339, 342, 348, 351, 352, 355, 356, 357, 359, 360, 361, 362, 371, 372, 374, 377, 379, 381, 384, 400, 402, 403, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 424, 426, 427, 430, 434, 435, 436, 437, 440, 449, 450, 452, 456, 458, 460, 461, 464, 470, 472, 473, 474, 477, 478, 490, 491, 492, 494, 495, 496, 499, 503, 505, 510, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 530, 538, 551, 552, 553, 556, 558, 560, 561, 562, 563, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 593, 594, 595, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 613, 614, 615, 619, 627, 630, 637, 646, 647, 648, 651, 659, 660, 663, 675, 676, 678, 688, 689, 691, 701, 702, 707, 709, 712, 713, 714, 715, 719, 720, 721, 722, 723, 725, 727, 728, 741, 742, 751, 754, 759, 761, 762, 763, 764, 767, 780, 787, 788, 789, 792, 801, 803, 804, 805, 806, 807, 809, 811, 821, 825, 826, 831, 840, 841, 843, 847, 849, 851, 852, 855, 863, 866, 867, 877, 884, 893], "c": [1, 24, 25, 26, 29, 46, 56, 58, 83, 85, 95, 103, 113, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 138, 139, 141, 142, 143, 144, 147, 149, 150, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 178, 180, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 201, 202, 203, 205, 208, 210, 211, 213, 219, 220, 221, 222, 223, 224, 226, 229, 230, 236, 248, 262, 270, 272, 362, 374, 428, 460, 464, 480, 482, 485, 490, 491, 492, 494, 495, 496, 499, 505, 507, 510, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 538, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 564, 567, 568, 573, 576, 582, 586, 589, 590, 591, 592, 595, 598, 599, 608, 609, 614, 615, 619, 689, 768, 851, 855, 880, 893], "5": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 29, 55, 56, 58, 59, 60, 63, 64, 80, 83, 84, 85, 86, 89, 90, 93, 109, 114, 115, 118, 122, 123, 124, 126, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 153, 155, 156, 159, 160, 161, 163, 165, 168, 169, 174, 175, 176, 179, 183, 187, 195, 196, 197, 198, 199, 204, 208, 209, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 243, 265, 266, 269, 274, 280, 281, 291, 292, 293, 294, 295, 296, 305, 306, 307, 311, 312, 314, 332, 333, 334, 337, 338, 341, 346, 347, 350, 356, 359, 362, 365, 368, 370, 371, 372, 374, 379, 400, 401, 403, 405, 406, 410, 411, 412, 413, 414, 416, 420, 422, 424, 430, 441, 448, 449, 452, 453, 467, 470, 472, 474, 478, 490, 493, 495, 496, 499, 502, 503, 504, 505, 510, 514, 515, 516, 517, 518, 519, 524, 525, 527, 528, 529, 538, 551, 552, 553, 556, 560, 561, 562, 563, 565, 567, 568, 569, 570, 572, 574, 575, 576, 577, 580, 581, 582, 586, 593, 594, 595, 598, 600, 601, 602, 603, 607, 608, 610, 613, 614, 615, 619, 627, 630, 634, 637, 647, 648, 651, 654, 663, 674, 676, 678, 684, 688, 689, 690, 691, 696, 697, 698, 699, 721, 722, 727, 728, 730, 737, 740, 751, 780, 787, 788, 789, 791, 792, 798, 799, 800, 802, 803, 806, 809, 811, 821, 827, 832, 839, 840, 844, 878, 884, 893], "6": [1, 24, 25, 26, 27, 28, 29, 56, 58, 63, 80, 83, 84, 85, 86, 87, 122, 125, 127, 128, 129, 130, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 153, 155, 156, 158, 161, 162, 163, 164, 165, 167, 170, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 213, 214, 216, 221, 229, 230, 236, 248, 266, 285, 291, 303, 304, 307, 312, 328, 330, 332, 343, 351, 352, 357, 359, 361, 379, 400, 404, 406, 407, 410, 413, 414, 415, 416, 417, 419, 420, 421, 424, 435, 436, 441, 445, 449, 452, 453, 472, 474, 485, 499, 503, 526, 527, 538, 553, 554, 556, 557, 558, 559, 560, 561, 564, 565, 567, 568, 569, 570, 572, 573, 575, 577, 578, 582, 586, 589, 591, 592, 593, 594, 595, 598, 599, 602, 603, 605, 607, 608, 610, 611, 614, 615, 619, 627, 648, 676, 682, 686, 687, 689, 691, 717, 728, 780, 792, 801, 803, 804, 805, 807, 811, 832, 836, 840, 844, 864, 893], "7": [1, 24, 25, 26, 27, 28, 29, 56, 58, 63, 65, 125, 126, 127, 128, 130, 132, 136, 137, 139, 144, 145, 147, 149, 151, 158, 162, 163, 164, 167, 170, 172, 176, 178, 180, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 201, 202, 203, 208, 209, 210, 211, 236, 304, 311, 312, 313, 329, 331, 336, 339, 342, 348, 359, 361, 400, 410, 414, 420, 472, 474, 526, 527, 538, 554, 557, 559, 560, 564, 568, 569, 570, 572, 573, 577, 587, 589, 591, 592, 599, 602, 603, 611, 619, 634, 697, 698, 703, 720, 725, 728, 806, 893], "float32": [1, 25, 58, 138, 236, 755, 893], "lazi": [1, 58, 63, 65, 90, 103, 114, 118, 159, 173, 216, 236, 248, 283, 400, 488, 508, 538, 547, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 619], "i16": [1, 58, 428, 538], "i32": [1, 58, 83, 114, 186, 236, 291, 318, 342, 428, 453, 530, 538, 592, 619, 703, 731, 844], "f32": [1, 58, 236, 265, 406, 428, 503, 538, 647, 792, 893], "i64": [1, 12, 16, 56, 57, 58, 59, 63, 80, 82, 83, 84, 85, 86, 90, 103, 115, 118, 122, 123, 124, 125, 127, 129, 130, 132, 133, 135, 136, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 155, 158, 159, 161, 162, 165, 167, 171, 173, 174, 175, 178, 179, 180, 181, 184, 186, 188, 189, 191, 192, 194, 195, 196, 198, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 226, 229, 230, 236, 244, 247, 248, 264, 265, 266, 267, 268, 269, 271, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 292, 294, 295, 296, 301, 302, 303, 304, 306, 307, 314, 315, 317, 320, 322, 324, 327, 333, 335, 347, 350, 352, 353, 354, 355, 357, 359, 360, 361, 362, 365, 368, 370, 371, 372, 374, 376, 379, 382, 383, 384, 395, 400, 401, 403, 404, 407, 408, 410, 411, 423, 425, 426, 428, 429, 430, 434, 435, 454, 455, 469, 470, 471, 472, 473, 474, 478, 479, 481, 484, 485, 492, 494, 499, 503, 504, 505, 510, 514, 517, 523, 526, 527, 528, 530, 538, 551, 553, 557, 558, 560, 561, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 582, 584, 585, 586, 589, 590, 592, 593, 594, 598, 599, 601, 602, 603, 604, 605, 608, 610, 613, 614, 615, 619, 627, 628, 646, 647, 648, 651, 659, 660, 663, 674, 678, 681, 684, 685, 686, 687, 689, 696, 699, 700, 702, 708, 710, 713, 716, 722, 724, 740, 742, 743, 749, 751, 759, 772, 779, 795, 799, 802, 806, 809, 812, 813, 816, 820, 821, 825, 826, 863, 865, 866, 867, 873, 879, 881, 884, 893], "register_series_namespac": [1, 56, 57, 58], "math": [1, 59, 682, 822, 868, 893], "mathshortcut": [1, 59], "": [1, 25, 59, 64, 92, 93, 115, 127, 129, 131, 143, 144, 150, 158, 159, 179, 180, 196, 216, 236, 269, 270, 277, 278, 281, 315, 334, 347, 375, 391, 395, 397, 398, 400, 401, 408, 412, 436, 449, 450, 452, 456, 458, 459, 461, 464, 467, 469, 499, 502, 504, 507, 508, 514, 517, 519, 527, 538, 558, 567, 568, 574, 603, 612, 613, 619, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 646, 648, 651, 652, 654, 659, 660, 663, 672, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 696, 697, 700, 720, 725, 734, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 783, 784, 787, 788, 789, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 820, 821, 822, 823, 825, 826, 828, 831, 832, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 847, 848, 849, 852, 853, 854, 855, 858, 861, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 893], "_": [1, 55, 59, 460, 851], "squar": [1, 59, 218, 375, 437, 538, 613, 770, 827, 893], "cube": [1, 59], "s2": [1, 111, 138, 236, 627, 676, 691, 759, 780, 811, 884, 893], "renam": [1, 83, 92, 93, 186, 213, 236, 244, 384, 393, 469, 523, 538, 592, 608, 619, 861, 873, 893], "n2": 1, "in_plac": [1, 149, 190, 211, 236, 793, 795, 819, 826, 893], "true": [1, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 60, 62, 63, 65, 80, 81, 85, 89, 92, 93, 94, 95, 96, 100, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 119, 121, 123, 124, 126, 135, 138, 139, 141, 142, 144, 150, 152, 153, 154, 156, 159, 160, 163, 168, 169, 171, 174, 175, 182, 183, 186, 192, 198, 205, 206, 207, 208, 209, 213, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 236, 243, 245, 246, 247, 248, 263, 282, 287, 291, 300, 301, 302, 303, 304, 331, 332, 336, 343, 344, 345, 346, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 408, 418, 423, 428, 433, 435, 436, 440, 442, 444, 448, 459, 460, 462, 464, 468, 469, 473, 478, 479, 482, 487, 488, 495, 522, 524, 526, 530, 538, 551, 552, 553, 555, 556, 561, 563, 567, 568, 573, 574, 576, 578, 586, 592, 595, 596, 597, 599, 604, 605, 608, 619, 625, 626, 627, 628, 638, 664, 668, 672, 676, 677, 720, 721, 725, 733, 735, 736, 737, 743, 747, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 780, 788, 789, 794, 804, 811, 824, 826, 831, 833, 835, 839, 850, 851, 853, 855, 875, 878, 883, 884, 893], "s3": [1, 94, 104, 105, 893], "n3": 1, "8": [1, 24, 25, 26, 27, 28, 29, 39, 52, 54, 55, 56, 58, 59, 63, 109, 113, 114, 122, 125, 126, 127, 128, 129, 130, 132, 136, 137, 139, 142, 147, 149, 158, 162, 163, 164, 167, 172, 176, 178, 180, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 201, 202, 203, 208, 210, 211, 213, 236, 247, 258, 264, 265, 299, 301, 304, 305, 308, 309, 312, 361, 377, 400, 402, 403, 410, 411, 414, 415, 417, 419, 421, 428, 434, 450, 456, 464, 470, 474, 490, 495, 496, 499, 503, 505, 510, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 529, 538, 554, 557, 558, 559, 560, 564, 570, 573, 577, 578, 586, 589, 591, 592, 599, 602, 603, 608, 611, 619, 646, 647, 688, 703, 787, 798, 801, 803, 804, 805, 807, 841, 847, 855, 893], "9": [1, 24, 25, 26, 29, 55, 63, 122, 138, 145, 147, 151, 172, 186, 195, 208, 211, 213, 216, 229, 236, 247, 258, 264, 276, 279, 299, 301, 304, 308, 309, 312, 313, 329, 338, 339, 361, 366, 374, 377, 400, 410, 412, 414, 420, 430, 434, 474, 491, 493, 526, 538, 569, 570, 572, 577, 592, 599, 602, 608, 619, 646, 698, 707, 709, 715, 720, 721, 725, 727, 759, 798, 806, 808, 821, 893], "27": [1, 59, 229, 304, 318, 330, 342, 402, 538], "16": [1, 36, 49, 57, 109, 144, 145, 213, 236, 301, 304, 337, 349, 361, 414, 453, 502, 503, 538, 568, 569, 595, 608, 619, 720, 725, 726, 739, 787, 822, 844, 868, 893], "64": [1, 29, 35, 38, 51, 57, 59, 236, 402, 538, 597, 619, 787, 893], "25": [1, 59, 65, 144, 145, 159, 209, 213, 236, 306, 318, 331, 336, 342, 508, 538, 568, 569, 574, 580, 606, 608, 619, 690, 720, 725, 733, 787, 893], "125": [1, 59, 787, 893], "arg": [2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 173, 202, 236, 507, 585, 619, 628, 875, 893], "ani": [2, 3, 4, 6, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 61, 80, 81, 82, 83, 84, 86, 92, 93, 94, 95, 96, 100, 103, 104, 106, 108, 112, 114, 115, 119, 122, 129, 133, 135, 136, 138, 155, 156, 157, 171, 172, 173, 182, 183, 198, 199, 201, 202, 208, 236, 248, 262, 265, 291, 332, 352, 366, 383, 393, 410, 412, 424, 427, 435, 464, 473, 487, 505, 512, 524, 538, 558, 563, 585, 619, 627, 628, 644, 647, 691, 721, 742, 759, 769, 796, 798, 810, 813, 855, 866, 874, 875, 893], "kwarg": [2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 172, 173, 202, 236, 585, 619, 875, 893], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 538, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 893, 899], "method": [2, 3, 4, 6, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 81, 92, 93, 95, 112, 129, 151, 156, 169, 176, 183, 206, 213, 228, 236, 245, 337, 350, 361, 405, 406, 413, 414, 415, 416, 417, 419, 420, 421, 480, 520, 531, 532, 534, 538, 539, 542, 543, 544, 547, 558, 572, 587, 604, 608, 619, 628, 726, 740, 751, 791, 792, 803, 877, 885, 887, 889, 893, 896, 897, 898], "A": [4, 25, 43, 62, 65, 87, 92, 93, 100, 102, 103, 104, 138, 144, 159, 171, 174, 183, 198, 200, 208, 209, 213, 236, 242, 283, 312, 314, 317, 320, 322, 324, 327, 333, 350, 364, 367, 368, 370, 383, 384, 391, 403, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 440, 441, 446, 447, 448, 467, 470, 492, 493, 503, 507, 538, 568, 574, 589, 599, 608, 619, 665, 697, 699, 702, 708, 710, 713, 716, 722, 740, 798, 799, 800, 802, 805, 806, 807, 831, 832, 837, 838, 839, 845, 846, 855, 858, 893], "encod": [4, 54, 92, 93, 103, 200, 236, 287, 442, 668, 833], "set": [4, 5, 6, 7, 8, 10, 11, 12, 15, 20, 21, 23, 25, 27, 28, 56, 65, 81, 83, 86, 92, 93, 95, 96, 100, 103, 106, 107, 108, 110, 111, 113, 114, 115, 119, 121, 125, 146, 156, 159, 165, 184, 186, 191, 205, 213, 236, 248, 278, 282, 283, 340, 347, 358, 366, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 429, 433, 434, 451, 457, 458, 463, 492, 504, 538, 554, 573, 574, 578, 582, 592, 596, 597, 598, 608, 611, 613, 619, 627, 628, 660, 664, 665, 729, 748, 759, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 813, 820, 824, 825, 842, 848, 849, 854, 875, 893], "string": [4, 5, 7, 10, 11, 15, 25, 27, 28, 32, 46, 54, 65, 92, 93, 103, 112, 113, 115, 117, 138, 142, 144, 145, 159, 186, 192, 208, 209, 213, 236, 270, 289, 292, 328, 331, 336, 349, 355, 362, 413, 414, 415, 416, 417, 419, 420, 421, 439, 440, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 492, 494, 507, 514, 517, 538, 555, 556, 566, 568, 569, 574, 592, 608, 611, 619, 652, 670, 674, 717, 720, 725, 739, 829, 830, 831, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 893], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 566, 588, 619], "cfg": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 119, 186, 213, 236, 592, 608, 619], "previous": 5, "save": [5, 547], "share": [5, 46, 131, 236, 734, 893], "option": [5, 6, 7, 15, 55, 65, 92, 94, 95, 96, 100, 104, 106, 108, 109, 112, 113, 114, 115, 129, 159, 165, 169, 198, 200, 205, 209, 236, 350, 375, 412, 413, 414, 415, 416, 417, 419, 420, 421, 433, 458, 485, 487, 488, 512, 513, 526, 538, 547, 573, 574, 582, 619, 770, 798, 799, 800, 801, 802, 803, 805, 806, 807, 813, 824, 849, 873, 893], "paramet": [5, 9, 10, 11, 12, 15, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 33, 40, 43, 45, 47, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 118, 121, 122, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 156, 157, 158, 159, 161, 163, 165, 166, 168, 169, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 184, 186, 188, 189, 191, 192, 193, 194, 195, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 218, 221, 228, 230, 236, 244, 247, 248, 257, 259, 262, 263, 264, 265, 268, 269, 270, 277, 278, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 315, 328, 331, 335, 336, 337, 340, 341, 343, 344, 345, 346, 347, 350, 352, 353, 357, 358, 359, 361, 362, 366, 375, 378, 380, 383, 384, 400, 401, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 472, 473, 478, 479, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 506, 507, 508, 510, 512, 513, 514, 519, 520, 521, 522, 523, 524, 526, 527, 528, 538, 553, 556, 557, 558, 561, 562, 563, 564, 566, 567, 568, 569, 570, 573, 574, 577, 578, 582, 583, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 602, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 619, 624, 627, 628, 637, 640, 644, 645, 646, 647, 650, 651, 652, 659, 660, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 678, 679, 680, 684, 685, 686, 687, 688, 690, 691, 695, 696, 697, 700, 717, 720, 724, 725, 726, 729, 730, 733, 734, 735, 736, 737, 740, 741, 742, 743, 748, 749, 751, 766, 770, 772, 787, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 820, 824, 825, 826, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 861, 865, 866, 873, 874, 875, 878, 879, 881, 882, 883, 884, 893], "json": [5, 7, 27, 28, 98, 99, 107, 236, 448, 547, 566, 588, 611, 619, 839], "produc": [5, 114, 115, 390, 513, 578, 619], "reset": [6, 119], "default": [6, 23, 24, 25, 26, 27, 28, 29, 80, 82, 83, 84, 85, 86, 90, 92, 93, 100, 103, 112, 113, 114, 115, 118, 131, 143, 145, 146, 156, 159, 165, 174, 182, 183, 184, 206, 214, 236, 278, 282, 283, 292, 343, 358, 380, 397, 398, 401, 406, 423, 429, 446, 451, 453, 457, 458, 463, 464, 488, 489, 508, 512, 524, 538, 556, 567, 569, 574, 582, 597, 604, 611, 619, 660, 664, 665, 674, 733, 734, 748, 783, 784, 787, 792, 809, 820, 828, 837, 842, 844, 848, 849, 854, 882, 893], "state": [6, 62, 73, 497, 547, 553, 561, 586, 595, 619], "note": [6, 15, 55, 65, 80, 81, 82, 84, 86, 90, 92, 94, 100, 102, 104, 113, 114, 115, 118, 119, 121, 122, 134, 143, 144, 145, 156, 158, 159, 169, 172, 173, 182, 183, 199, 201, 205, 209, 213, 236, 265, 282, 303, 304, 308, 309, 328, 331, 336, 362, 368, 370, 413, 414, 415, 416, 417, 419, 420, 421, 433, 449, 451, 452, 457, 463, 464, 471, 497, 506, 521, 538, 553, 561, 562, 568, 569, 570, 574, 577, 589, 595, 608, 619, 647, 664, 686, 687, 717, 725, 812, 813, 819, 824, 840, 842, 843, 848, 854, 855, 864, 893], "oper": [6, 46, 63, 70, 71, 80, 82, 83, 84, 85, 86, 92, 100, 122, 133, 138, 143, 150, 160, 166, 169, 171, 173, 177, 197, 201, 202, 205, 208, 215, 216, 236, 243, 283, 300, 301, 302, 303, 304, 305, 374, 393, 406, 408, 485, 486, 503, 538, 561, 567, 570, 573, 577, 583, 619, 627, 684, 685, 686, 687, 688, 792, 794, 871, 874, 875, 883, 893], "remov": [6, 127, 236, 337, 347, 349, 451, 457, 463, 504, 538, 557, 619, 726, 739, 842, 848, 854, 893], "from": [6, 25, 55, 65, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 126, 127, 131, 133, 142, 144, 145, 156, 157, 159, 160, 165, 178, 182, 184, 186, 205, 206, 208, 209, 236, 300, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 347, 361, 375, 397, 398, 401, 423, 435, 436, 446, 453, 464, 480, 482, 491, 492, 500, 501, 502, 504, 512, 524, 537, 538, 557, 561, 566, 568, 569, 574, 582, 588, 589, 592, 604, 609, 619, 627, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 734, 753, 770, 783, 784, 785, 787, 809, 837, 844, 881, 884, 893], "environ": [6, 23], "local": [6, 94, 104, 337, 726, 788, 789, 893], "non": [6, 55, 157, 165, 186, 213, 236, 401, 412, 413, 414, 415, 416, 417, 419, 420, 421, 441, 447, 491, 494, 538, 582, 592, 608, 619, 665, 787, 798, 799, 800, 801, 802, 803, 805, 806, 807, 832, 838, 875, 893], "env": 6, "back": [6, 55, 133, 236, 627, 893], "valu": [6, 9, 10, 23, 25, 27, 40, 41, 53, 55, 63, 64, 83, 85, 92, 93, 102, 103, 105, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 129, 133, 134, 135, 139, 142, 144, 145, 146, 147, 151, 156, 162, 163, 164, 165, 167, 169, 171, 174, 175, 176, 178, 182, 183, 184, 188, 189, 192, 193, 194, 195, 198, 199, 208, 209, 210, 219, 220, 222, 223, 224, 226, 227, 236, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 267, 268, 269, 271, 273, 274, 275, 277, 280, 281, 283, 284, 285, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 305, 306, 308, 309, 312, 313, 325, 329, 338, 344, 345, 346, 348, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 376, 377, 381, 382, 383, 385, 386, 387, 394, 395, 396, 397, 398, 399, 400, 401, 405, 406, 409, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 430, 431, 432, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 454, 455, 458, 460, 461, 462, 467, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 491, 494, 495, 497, 498, 499, 505, 506, 512, 514, 515, 516, 517, 518, 521, 522, 527, 530, 538, 558, 562, 563, 568, 569, 571, 572, 579, 580, 581, 582, 584, 587, 589, 593, 594, 599, 600, 601, 606, 611, 612, 619, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 646, 649, 650, 651, 653, 655, 656, 657, 659, 663, 666, 668, 669, 670, 671, 674, 675, 678, 679, 680, 682, 683, 688, 689, 690, 692, 693, 697, 698, 714, 718, 727, 734, 735, 736, 737, 740, 741, 742, 745, 747, 748, 751, 754, 756, 757, 759, 760, 761, 762, 763, 764, 767, 775, 776, 778, 779, 781, 783, 784, 785, 786, 787, 790, 791, 792, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 816, 817, 821, 822, 823, 824, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 843, 845, 846, 849, 851, 852, 853, 858, 864, 866, 867, 868, 869, 877, 880, 881, 883, 884, 893], "exampl": [6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 490, 491, 492, 493, 494, 495, 496, 499, 502, 503, 504, 505, 507, 508, 510, 512, 514, 515, 516, 517, 518, 519, 523, 524, 525, 526, 527, 528, 529, 530, 538, 547, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 651, 652, 654, 659, 660, 663, 665, 672, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 772, 775, 776, 777, 778, 779, 780, 781, 787, 788, 789, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 820, 821, 822, 823, 825, 826, 828, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 893], "current": [7, 23, 81, 121, 123, 124, 236, 283, 331, 401, 538, 547, 551, 552, 619, 677, 681, 720, 787, 893], "activ": [8, 13, 14, 16, 17, 18, 19, 22, 265, 647], "bool": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 40, 55, 60, 62, 63, 80, 81, 85, 92, 93, 96, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 121, 123, 124, 135, 136, 138, 139, 141, 142, 143, 144, 149, 150, 152, 153, 154, 159, 171, 174, 184, 190, 192, 198, 202, 205, 206, 207, 209, 211, 213, 220, 222, 223, 226, 236, 245, 246, 247, 248, 257, 259, 263, 265, 279, 282, 287, 291, 300, 301, 302, 303, 304, 305, 332, 343, 344, 345, 346, 350, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 383, 388, 389, 406, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 427, 428, 433, 435, 436, 440, 442, 444, 454, 455, 459, 460, 462, 464, 468, 469, 478, 479, 482, 487, 488, 489, 491, 497, 512, 522, 524, 526, 530, 538, 551, 553, 555, 556, 561, 563, 564, 567, 568, 573, 574, 578, 586, 595, 596, 597, 599, 604, 605, 608, 619, 625, 626, 627, 628, 637, 640, 645, 647, 661, 664, 668, 672, 677, 684, 685, 686, 687, 688, 721, 733, 735, 736, 737, 743, 747, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 788, 789, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 813, 814, 819, 824, 826, 831, 833, 835, 845, 846, 850, 851, 853, 855, 874, 875, 878, 879, 881, 883, 893], "ascii": [8, 15, 450, 452, 456, 467, 841, 843, 847, 858], "charact": [8, 10, 15, 21, 25, 92, 93, 103, 236, 328, 445, 449, 450, 451, 456, 457, 459, 460, 463, 467, 586, 619, 717, 836, 840, 841, 842, 847, 848, 850, 851, 854, 858], "print": [8, 10, 12, 14, 20, 93, 109, 130, 142, 143, 157, 160, 215, 236, 360, 538, 571, 619, 759, 798, 893], "tabl": [8, 11, 12, 14, 15, 16, 17, 18, 20, 21, 45, 80, 92, 93, 94, 103, 104, 174, 197, 202, 208, 236], "outlin": 8, "fals": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 27, 29, 55, 60, 62, 65, 81, 92, 93, 95, 96, 100, 103, 107, 108, 110, 111, 112, 113, 114, 115, 121, 123, 124, 126, 138, 139, 141, 142, 143, 144, 149, 150, 152, 153, 154, 156, 159, 160, 163, 168, 169, 171, 174, 175, 182, 183, 184, 190, 192, 198, 202, 205, 209, 211, 213, 219, 220, 222, 223, 224, 226, 229, 236, 245, 246, 248, 257, 259, 263, 265, 279, 282, 300, 301, 302, 303, 304, 305, 332, 343, 344, 345, 346, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 383, 406, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 428, 433, 435, 436, 440, 444, 454, 455, 459, 460, 462, 464, 478, 479, 482, 488, 489, 497, 512, 522, 524, 526, 530, 538, 551, 552, 553, 555, 556, 561, 567, 568, 573, 574, 576, 578, 586, 595, 596, 597, 599, 608, 619, 627, 637, 640, 647, 661, 664, 672, 676, 677, 684, 685, 686, 687, 688, 721, 733, 735, 736, 737, 743, 752, 754, 756, 759, 760, 761, 762, 763, 764, 766, 767, 770, 780, 788, 789, 792, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 814, 819, 824, 826, 831, 835, 845, 846, 850, 851, 853, 855, 874, 875, 878, 879, 881, 883, 884, 893], "revert": 8, "abc": [8, 13, 14, 16, 17, 18, 19, 20, 454, 845], "xyz": [8, 13, 14, 16, 17, 18, 19, 20, 441, 447, 832, 838, 873, 893], "f64": [8, 11, 13, 14, 16, 17, 18, 19, 20, 55, 57, 59, 64, 83, 105, 114, 123, 124, 126, 127, 129, 130, 134, 135, 138, 141, 142, 150, 158, 159, 163, 164, 172, 175, 176, 191, 192, 193, 210, 213, 220, 222, 223, 224, 225, 226, 228, 229, 236, 242, 249, 250, 251, 252, 253, 254, 274, 291, 293, 297, 298, 305, 308, 309, 332, 343, 344, 345, 346, 347, 348, 356, 361, 368, 370, 371, 372, 374, 375, 380, 381, 385, 386, 387, 394, 397, 398, 401, 402, 405, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 431, 432, 433, 437, 438, 475, 476, 483, 490, 491, 493, 496, 504, 515, 516, 519, 524, 525, 529, 538, 551, 557, 558, 562, 563, 573, 574, 580, 581, 587, 599, 600, 606, 608, 609, 619, 629, 630, 631, 632, 633, 634, 675, 682, 683, 688, 689, 721, 736, 737, 741, 745, 787, 798, 800, 801, 803, 804, 805, 807, 808, 822, 823, 827, 868, 869, 893], "fmt": [9, 334, 360, 464, 507, 538, 571, 619, 723, 855], "mix": [9, 464, 689, 855, 893], "control": [9, 113, 556, 619], "how": [9, 46, 63, 83, 86, 102, 129, 158, 208, 236, 264, 292, 306, 361, 409, 538, 558, 573, 619, 646, 674, 690, 893], "float": [9, 34, 35, 40, 64, 105, 110, 111, 112, 114, 115, 131, 134, 159, 176, 184, 189, 228, 236, 263, 293, 294, 295, 296, 308, 309, 332, 343, 344, 345, 346, 350, 351, 356, 361, 362, 364, 367, 368, 370, 371, 372, 380, 385, 394, 397, 398, 402, 405, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 427, 490, 491, 499, 514, 515, 516, 517, 520, 522, 525, 527, 529, 538, 562, 574, 587, 594, 595, 619, 645, 672, 675, 678, 679, 680, 691, 721, 733, 734, 735, 736, 737, 741, 745, 758, 770, 773, 775, 776, 777, 778, 783, 784, 790, 791, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 824, 828, 864, 882, 893], "point": [9, 34, 35, 104, 114, 115, 134, 144, 160, 184, 236, 293, 308, 309, 332, 351, 356, 368, 370, 422, 423, 538, 562, 568, 578, 589, 619, 675, 721, 741, 745, 758, 808, 809, 893], "displai": [9, 14, 18], "full": [9, 32, 61, 92, 93, 94, 103, 104, 578, 619], "format": [9, 11, 15, 25, 91, 92, 93, 103, 105, 132, 142, 156, 165, 183, 199, 234, 236, 331, 334, 453, 464, 560, 566, 582, 611, 619, 723, 844, 855, 892], "number": [9, 10, 12, 20, 21, 25, 29, 55, 74, 80, 82, 84, 86, 89, 90, 92, 93, 95, 103, 107, 113, 114, 118, 131, 132, 134, 135, 147, 156, 157, 160, 161, 168, 169, 184, 188, 189, 195, 208, 219, 221, 230, 236, 264, 269, 277, 281, 283, 285, 299, 305, 306, 316, 318, 323, 325, 332, 338, 339, 342, 344, 345, 346, 350, 352, 357, 359, 368, 370, 377, 378, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 426, 427, 429, 449, 452, 460, 461, 472, 478, 495, 510, 524, 528, 538, 560, 561, 562, 563, 570, 577, 586, 593, 594, 597, 602, 614, 615, 619, 646, 651, 659, 663, 665, 688, 690, 701, 703, 712, 714, 721, 727, 728, 731, 734, 735, 736, 737, 740, 742, 749, 758, 772, 780, 781, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 816, 817, 820, 828, 840, 843, 851, 852, 865, 878, 882, 893], "int": [10, 12, 20, 21, 25, 29, 40, 57, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 106, 107, 108, 112, 113, 114, 115, 116, 118, 122, 131, 134, 135, 137, 146, 147, 148, 150, 156, 157, 159, 161, 162, 163, 167, 168, 169, 180, 182, 184, 187, 188, 189, 191, 193, 194, 195, 196, 203, 208, 210, 212, 214, 221, 230, 236, 263, 264, 268, 269, 277, 278, 281, 282, 283, 285, 294, 295, 296, 305, 306, 344, 345, 346, 350, 351, 352, 357, 358, 359, 362, 378, 401, 402, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 429, 434, 438, 446, 450, 453, 456, 458, 460, 461, 467, 468, 469, 472, 473, 474, 478, 483, 488, 491, 495, 499, 500, 501, 502, 508, 510, 514, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 538, 561, 562, 563, 570, 574, 577, 586, 593, 594, 597, 598, 600, 602, 603, 606, 607, 610, 614, 615, 619, 635, 636, 645, 646, 650, 651, 659, 660, 663, 664, 665, 672, 676, 678, 679, 680, 688, 690, 734, 735, 736, 737, 740, 741, 742, 748, 749, 771, 772, 775, 776, 778, 780, 781, 783, 784, 785, 786, 787, 790, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 816, 817, 820, 825, 828, 837, 841, 844, 847, 849, 851, 852, 858, 864, 865, 866, 867, 878, 882, 893], "liter": [11, 15, 60, 65, 95, 115, 142, 156, 162, 163, 167, 168, 171, 182, 183, 186, 194, 198, 213, 236, 245, 246, 312, 350, 362, 374, 407, 440, 454, 455, 488, 500, 501, 508, 512, 522, 526, 530, 538, 563, 592, 608, 619, 625, 626, 697, 740, 812, 813, 831, 845, 846, 893], "left": [11, 65, 110, 111, 144, 145, 158, 159, 236, 344, 345, 346, 361, 362, 413, 414, 415, 416, 417, 419, 420, 421, 424, 450, 467, 477, 491, 497, 498, 506, 521, 538, 568, 569, 573, 574, 619, 735, 736, 737, 810, 841, 858, 877, 893], "center": [11, 344, 345, 346, 412, 413, 414, 415, 416, 417, 419, 420, 421, 538, 735, 736, 737, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "right": [11, 13, 65, 92, 93, 110, 111, 144, 145, 158, 159, 236, 344, 345, 346, 362, 413, 414, 415, 416, 417, 419, 420, 421, 424, 433, 456, 491, 538, 568, 569, 573, 574, 619, 735, 736, 737, 810, 824, 847, 893], "cell": 11, "align": [11, 55, 467, 858], "keyerror": [11, 15], "recognis": [11, 15, 112], "column_abc": 11, "column_xyz": 11, "If": [12, 25, 27, 28, 29, 46, 61, 64, 65, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 100, 103, 104, 106, 107, 108, 121, 122, 133, 142, 144, 145, 156, 159, 165, 169, 171, 183, 184, 191, 199, 201, 202, 205, 236, 248, 278, 283, 294, 295, 296, 312, 353, 375, 383, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 429, 433, 434, 435, 436, 449, 451, 452, 457, 458, 459, 460, 461, 463, 464, 478, 485, 487, 488, 489, 495, 497, 506, 512, 524, 538, 568, 569, 573, 574, 578, 582, 589, 597, 598, 611, 613, 619, 627, 628, 660, 678, 679, 680, 697, 747, 770, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 814, 820, 824, 825, 840, 842, 843, 848, 849, 850, 851, 852, 854, 855, 871, 875, 878, 883, 893], "rang": [12, 64, 65, 102, 131, 144, 157, 236, 313, 325, 329, 330, 331, 336, 338, 361, 488, 493, 500, 501, 538, 568, 619, 698, 714, 718, 719, 720, 725, 727, 734, 787, 893], "100": [12, 83, 86, 92, 93, 103, 107, 236, 467, 488, 799, 800, 802, 893], "98": [12, 150, 236, 435, 436, 473, 478, 538], "99": [12, 134, 135, 150, 153, 236, 243, 350, 352, 435, 436, 473, 478, 491, 538, 562, 563, 619, 733, 740, 893], "10": [12, 24, 25, 26, 29, 55, 63, 64, 65, 102, 103, 109, 114, 115, 124, 133, 141, 144, 145, 147, 149, 150, 151, 168, 173, 175, 179, 180, 186, 195, 213, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 236, 247, 255, 256, 257, 258, 259, 264, 269, 277, 278, 281, 294, 299, 301, 304, 306, 308, 309, 312, 331, 336, 340, 358, 359, 361, 366, 374, 377, 378, 381, 401, 414, 434, 467, 472, 503, 508, 510, 528, 538, 553, 568, 569, 570, 572, 577, 585, 586, 592, 597, 601, 602, 608, 619, 628, 646, 651, 659, 660, 663, 678, 690, 697, 725, 729, 733, 749, 759, 772, 774, 787, 812, 813, 865, 893], "95": [12, 243, 538], "96": [12, 243, 538], "97": [12, 150, 236, 243, 538], "move": [13, 337, 344, 345, 346, 413, 414, 416, 420, 538, 726, 735, 736, 737, 799, 800, 802, 806, 893], "inlin": 13, "parenthes": 13, "below": [14, 94, 104, 129, 143, 236, 361, 530, 538, 558, 619], "when": [14, 18, 29, 46, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 92, 93, 96, 100, 103, 104, 106, 107, 114, 115, 117, 122, 130, 131, 133, 135, 138, 144, 173, 182, 186, 236, 294, 295, 296, 344, 345, 346, 352, 383, 391, 451, 457, 463, 464, 497, 506, 538, 563, 568, 578, 592, 597, 619, 627, 678, 679, 680, 734, 735, 736, 737, 742, 812, 813, 842, 848, 854, 893], "ascii_ful": 15, "ascii_full_condens": 15, "ascii_no_bord": 15, "ascii_borders_onli": 15, "ascii_borders_only_condens": 15, "ascii_horizontal_onli": 15, "ascii_markdown": 15, "utf8_ful": [15, 55], "utf8_full_condens": 15, "utf8_no_bord": 15, "utf8_borders_onli": 15, "utf8_horizontal_onli": 15, "noth": [15, 441, 446, 447, 448, 832, 837, 838, 839], "none": [15, 23, 24, 25, 26, 27, 28, 29, 32, 41, 45, 55, 64, 65, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 126, 129, 134, 135, 142, 144, 145, 146, 151, 158, 159, 160, 163, 165, 169, 170, 182, 184, 186, 189, 191, 198, 200, 205, 206, 207, 208, 209, 213, 236, 244, 247, 248, 258, 268, 278, 283, 285, 294, 295, 296, 299, 301, 304, 308, 309, 311, 331, 336, 344, 345, 346, 347, 350, 351, 352, 357, 358, 361, 362, 368, 369, 370, 371, 372, 377, 383, 399, 401, 407, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 427, 428, 429, 430, 434, 439, 440, 443, 444, 448, 449, 450, 451, 452, 456, 457, 458, 460, 461, 462, 463, 464, 467, 468, 469, 477, 485, 487, 488, 491, 494, 495, 501, 502, 504, 505, 512, 513, 522, 523, 525, 526, 529, 538, 551, 552, 558, 562, 563, 568, 569, 572, 573, 574, 576, 578, 582, 592, 594, 595, 596, 597, 598, 599, 604, 605, 608, 609, 611, 613, 619, 628, 635, 636, 650, 660, 665, 677, 678, 689, 691, 696, 705, 706, 720, 725, 732, 733, 735, 736, 737, 740, 741, 742, 744, 747, 748, 750, 751, 763, 764, 770, 775, 776, 777, 778, 782, 791, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 815, 817, 820, 821, 824, 825, 828, 830, 831, 834, 835, 839, 840, 841, 842, 843, 847, 848, 849, 851, 852, 853, 854, 855, 870, 873, 877, 882, 883, 893], "rounded_corn": 15, "style": [15, 174, 236], "border": 15, "line": [15, 92, 93, 95, 103, 142, 236], "includ": [15, 23, 25, 61, 94, 104, 114, 131, 144, 205, 208, 236, 332, 362, 459, 460, 497, 538, 568, 619, 721, 734, 850, 851, 883, 893], "row": [15, 20, 25, 27, 29, 55, 56, 58, 72, 74, 79, 83, 84, 86, 92, 93, 95, 96, 100, 103, 106, 107, 108, 110, 113, 114, 122, 129, 133, 136, 138, 142, 144, 146, 147, 152, 154, 156, 157, 159, 160, 161, 165, 169, 191, 195, 196, 199, 206, 208, 214, 218, 221, 230, 236, 248, 266, 349, 359, 378, 401, 410, 434, 445, 472, 497, 498, 506, 510, 514, 517, 521, 528, 538, 553, 558, 561, 564, 565, 568, 570, 574, 575, 577, 578, 582, 597, 598, 602, 603, 604, 610, 613, 614, 615, 619, 627, 648, 739, 749, 772, 787, 796, 825, 836, 865, 893], "divid": [15, 331, 336, 344, 345, 346, 375, 538, 720, 725, 735, 736, 737, 770, 893], "same": [15, 46, 55, 62, 113, 122, 206, 213, 218, 236, 242, 247, 248, 349, 412, 413, 414, 415, 416, 417, 419, 420, 421, 492, 538, 578, 604, 608, 613, 619, 623, 627, 628, 697, 739, 798, 799, 800, 801, 802, 803, 805, 806, 807, 884, 893], "dens": [15, 142, 236, 406, 538, 792, 893], "space": 15, "horizont": [15, 63, 138, 149, 208, 236, 494, 497, 498, 499, 503, 506, 514, 517, 521, 527], "markdown": 15, "compat": [15, 29, 102, 104, 236, 597, 619], "No": 15, "appli": [15, 25, 60, 63, 103, 112, 114, 115, 138, 173, 216, 236, 313, 316, 318, 319, 321, 323, 325, 326, 329, 330, 332, 338, 339, 342, 345, 346, 383, 400, 412, 413, 414, 416, 420, 464, 485, 488, 497, 498, 506, 513, 521, 538, 570, 577, 578, 585, 619, 698, 701, 703, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 731, 736, 737, 798, 799, 800, 802, 806, 855, 893], "round": [15, 57, 293, 356, 475, 538, 675, 745, 893], "corner": 15, "op": [15, 115, 236, 409, 538, 893], "The": [15, 29, 40, 47, 55, 61, 80, 82, 83, 84, 86, 89, 92, 100, 102, 103, 104, 122, 130, 142, 144, 145, 146, 151, 156, 159, 166, 182, 183, 186, 207, 209, 213, 218, 236, 248, 282, 283, 285, 286, 287, 288, 313, 325, 328, 329, 331, 336, 338, 350, 357, 358, 383, 406, 409, 412, 413, 414, 415, 416, 417, 419, 420, 421, 430, 433, 436, 439, 442, 443, 449, 450, 451, 456, 457, 463, 467, 489, 508, 523, 531, 532, 534, 538, 539, 542, 543, 544, 551, 567, 568, 569, 570, 572, 574, 577, 578, 583, 586, 592, 597, 605, 608, 613, 619, 664, 667, 668, 669, 677, 698, 714, 717, 718, 720, 725, 727, 740, 748, 751, 792, 798, 799, 800, 801, 802, 803, 805, 806, 807, 821, 824, 830, 833, 834, 840, 841, 842, 847, 848, 854, 858, 885, 887, 889, 893, 896, 897, 898], "one": [15, 55, 72, 80, 82, 83, 84, 85, 86, 115, 135, 136, 142, 144, 145, 156, 165, 174, 182, 183, 200, 204, 216, 217, 236, 243, 352, 374, 412, 435, 436, 468, 473, 485, 514, 517, 526, 527, 538, 557, 563, 564, 568, 569, 582, 609, 619, 627, 742, 798, 859, 893], "more": [15, 27, 29, 55, 79, 80, 81, 82, 83, 84, 85, 86, 94, 100, 104, 114, 115, 122, 143, 156, 160, 165, 169, 172, 182, 183, 184, 206, 218, 236, 248, 294, 295, 296, 337, 374, 375, 383, 423, 433, 479, 514, 517, 527, 538, 567, 582, 597, 604, 613, 619, 628, 678, 679, 680, 726, 770, 809, 824, 879, 893, 900], "semigraph": 15, "box": [15, 122, 236], "draw": [15, 20, 21], "found": [15, 25, 67, 76, 78, 83, 130, 236, 424, 448, 464, 469, 538, 810, 839, 893], "unicod": 15, "block": [15, 589, 610, 619, 812, 813, 893], "http": [15, 81, 102, 121, 446, 837, 900], "en": 15, "wikipedia": 15, "org": [15, 81, 121], "wiki": 15, "drawing_charact": 15, "box_draw": 15, "hide": [16, 17, 18, 19], "etc": [16, 80, 92, 94, 96, 100, 104, 106, 108, 488, 812, 813, 893], "inform": [18, 61, 94, 104, 172, 236, 294, 295, 296, 375, 433, 538, 586, 619, 678, 679, 680, 770, 824, 893], "separ": [19, 25, 205, 236, 266, 270, 445, 494, 497, 498, 648, 652, 836, 863], "between": [19, 63, 112, 113, 114, 115, 176, 228, 236, 270, 291, 307, 362, 401, 405, 417, 439, 496, 519, 520, 524, 538, 587, 619, 652, 672, 691, 787, 791, 803, 830, 893], "set_tbl_column_data_type_inlin": 19, "max": [20, 29, 114, 115, 126, 135, 144, 145, 174, 236, 294, 295, 301, 352, 400, 406, 413, 425, 461, 538, 563, 568, 569, 597, 612, 619, 665, 678, 679, 684, 689, 742, 792, 799, 814, 852, 893], "both": [20, 25, 46, 65, 144, 145, 158, 159, 166, 182, 236, 247, 362, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 573, 574, 583, 619], "element": [20, 90, 115, 118, 249, 250, 251, 252, 253, 254, 265, 266, 297, 298, 300, 301, 302, 303, 304, 305, 348, 358, 366, 381, 401, 406, 409, 424, 430, 431, 432, 437, 460, 461, 475, 476, 478, 538, 628, 629, 630, 631, 632, 633, 634, 647, 648, 682, 683, 684, 685, 686, 687, 688, 738, 743, 759, 774, 787, 792, 810, 821, 822, 823, 827, 828, 851, 852, 868, 869, 878, 879, 882, 893], "width": [21, 92, 93, 236, 450, 456, 467, 619, 841, 847, 858], "char": [21, 46, 452, 843], "enabl": [22, 186, 213, 236, 425, 538, 592, 608, 619, 814, 893], "addit": [22, 83, 94, 104, 112, 113, 186, 213, 236, 350, 523, 538, 592, 608, 619, 740, 893], "verbos": 22, "debug": [22, 553, 561, 578, 619], "log": [22, 57, 343, 478, 538, 733, 878, 893], "if_set": 23, "dict": [23, 29, 56, 58, 61, 80, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 100, 101, 103, 104, 106, 108, 114, 156, 171, 172, 178, 182, 183, 185, 198, 199, 236, 526, 589, 591, 619], "show": [23, 129, 142, 160, 170, 236, 558, 586, 595, 619], "variabl": [23, 87, 165, 200, 236, 582, 619, 872, 893], "chang": [23, 55, 64, 92, 93, 105, 208, 209, 236, 305, 306, 331, 401, 413, 414, 415, 416, 417, 419, 420, 421, 538, 688, 696, 720, 787, 819, 893], "restrict": [23, 461, 852], "dictionari": [23, 80, 82, 83, 84, 86, 92, 93, 97, 101, 103, 156, 171, 182, 183, 198, 199, 236, 689, 893], "those": [23, 406, 538, 792, 893], "_have_": 23, "been": [23, 406, 538, 792, 893], "set_stat": 23, "all_stat": 23, "file": [24, 25, 26, 27, 28, 29, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 133, 236, 561, 588, 596, 597, 611, 619, 627, 893], "binaryio": [24, 26, 91, 92, 95, 96, 97, 100, 101, 236], "bytesio": [24, 25, 26, 29, 91, 92, 93, 95, 96, 100, 236], "path": [24, 25, 26, 27, 28, 29, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 236, 425, 448, 538, 588, 596, 597, 611, 619, 814, 839, 893], "compress": [24, 26, 29, 236, 596, 597, 619], "avrocompress": [24, 236], "uncompress": [24, 26, 29, 96, 106, 236, 597, 619], "write": [24, 25, 26, 27, 29, 93, 236, 294, 295, 296, 538, 576, 595, 597, 611, 619, 678, 679, 680, 893], "apach": [24, 29, 91, 236], "avro": [24, 91, 236, 547], "should": [24, 25, 26, 27, 28, 29, 80, 82, 84, 86, 90, 94, 112, 113, 115, 118, 121, 122, 144, 156, 159, 183, 199, 218, 236, 243, 248, 265, 292, 305, 340, 368, 370, 412, 413, 414, 415, 416, 417, 419, 420, 421, 424, 433, 464, 512, 538, 557, 568, 573, 574, 578, 595, 596, 597, 611, 613, 619, 628, 647, 674, 688, 729, 798, 799, 800, 801, 802, 803, 805, 806, 807, 810, 824, 855, 893], "written": [24, 25, 26, 27, 28, 29, 236, 596, 597, 611, 619], "snappi": [24, 29, 236, 597, 619], "deflat": [24, 236], "import": [24, 25, 26, 29, 32, 65, 80, 84, 85, 103, 104, 105, 110, 111, 112, 113, 114, 115, 126, 142, 144, 157, 159, 186, 202, 208, 209, 236, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 502, 512, 568, 574, 578, 592, 619, 682, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 753, 756, 760, 761, 762, 798, 822, 868, 893], "pathlib": [24, 25, 26, 27, 28, 29, 91, 95, 96, 98, 99, 103, 106, 107, 236, 588, 596, 597, 611, 619], "foo": [24, 25, 26, 27, 28, 29, 87, 122, 125, 127, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 146, 147, 148, 149, 150, 151, 153, 158, 161, 162, 163, 164, 167, 170, 171, 172, 174, 176, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 212, 215, 216, 236, 244, 263, 267, 268, 271, 272, 294, 295, 296, 328, 359, 360, 402, 410, 426, 427, 439, 441, 443, 445, 447, 451, 457, 459, 461, 463, 465, 466, 472, 474, 485, 488, 490, 492, 495, 496, 505, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 523, 524, 525, 528, 529, 530, 538, 554, 557, 558, 559, 564, 571, 572, 573, 589, 591, 592, 599, 604, 605, 607, 609, 611, 619, 652, 678, 717, 832, 834, 836, 838, 852, 893], "bar": [24, 25, 26, 27, 28, 29, 87, 122, 125, 127, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 147, 149, 150, 151, 153, 158, 161, 162, 163, 164, 167, 170, 171, 172, 174, 176, 178, 179, 180, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 206, 207, 210, 211, 215, 216, 236, 244, 272, 360, 433, 443, 445, 459, 461, 485, 490, 492, 495, 496, 505, 510, 514, 515, 516, 517, 518, 519, 523, 524, 525, 528, 529, 530, 538, 554, 557, 558, 559, 564, 571, 572, 573, 589, 591, 592, 599, 604, 605, 607, 611, 619, 652, 824, 834, 836, 852, 893], "ham": [24, 25, 26, 29, 87, 125, 127, 128, 129, 130, 136, 137, 139, 146, 147, 149, 158, 162, 163, 164, 167, 170, 172, 176, 178, 180, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 200, 201, 202, 203, 206, 210, 211, 236, 492, 554, 557, 558, 559, 564, 573, 589, 591, 592, 599, 604, 609, 619], "d": [24, 25, 26, 29, 46, 63, 83, 105, 126, 142, 146, 147, 150, 158, 161, 195, 197, 208, 211, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 236, 315, 334, 362, 428, 441, 447, 460, 464, 491, 508, 538, 573, 599, 619, 700, 723, 832, 838, 851, 855], "e": [24, 25, 26, 29, 46, 81, 92, 93, 95, 96, 100, 106, 108, 126, 142, 147, 161, 195, 197, 208, 236, 343, 347, 362, 380, 425, 428, 433, 504, 538, 576, 589, 619, 733, 811, 814, 824, 875, 893], "dirpath": [24, 25, 26, 29, 103, 236], "new_fil": [24, 25, 26, 29, 236], "has_head": [25, 92, 93, 95, 103, 236], "sep": [25, 89, 92, 93, 103, 236, 494], "quot": [25, 92, 93, 103, 236], "batch_siz": [25, 92, 93, 107, 236], "1024": [25, 29, 92, 93, 107, 236, 597, 619], "datetime_format": [25, 236], "date_format": [25, 236, 334], "time_format": [25, 236], "float_precis": [25, 236], "null_valu": [25, 92, 93, 103, 236], "_io": [25, 91, 95, 96, 236], "comma": [25, 236], "csv": [25, 92, 93, 95, 103, 236, 547, 596, 597, 612, 619], "result": [25, 27, 28, 55, 80, 84, 86, 94, 102, 103, 105, 106, 108, 115, 133, 144, 155, 169, 189, 216, 236, 344, 345, 346, 350, 375, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 425, 427, 459, 460, 488, 497, 498, 499, 513, 527, 538, 550, 568, 578, 586, 594, 596, 597, 611, 619, 627, 735, 736, 737, 770, 796, 798, 799, 800, 801, 802, 803, 805, 806, 807, 814, 817, 850, 851, 875, 893], "instead": [25, 27, 28, 90, 100, 114, 118, 122, 144, 156, 169, 171, 182, 183, 186, 213, 236, 257, 259, 449, 451, 457, 463, 488, 538, 562, 567, 568, 592, 608, 611, 619, 637, 640, 812, 813, 840, 842, 848, 854, 893], "whether": [25, 60, 65, 84, 86, 115, 236, 388, 389, 578, 619], "header": [25, 29, 92, 93, 95, 103, 130, 174, 205, 236, 597, 619], "field": [25, 47, 76, 78, 83, 207, 236, 283, 460, 461, 469, 497, 498, 526, 605, 619, 665, 851, 852, 861, 863], "symbol": [25, 236], "byte": [25, 40, 92, 93, 95, 96, 97, 100, 101, 103, 131, 236, 286, 289, 290, 350, 449, 452, 538, 597, 619, 667, 670, 671, 734, 840, 843, 893], "process": [25, 236, 596, 597, 619], "per": [25, 113, 114, 142, 169, 170, 225, 227, 228, 236, 265, 268, 282, 647, 650, 664], "thread": [25, 89, 92, 93, 102, 116, 236, 265, 647], "specifi": [25, 55, 65, 67, 76, 78, 80, 114, 131, 135, 182, 186, 213, 236, 344, 345, 346, 352, 409, 450, 456, 523, 538, 563, 592, 608, 619, 734, 735, 736, 737, 742, 841, 847, 893], "defin": [25, 32, 65, 112, 113, 114, 122, 144, 145, 169, 173, 218, 236, 248, 282, 362, 413, 414, 415, 416, 417, 419, 420, 421, 487, 512, 526, 538, 568, 569, 585, 613, 619, 628, 664, 893], "chrono": [25, 236, 334, 464, 723, 855], "rust": [25, 29, 73, 96, 100, 122, 218, 236, 248, 538, 613], "crate": [25, 236], "fraction": [25, 110, 111, 184, 236, 332, 401, 423, 464, 538, 721, 787, 809, 893], "second": [25, 65, 144, 145, 159, 209, 236, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 464, 489, 501, 502, 538, 568, 569, 574, 619, 717, 720, 725], "precis": [25, 156, 183, 199, 236, 310, 464, 695], "infer": [25, 80, 82, 83, 84, 85, 86, 92, 93, 95, 103, 107, 112, 122, 236, 410, 464, 538, 796, 893], "maximum": [25, 92, 93, 103, 113, 114, 115, 162, 236, 260, 294, 295, 385, 397, 406, 514, 538, 579, 619, 642, 678, 679, 704, 775, 783, 788, 792, 893], "timeunit": [25, 32, 33, 65, 236, 310, 312, 335, 340, 695, 697, 724, 729], "frame": [25, 55, 83, 95, 110, 114, 122, 156, 157, 166, 169, 173, 182, 183, 202, 208, 236, 583, 585, 619], "datetim": [25, 40, 65, 126, 142, 144, 145, 157, 159, 209, 236, 263, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 350, 362, 413, 414, 415, 416, 417, 419, 420, 421, 464, 477, 491, 502, 508, 512, 517, 538, 568, 569, 574, 619, 645, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 753, 775, 778, 783, 784, 813, 855, 877, 893], "decim": [25, 40, 236, 350, 422, 538, 808, 893], "place": [25, 128, 149, 150, 179, 188, 189, 192, 211, 236, 257, 259, 270, 277, 426, 427, 538, 593, 594, 599, 619, 637, 640, 652, 659, 793, 795, 816, 817, 826, 893], "float64": [25, 83, 90, 114, 118, 130, 131, 138, 185, 213, 236, 249, 250, 251, 252, 253, 254, 291, 297, 298, 332, 347, 368, 370, 431, 432, 475, 476, 491, 492, 504, 538, 559, 591, 608, 619, 721], "datatyp": [25, 27, 40, 47, 53, 80, 82, 83, 84, 86, 88, 90, 95, 97, 101, 115, 118, 130, 138, 185, 186, 236, 266, 291, 428, 445, 464, 477, 487, 488, 492, 504, 512, 513, 526, 538, 547, 591, 592, 611, 619, 628, 648, 672, 689, 753, 765, 768, 818, 836, 855, 877, 893], "repres": [25, 41, 53, 65, 80, 82, 84, 85, 86, 236, 368, 370, 492, 512, 538, 813, 828, 882, 893], "null": [25, 55, 63, 83, 92, 93, 103, 105, 121, 126, 129, 135, 138, 139, 151, 158, 163, 164, 170, 176, 188, 189, 192, 193, 194, 198, 207, 210, 213, 236, 244, 247, 248, 257, 259, 264, 267, 268, 271, 277, 282, 283, 285, 287, 294, 295, 296, 299, 301, 304, 306, 308, 309, 314, 317, 320, 322, 324, 327, 333, 344, 345, 346, 347, 350, 351, 352, 353, 357, 361, 368, 369, 370, 371, 372, 377, 399, 401, 407, 412, 413, 414, 415, 416, 417, 419, 420, 421, 426, 427, 428, 430, 435, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 456, 458, 460, 461, 462, 467, 477, 484, 485, 491, 493, 494, 504, 512, 526, 538, 558, 563, 572, 573, 593, 594, 599, 605, 608, 609, 611, 619, 628, 637, 640, 646, 659, 664, 665, 668, 678, 690, 693, 699, 702, 708, 710, 713, 716, 722, 735, 736, 737, 740, 742, 747, 763, 764, 786, 787, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 816, 817, 821, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 847, 849, 851, 852, 853, 875, 877, 883, 893], "empti": [25, 71, 83, 92, 93, 95, 103, 123, 124, 153, 165, 236, 523, 551, 552, 582, 619, 677, 681, 755, 893], "ipccompress": [26, 236], "arrow": [26, 66, 80, 96, 106, 197, 236, 596, 619, 871, 875, 893], "ipc": [26, 96, 97, 105, 106, 236, 547], "binari": [26, 236, 286, 288, 289, 290, 667, 669, 670, 671], "stream": [26, 62, 236, 553, 555, 561, 578, 586, 595, 596, 597, 619], "feather": [26, 96, 106, 236, 547], "lz4": [26, 29, 236, 596, 597, 619], "zstd": [26, 29, 236, 596, 597, 619], "pretti": [27, 236], "row_ori": [27, 236], "io": [27, 28, 98, 99, 236, 588, 611, 619, 900], "iobas": [27, 28, 98, 99, 236, 588, 611, 619], "serial": [27, 28, 236], "represent": [27, 28, 236, 292, 313, 316, 318, 319, 321, 323, 325, 326, 329, 330, 332, 338, 339, 342, 477, 538, 555, 556, 576, 619, 674, 698, 701, 703, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 731, 877, 893], "orient": [27, 56, 58, 84, 86, 236], "slower": [27, 84, 86, 122, 171, 209, 218, 236, 248, 538, 613], "common": [27, 236], "write_ndjson": [27, 236], "newlin": [28, 99, 107, 236], "delimit": [28, 92, 93, 99, 103, 107, 236, 439, 830], "parquetcompress": [29, 236], "compression_level": [29, 236, 597, 619], "statist": [29, 92, 93, 126, 236, 345, 346, 375, 413, 414, 415, 416, 417, 418, 419, 420, 421, 433, 538, 597, 619, 689, 736, 737, 770, 804, 824, 893], "row_group_s": [29, 236, 597, 619], "use_pyarrow": [29, 92, 96, 100, 236, 597, 619, 874, 875, 893], "pyarrow_opt": [29, 94, 100, 104, 236], "object": [29, 65, 81, 82, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 113, 114, 115, 121, 160, 202, 236, 512, 547, 552, 567, 571, 576, 588, 619, 641, 673, 694, 829, 871, 893], "parquet": [29, 100, 101, 108, 236, 547, 597, 619], "gzip": [29, 236, 597, 619], "lzo": [29, 236, 597, 619], "brotli": [29, 236, 597, 619], "choos": [29, 236, 596, 597, 619], "good": [29, 156, 236, 596, 597, 619], "perform": [29, 71, 81, 92, 93, 96, 100, 103, 106, 107, 108, 121, 122, 144, 145, 159, 177, 218, 236, 248, 538, 568, 569, 574, 596, 597, 610, 613, 619], "fast": [29, 236, 350, 425, 538, 596, 597, 619, 740, 814, 893], "decompress": [29, 236, 596, 597, 619], "backward": [29, 135, 159, 236, 285, 352, 538, 563, 574, 597, 619, 742, 893], "guarante": [29, 81, 92, 93, 236, 561, 597, 619], "deal": [29, 236, 406, 464, 538, 597, 619, 792, 855, 893], "older": [29, 236, 597, 619], "reader": [29, 89, 92, 93, 96, 100, 236, 548, 597, 619], "level": [29, 103, 106, 107, 108, 114, 122, 138, 169, 236, 353, 538, 570, 577, 597, 619], "higher": [29, 176, 228, 236, 405, 417, 520, 538, 587, 597, 619, 791, 803, 893], "mean": [29, 87, 92, 93, 100, 103, 126, 135, 174, 200, 236, 349, 352, 414, 433, 446, 490, 538, 563, 578, 597, 619, 689, 739, 742, 747, 800, 824, 837, 893], "smaller": [29, 131, 236, 561, 597, 619, 734, 893], "disk": [29, 236, 595, 596, 597, 619], "min": [29, 114, 115, 126, 135, 144, 145, 174, 236, 294, 296, 302, 352, 406, 416, 523, 538, 563, 568, 569, 597, 619, 678, 680, 685, 689, 742, 792, 802, 893], "11": [29, 143, 145, 236, 308, 309, 318, 328, 331, 336, 361, 401, 420, 434, 467, 492, 527, 538, 553, 567, 569, 570, 577, 586, 597, 602, 619, 628, 717, 720, 725, 798, 893], "22": [29, 236, 331, 336, 340, 464, 492, 597, 619, 720, 725, 729, 855], "extra": [29, 92, 94, 95, 96, 100, 104, 106, 108, 133, 171, 236, 597, 619, 627, 893], "comput": [29, 62, 63, 68, 131, 159, 206, 228, 236, 242, 249, 250, 251, 252, 253, 254, 273, 274, 275, 297, 298, 300, 301, 302, 303, 304, 307, 343, 348, 375, 380, 381, 395, 401, 404, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 430, 431, 432, 433, 437, 475, 476, 496, 503, 519, 524, 538, 571, 573, 574, 597, 604, 609, 619, 623, 629, 630, 631, 632, 633, 634, 655, 656, 657, 682, 683, 684, 685, 686, 687, 691, 733, 734, 738, 770, 773, 774, 779, 787, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 821, 822, 823, 824, 827, 868, 869, 893], "size": [29, 92, 93, 113, 114, 115, 116, 131, 144, 208, 236, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 488, 538, 568, 597, 619, 734, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 893], "group": [29, 93, 143, 144, 145, 157, 169, 171, 174, 208, 209, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 243, 248, 265, 355, 400, 435, 436, 446, 473, 487, 538, 567, 568, 569, 597, 612, 613, 614, 615, 619, 647, 837], "chunk": [29, 89, 92, 93, 103, 106, 107, 108, 114, 115, 133, 157, 168, 236, 247, 407, 538, 597, 619, 627, 676, 746, 780, 793, 871, 893], "reduc": [29, 92, 93, 100, 103, 106, 107, 108, 223, 224, 226, 229, 236, 428, 506, 538, 597, 619, 776, 790, 818, 864, 893], "memori": [29, 63, 80, 81, 84, 85, 86, 92, 93, 96, 100, 103, 106, 107, 108, 121, 122, 133, 190, 218, 236, 248, 407, 428, 538, 597, 613, 619, 627, 793, 818, 819, 893], "pressur": [29, 100, 107, 108, 236, 428, 538, 597, 619, 818, 893], "improv": [29, 96, 106, 236, 597, 619], "speed": [29, 236, 597, 619], "minimum": [29, 113, 114, 115, 138, 167, 236, 294, 296, 344, 345, 346, 394, 398, 406, 517, 538, 584, 597, 619, 678, 680, 711, 735, 736, 737, 784, 789, 792, 893], "implement": [29, 81, 104, 121, 122, 218, 236, 248, 538, 613, 812, 813, 893], "v": [29, 64, 131, 236, 424, 538, 810, 893], "At": [29, 236], "moment": [29, 172, 236, 375, 433, 538, 770, 824, 893], "argument": [29, 92, 94, 100, 104, 144, 145, 163, 172, 173, 174, 186, 194, 202, 209, 213, 236, 331, 336, 362, 413, 414, 415, 416, 417, 419, 420, 421, 451, 457, 463, 523, 538, 568, 569, 585, 592, 608, 619, 720, 725, 842, 848, 854, 893], "pass": [29, 55, 65, 82, 95, 104, 113, 114, 115, 172, 173, 186, 213, 236, 248, 311, 315, 350, 360, 451, 457, 463, 508, 538, 571, 578, 585, 592, 595, 608, 619, 628, 696, 700, 740, 842, 848, 854, 893], "pyarrow": [29, 80, 85, 92, 94, 96, 100, 104, 105, 109, 157, 197, 201, 202, 236, 548, 871, 874, 875, 893], "write_t": [29, 236], "base": [30, 129, 136, 144, 145, 236, 343, 380, 381, 453, 514, 517, 538, 547, 558, 564, 568, 569, 619, 733, 773, 774, 844, 884, 893], "calendar": [31, 32, 144, 145, 159, 209, 236, 318, 328, 331, 336, 342, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 703, 717, 720, 725, 731], "date": [32, 40, 55, 65, 92, 93, 102, 103, 105, 126, 142, 144, 145, 157, 159, 202, 236, 263, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 350, 362, 413, 414, 415, 416, 417, 419, 420, 421, 464, 477, 491, 508, 517, 538, 547, 568, 569, 574, 619, 645, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 753, 775, 778, 783, 784, 813, 855, 877, 893], "time": [32, 33, 40, 61, 62, 65, 103, 133, 144, 145, 159, 209, 236, 262, 263, 283, 310, 311, 312, 315, 328, 335, 337, 340, 341, 350, 362, 464, 477, 478, 493, 494, 500, 501, 502, 508, 522, 538, 547, 553, 568, 569, 574, 586, 619, 627, 644, 695, 696, 697, 700, 717, 724, 726, 729, 730, 855, 877, 878, 893], "time_unit": [32, 33, 65, 340, 729], "u": [32, 33, 65, 156, 183, 199, 236, 310, 312, 315, 335, 340, 464, 508, 522, 695, 697, 700, 724, 729], "time_zon": [32, 65, 311, 341, 696, 730], "m": [32, 33, 65, 171, 236, 310, 312, 315, 334, 335, 340, 464, 502, 508, 695, 697, 700, 723, 724, 729, 855], "unit": [32, 33, 65, 114, 115, 131, 236, 310, 312, 315, 335, 340, 382, 391, 481, 508, 538, 586, 619, 695, 697, 700, 724, 729, 734, 893], "timezon": [32, 65, 464, 855], "zoneinfo": 32, "run": [32, 62, 122, 160, 218, 236, 248, 265, 305, 522, 523, 538, 553, 561, 578, 586, 595, 596, 597, 613, 619, 647, 688, 893, 899], "available_timezon": 32, "attribut": [32, 33, 40, 112, 236, 531, 532, 534, 539, 542, 543, 544, 619, 885, 887, 889, 896, 897, 898], "delta": [33, 94, 104, 519, 524, 547, 828, 882, 893], "32": [34, 37, 50, 57, 109, 145, 155, 236, 428, 538, 569, 619, 691, 718, 787, 803, 893], "bit": [34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 408, 440, 538, 794, 831, 893], "sign": [36, 37, 38, 39, 328, 408, 467, 538, 717, 794, 858, 893], "integ": [36, 37, 38, 39, 49, 50, 51, 52, 113, 114, 144, 145, 236, 293, 332, 356, 408, 413, 414, 415, 416, 417, 418, 419, 420, 421, 453, 488, 508, 512, 538, 568, 569, 619, 635, 636, 675, 721, 745, 794, 804, 813, 844, 893], "inner": [40, 46, 158, 236, 270, 307, 538, 573, 611, 619, 652, 691, 893], "union": [40, 47, 55, 62, 63, 88, 127, 129, 132, 143, 162, 163, 165, 167, 169, 171, 178, 192, 194, 205, 207, 209, 216, 236, 350, 366, 485, 486, 487, 488, 489, 491, 492, 493, 494, 498, 499, 504, 508, 512, 513, 514, 517, 521, 526, 527, 538, 553, 560, 561, 567, 586, 595, 599, 612, 619, 691, 759, 813, 893], "datatypeclass": [40, 47, 88, 487, 488, 492, 504, 512, 513, 526], "timedelta": [40, 65, 144, 145, 209, 236, 313, 315, 316, 318, 323, 325, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 342, 350, 413, 414, 415, 416, 417, 419, 420, 421, 491, 538, 568, 569, 619, 704, 706, 711, 717, 720, 725, 775, 778, 783, 784, 893], "tupl": [40, 102, 122, 156, 182, 183, 187, 215, 236, 410, 538, 586, 595, 619, 796, 893], "nest": [40, 46, 131, 236, 547, 734, 893], "arrai": [40, 80, 84, 92, 93, 131, 197, 201, 236, 262, 272, 273, 274, 275, 276, 279, 280, 288, 294, 295, 296, 300, 301, 302, 303, 304, 381, 413, 414, 416, 419, 420, 421, 425, 441, 443, 446, 447, 448, 493, 503, 538, 644, 654, 655, 656, 657, 658, 661, 662, 669, 678, 679, 680, 684, 685, 686, 687, 691, 734, 774, 799, 800, 802, 805, 806, 807, 814, 819, 832, 834, 837, 838, 839, 871, 875, 883, 893], "within": [40, 110, 111, 159, 236, 574, 619], "wrap": [42, 104, 362, 538], "arbitrari": [42, 114], "python": [42, 65, 92, 93, 109, 122, 156, 183, 199, 218, 236, 248, 312, 383, 487, 538, 613, 628, 697, 704, 705, 706, 711, 874, 893], "queri": [43, 62, 96, 102, 103, 106, 107, 108, 133, 160, 173, 236, 283, 448, 553, 555, 556, 561, 570, 577, 586, 595, 610, 613, 619, 627, 839, 893, 899], "pars": [43, 92, 93, 95, 103, 106, 107, 186, 213, 236, 453, 464, 508, 592, 608, 619, 844, 855], "given": [43, 45, 55, 64, 65, 80, 82, 83, 84, 86, 90, 92, 93, 103, 112, 113, 114, 115, 118, 122, 131, 173, 182, 188, 189, 236, 263, 277, 335, 341, 343, 362, 380, 406, 409, 410, 413, 414, 416, 419, 420, 421, 424, 426, 427, 447, 464, 478, 485, 538, 578, 585, 593, 594, 613, 619, 628, 645, 659, 724, 730, 733, 734, 773, 785, 792, 796, 799, 800, 802, 805, 806, 807, 810, 816, 817, 838, 855, 878, 884, 893], "transform": [43, 122, 236, 383, 465, 466, 538], "lf": [45, 559, 564, 591, 607, 619], "under": [45, 56, 57, 58, 59, 531, 532, 534, 539, 542, 543, 544, 885, 887, 889, 896, 897, 898], "add": [45, 93, 122, 133, 144, 213, 214, 236, 403, 470, 502, 530, 538, 568, 573, 608, 609, 610, 619, 627, 893], "context": [46, 169, 236, 243, 248, 265, 353, 390, 435, 436, 482, 487, 495, 505, 508, 523, 537, 538, 547, 609, 619, 647], "manag": [46, 547], "categor": [46, 87, 117, 158, 236, 292, 477, 538, 673, 674, 877, 893], "temporarili": [46, 144, 145, 236, 568, 569, 619], "cach": [46, 62, 96, 103, 106, 108, 117, 413, 414, 415, 416, 417, 419, 420, 421, 464, 538, 553, 561, 586, 595, 619, 855], "categori": [46, 64, 117, 292, 674], "until": [46, 160, 236], "finish": [46, 68, 133, 236, 627, 893], "global": [46, 114, 117], "invalid": [46, 92, 93, 103, 448, 839], "outermost": 46, "exit": [46, 119], "df1": [46, 55, 63, 110, 133, 139, 211, 236], "color": [46, 218, 613], "red": [46, 218, 613], "green": [46, 218, 613], "blue": 46, "orang": [46, 125, 219, 220, 222, 223, 224, 226, 228, 229, 236], "uint8": [46, 112, 303, 304, 471, 538, 686, 687, 864, 893], "df2": [46, 55, 63, 110, 133, 139, 211, 236], "yellow": 46, "black": [46, 122, 236], "join": [46, 55, 62, 159, 236, 361, 400, 538, 553, 561, 574, 586, 595, 609, 619], "succe": [46, 92, 93, 103], "df_join": 46, "cat": [46, 64, 440, 465, 466, 477, 494, 534, 538, 831, 889], "u8": [46, 87, 200, 236, 872, 893], "sequenc": [47, 55, 62, 63, 80, 82, 83, 84, 86, 89, 113, 114, 115, 127, 129, 132, 133, 143, 144, 145, 158, 159, 165, 169, 171, 173, 174, 192, 200, 205, 206, 207, 208, 209, 216, 236, 347, 366, 383, 485, 486, 487, 489, 491, 492, 493, 494, 497, 498, 499, 504, 506, 508, 513, 514, 517, 521, 526, 527, 538, 560, 567, 568, 569, 573, 574, 585, 599, 604, 612, 619, 627, 691, 759, 813, 893], "map": [47, 82, 83, 92, 93, 96, 97, 100, 101, 103, 106, 122, 130, 156, 178, 182, 183, 198, 236, 331, 336, 384, 482, 487, 526, 538, 559, 589, 619, 720, 725], "composit": 47, "make": [47, 63, 80, 85, 92, 93, 96, 100, 102, 106, 108, 143, 144, 145, 166, 169, 177, 209, 236, 337, 345, 346, 409, 460, 467, 538, 567, 568, 569, 583, 619, 726, 736, 737, 851, 858, 893], "up": [47, 102, 156, 159, 183, 199, 236, 293, 467, 538, 573, 574, 578, 619, 675, 858, 893], "dai": [48, 65, 144, 145, 157, 159, 209, 236, 315, 318, 325, 328, 329, 330, 331, 335, 336, 338, 339, 342, 413, 414, 415, 416, 417, 419, 420, 421, 500, 501, 502, 538, 568, 569, 574, 619, 717, 718, 720, 725, 728], "unsign": [49, 50, 51, 52, 408, 538, 794, 893], "could": [53, 68, 129, 144, 236, 291, 497, 506, 538, 558, 568, 619, 672, 893], "determin": [53, 55, 63, 83, 86, 92, 93, 95, 100, 108, 122, 138, 144, 145, 156, 157, 205, 209, 236, 283, 292, 390, 409, 413, 414, 415, 416, 417, 419, 420, 421, 433, 489, 538, 568, 569, 619, 665, 674, 824, 893], "static": [53, 613], "utf": 54, "intern": [55, 60, 65, 95, 156, 182, 198, 236, 355, 488, 499, 508, 514, 517, 522, 526, 527, 538, 641, 673, 694, 810, 829, 893], "revers": [55, 131, 192, 236, 257, 259, 279, 300, 301, 302, 303, 304, 384, 403, 406, 425, 435, 436, 470, 478, 489, 538, 599, 619, 637, 640, 661, 684, 685, 686, 687, 766, 792, 814, 826, 878, 893], "uniqu": [55, 112, 113, 115, 154, 169, 227, 236, 258, 365, 373, 396, 464, 480, 482, 518, 538, 619, 639, 689, 757, 767, 781, 855, 880, 881, 893], "kei": [55, 61, 144, 159, 166, 171, 174, 178, 181, 236, 568, 574, 583, 589, 590, 619], "contain": [55, 61, 82, 85, 94, 104, 110, 157, 169, 174, 236, 248, 366, 441, 444, 446, 447, 448, 461, 462, 538, 586, 619, 780, 832, 835, 837, 838, 839, 852, 853, 871, 893], "have": [55, 81, 92, 93, 95, 114, 115, 117, 133, 156, 177, 183, 199, 236, 305, 344, 345, 346, 391, 406, 464, 538, 595, 610, 619, 627, 688, 696, 735, 736, 737, 747, 792, 855, 893], "inject": 55, "fill": [55, 63, 90, 118, 134, 135, 189, 208, 236, 285, 301, 304, 351, 352, 357, 361, 413, 414, 416, 419, 420, 421, 427, 450, 456, 467, 507, 538, 562, 563, 594, 609, 619, 741, 742, 785, 799, 800, 802, 805, 806, 807, 817, 841, 847, 858, 893], "each": [55, 93, 107, 110, 111, 113, 122, 142, 157, 159, 215, 218, 219, 221, 230, 236, 248, 269, 281, 331, 336, 406, 447, 460, 461, 487, 538, 574, 586, 613, 614, 615, 619, 651, 663, 676, 720, 725, 792, 838, 851, 852, 863, 893], "sort": [55, 56, 110, 143, 144, 145, 159, 166, 171, 173, 174, 209, 216, 221, 230, 236, 257, 259, 292, 353, 425, 436, 482, 484, 489, 538, 556, 568, 569, 574, 583, 585, 586, 595, 614, 615, 619, 637, 640, 674, 766, 814, 879, 881, 893], "origin": [55, 92, 93, 206, 236, 374, 408, 441, 446, 447, 448, 450, 456, 467, 538, 604, 619, 832, 837, 838, 839, 841, 847, 858], "order": [55, 83, 110, 143, 144, 145, 171, 173, 174, 184, 206, 209, 236, 257, 259, 292, 406, 423, 424, 425, 435, 436, 469, 479, 480, 489, 538, 567, 568, 569, 596, 597, 599, 604, 619, 637, 640, 674, 766, 792, 797, 809, 810, 814, 861, 879, 880, 893], "unless": [55, 82, 236, 883, 893], "case": [55, 80, 82, 83, 84, 86, 108, 122, 133, 144, 145, 156, 236, 383, 390, 391, 530, 538, 568, 569, 619, 627, 893], "final": [55, 108, 561, 619], "doe": [55, 74, 80, 82, 83, 84, 86, 92, 93, 94, 95, 103, 104, 105, 110, 111, 133, 157, 182, 183, 213, 236, 337, 340, 469, 480, 505, 538, 561, 567, 578, 608, 619, 627, 726, 729, 747, 819, 883, 893], "receiv": [55, 122, 173, 236, 585, 619], "now": [55, 145, 236, 569, 619], "ha": [55, 104, 121, 209, 236, 248, 305, 374, 391, 478, 487, 538, 551, 613, 619, 677, 688, 747, 758, 878, 893], "whose": [55, 159, 174, 236, 347, 504, 538, 574, 619], "post": 55, "constrain": 55, "newli": 55, "descend": [55, 192, 236, 257, 259, 425, 538, 599, 619, 637, 640, 766, 814, 893], "singl": [55, 63, 92, 93, 102, 103, 113, 129, 133, 140, 182, 192, 216, 236, 282, 328, 353, 383, 407, 410, 439, 484, 487, 492, 513, 522, 538, 558, 599, 612, 619, 627, 664, 717, 793, 796, 830, 871, 893], "boolean": [55, 60, 136, 138, 236, 245, 246, 263, 286, 353, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 484, 538, 564, 619, 625, 626, 638, 645, 667, 743, 752, 754, 756, 757, 759, 760, 761, 762, 763, 764, 767, 788, 789, 812, 831, 884, 893], "associ": 55, "2022": [55, 65, 109, 126, 142, 236, 312, 464, 502, 508, 697, 703, 855], "x": [55, 92, 93, 102, 103, 113, 114, 131, 149, 152, 154, 158, 165, 236, 248, 262, 270, 358, 383, 409, 430, 433, 460, 477, 499, 527, 538, 573, 578, 582, 598, 619, 624, 628, 742, 768, 821, 824, 851, 877, 893], "y": [55, 113, 114, 131, 152, 154, 158, 165, 236, 262, 270, 334, 409, 464, 499, 527, 538, 573, 582, 598, 619, 624, 723, 855, 893], "12": [55, 64, 65, 144, 145, 159, 209, 236, 303, 312, 316, 318, 325, 330, 331, 336, 342, 401, 428, 500, 501, 538, 568, 569, 570, 574, 577, 595, 602, 619, 628, 697, 714, 720, 725, 808, 893], "df3": [55, 236], "set_tbl_format": 55, "09": [55, 145, 236, 312, 318, 569, 619, 698], "01": [55, 65, 126, 142, 144, 145, 209, 236, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 464, 502, 568, 569, 619, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 855], "02": [55, 65, 142, 144, 145, 209, 236, 310, 312, 315, 316, 317, 323, 324, 325, 332, 333, 335, 338, 340, 422, 502, 538, 568, 569, 619, 695, 697, 700, 701, 702, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729], "03": [55, 65, 144, 145, 209, 236, 310, 311, 312, 314, 315, 317, 324, 325, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 568, 569, 619, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 711, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730], "af1": 55, "af2": 55, "af3": 55, "keep": [55, 92, 93, 103, 171, 206, 209, 236, 374, 491, 538, 604, 619], "easili": [55, 186, 213, 236, 592, 608, 619], "calcul": [55, 144, 236, 264, 306, 344, 345, 346, 375, 382, 418, 433, 481, 538, 568, 619, 646, 690, 735, 736, 737, 770, 804, 824, 828, 882, 893], "wise": [55, 138, 236, 249, 250, 251, 252, 253, 254, 297, 298, 348, 381, 430, 431, 432, 475, 476, 497, 498, 506, 521, 538, 629, 630, 631, 632, 633, 634, 682, 683, 738, 774, 821, 822, 823, 868, 869, 893], "dot": [55, 538, 595, 619, 893], "product": [55, 172, 236, 303, 307, 538, 686, 691, 893], "fill_nul": [55, 134, 236, 464, 538, 562, 609, 619, 855, 893], "sum": [55, 131, 138, 143, 145, 155, 174, 216, 236, 248, 283, 303, 304, 343, 353, 400, 413, 414, 416, 419, 420, 421, 484, 485, 497, 499, 506, 514, 517, 538, 553, 556, 561, 567, 569, 586, 595, 619, 686, 687, 733, 734, 799, 800, 802, 805, 806, 807, 893], "167": 55, "47": 55, "callabl": [56, 57, 58, 59, 103, 122, 138, 173, 218, 236, 248, 283, 383, 384, 412, 487, 497, 498, 506, 513, 521, 538, 578, 585, 613, 619, 628, 665, 798, 893], "decor": [56, 57, 58, 59, 114, 115], "access": [56, 57, 58, 59, 156, 182, 183, 236, 609, 619], "by_first_letter_of_column_nam": 56, "f": [56, 93, 104, 122, 126, 142, 157, 161, 197, 205, 208, 218, 236, 248, 283, 383, 384, 428, 445, 464, 487, 493, 497, 498, 506, 513, 521, 538, 578, 613, 619, 665, 836, 855], "fromkei": [56, 58], "by_first_letter_of_column_valu": 56, "starts_with": [56, 440, 444, 835], "slice": [56, 62, 131, 147, 157, 195, 236, 269, 281, 412, 413, 414, 415, 416, 417, 419, 420, 421, 538, 553, 561, 578, 586, 595, 596, 597, 619, 651, 663, 734, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "to_seri": [56, 60, 236, 283, 665], "xx": [56, 58], "xy": [56, 58], "yy": [56, 58], "yz": [56, 58], "schema": [56, 57, 58, 63, 75, 76, 78, 80, 82, 83, 84, 86, 92, 93, 97, 101, 103, 107, 113, 114, 122, 123, 124, 130, 131, 166, 169, 236, 283, 390, 491, 526, 551, 552, 559, 578, 583, 611, 613, 619, 681, 893], "a1": [56, 58], "a2": [56, 58], "b1": [56, 58], "b2": [56, 58], "pow_n": 57, "powersofn": 57, "next": [57, 285, 406, 538, 792, 893], "p": [57, 173, 236, 585, 619], "ceil": [57, 538, 893], "previou": [57, 119, 401, 538, 787, 893], "floor": [57, 538, 893], "nearest": [57, 159, 176, 228, 236, 293, 356, 405, 417, 520, 538, 574, 587, 619, 675, 745, 751, 791, 803, 893], "24": [57, 122, 131, 145, 236, 303, 305, 317, 538, 569, 619, 688, 702, 893], "55": 57, "001": [57, 319, 320, 322, 327, 502, 708, 710, 716], "next_pow2": 57, "prev_pow2": 57, "nearest_pow2": 57, "128": [57, 787, 893], "split_by_column_dtyp": 58, "dtype": [58, 80, 82, 84, 86, 90, 92, 93, 103, 112, 113, 114, 115, 118, 121, 144, 145, 159, 202, 236, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 262, 270, 282, 291, 294, 295, 296, 297, 298, 303, 304, 314, 317, 320, 322, 324, 327, 333, 340, 347, 349, 382, 383, 408, 409, 413, 414, 415, 416, 417, 419, 420, 421, 428, 431, 432, 439, 458, 471, 473, 475, 476, 477, 481, 482, 487, 488, 492, 493, 495, 504, 508, 512, 513, 526, 538, 568, 569, 574, 619, 642, 643, 644, 652, 664, 672, 677, 678, 679, 680, 686, 687, 690, 699, 702, 708, 710, 713, 716, 722, 729, 734, 739, 755, 797, 811, 818, 830, 849, 855, 864, 875, 876, 877, 893], "collect": [58, 62, 104, 105, 160, 197, 236, 248, 400, 488, 493, 508, 522, 526, 538, 557, 558, 560, 561, 562, 563, 564, 565, 567, 568, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 587, 589, 590, 592, 593, 594, 598, 599, 600, 601, 602, 603, 604, 606, 608, 609, 610, 613, 619], "31": [59, 109, 312, 313, 314, 325, 338, 464, 500, 501, 508, 697, 698, 699, 855], "42": [59, 145, 146, 236, 569, 619, 748, 893], "961": 59, "1764": 59, "4160": 59, "condit": [60, 129, 136, 182, 236, 444, 462, 558, 564, 619], "eager": [60, 144, 208, 236, 488, 508, 512, 522, 526, 537, 547, 568, 619], "indic": [60, 87, 91, 92, 93, 96, 100, 103, 112, 113, 115, 144, 145, 236, 282, 364, 367, 368, 370, 371, 372, 413, 414, 415, 416, 417, 419, 420, 421, 424, 430, 473, 538, 568, 569, 619, 664, 756, 760, 761, 762, 763, 764, 810, 821, 866, 893], "where": [60, 102, 129, 133, 156, 165, 183, 236, 339, 343, 424, 433, 524, 530, 538, 558, 582, 619, 627, 638, 728, 733, 810, 824, 828, 882, 884, 893], "evalu": [60, 134, 136, 159, 236, 305, 360, 362, 366, 486, 488, 503, 526, 538, 564, 571, 573, 574, 619, 638, 688, 884, 893], "eagerli": [60, 522], "oppos": 60, "lazili": [60, 92, 93, 103, 104, 106, 107, 108], "u32": [60, 144, 170, 214, 219, 227, 229, 236, 243, 255, 256, 257, 258, 259, 260, 261, 272, 299, 300, 313, 316, 319, 323, 325, 329, 330, 332, 338, 339, 377, 396, 399, 406, 424, 441, 449, 452, 477, 480, 495, 518, 538, 568, 610, 619, 637, 638, 639, 654, 672, 698, 701, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 792, 832, 840, 843, 877, 880, 881, 893], "build": [61, 81], "wa": 61, "compil": [61, 260, 261, 642, 643], "gate": 61, "info": [61, 94, 104, 109], "otherwis": [61, 166, 186, 236, 287, 294, 295, 296, 344, 345, 346, 408, 440, 442, 530, 538, 583, 592, 619, 628, 668, 678, 679, 680, 735, 736, 737, 794, 812, 813, 831, 833, 893], "version": [61, 94, 104, 109, 337, 349, 521, 538, 726, 739, 893], "follow": [61, 92, 93, 94, 103, 104, 122, 144, 145, 159, 173, 209, 236, 248, 328, 331, 336, 406, 413, 414, 415, 416, 417, 419, 420, 421, 487, 531, 532, 534, 538, 539, 542, 543, 544, 567, 568, 569, 574, 585, 619, 717, 720, 725, 792, 812, 813, 885, 887, 889, 893, 896, 897, 898, 900], "depend": [61, 109, 248, 260, 261, 390, 406, 487, 505, 508, 538, 642, 643, 792, 893], "host": [61, 92, 96, 100, 106, 108], "git": 61, "lazy_fram": 62, "type_coercion": [62, 553, 555, 561, 586, 595, 596, 597, 619], "predicate_pushdown": [62, 553, 555, 561, 578, 586, 595, 596, 597, 619], "projection_pushdown": [62, 553, 555, 561, 578, 586, 595, 596, 597, 619], "simplify_express": [62, 553, 555, 561, 586, 595, 596, 597, 619], "no_optim": [62, 553, 561, 578, 586, 596, 597, 619], "slice_pushdown": [62, 553, 555, 561, 578, 586, 595, 596, 597, 619], "common_subplan_elimin": [62, 553, 555, 561, 586, 595, 619], "multipl": [62, 63, 92, 93, 103, 106, 108, 113, 115, 131, 133, 136, 144, 149, 157, 171, 174, 186, 192, 213, 216, 236, 282, 347, 388, 391, 395, 410, 413, 414, 415, 416, 417, 419, 420, 421, 436, 489, 497, 498, 504, 506, 513, 521, 530, 538, 557, 564, 568, 592, 599, 608, 612, 619, 627, 664, 734, 779, 796, 893], "graph": [62, 160, 236, 571, 609, 619], "parallel": [62, 63, 89, 100, 102, 108, 144, 159, 160, 173, 236, 265, 305, 538, 547, 568, 573, 574, 619, 647, 688, 893], "threadpool": 62, "coercion": [62, 409, 538, 553, 561, 586, 595, 596, 597, 619], "optim": [62, 100, 103, 106, 107, 108, 156, 160, 173, 177, 183, 236, 553, 555, 556, 561, 578, 586, 595, 596, 597, 610, 619], "predic": [62, 103, 105, 106, 107, 108, 136, 182, 236, 353, 484, 530, 538, 553, 561, 564, 578, 586, 589, 595, 596, 597, 610, 619, 743, 812, 813, 893], "pushdown": [62, 553, 561, 578, 586, 589, 595, 596, 597, 610, 619, 812, 813, 893], "project": [62, 103, 104, 106, 107, 108, 248, 435, 436, 538, 553, 561, 578, 586, 589, 595, 596, 597, 611, 619], "simplifi": [62, 553, 561, 586, 595, 596, 597, 619], "turn": [62, 92, 93, 103, 117, 482, 538, 553, 561, 578, 586, 596, 597, 619], "off": [62, 92, 93, 103, 117, 482, 538, 553, 561, 578, 586, 596, 597, 619], "Will": [62, 205, 236, 514, 517, 553, 561, 586, 595, 619, 893], "try": [62, 75, 77, 92, 93, 95, 96, 100, 103, 106, 108, 464, 553, 561, 586, 595, 619, 855], "branch": [62, 553, 561, 586, 595, 619], "subplan": [62, 553, 561, 586, 595, 619], "occur": [62, 395, 406, 538, 553, 561, 586, 595, 619, 779, 792, 893], "part": [62, 80, 460, 461, 553, 561, 586, 595, 609, 619, 698, 701, 707, 709, 712, 714, 715, 721, 731, 851, 852], "fashion": [62, 158, 236, 553, 561, 586, 595, 619], "alpha": [62, 344, 345, 346, 538, 553, 561, 586, 595, 619, 735, 736, 737, 893], "item": [63, 93, 184, 236, 263, 268, 270, 349, 423, 461, 538, 645, 650, 652, 739, 809, 852, 893], "rechunk": [63, 80, 85, 92, 93, 96, 100, 103, 106, 107, 108, 133, 236, 538, 627, 676, 780, 893], "concatmethod": 63, "vertic": [63, 133, 208, 211, 236, 439, 514, 830], "aggreg": [63, 92, 93, 138, 143, 144, 162, 163, 164, 167, 169, 174, 175, 176, 193, 194, 208, 210, 216, 217, 220, 222, 236, 243, 353, 379, 383, 400, 412, 413, 414, 415, 416, 417, 419, 420, 421, 482, 497, 498, 499, 506, 511, 514, 517, 521, 527, 538, 568, 578, 579, 580, 581, 584, 587, 600, 601, 606, 612, 619, 798, 799, 800, 802, 805, 806, 807, 893], "concaten": [63, 138, 173, 236, 585, 619, 676, 780, 893], "sure": [63, 80, 85, 92, 93, 96, 102, 143, 177, 236, 488, 567, 619], "contigu": [63, 80, 85, 92, 93, 96, 103, 106, 107, 108, 177, 236], "diagon": [63, 205, 236], "strategi": [63, 92, 112, 113, 114, 115, 135, 144, 158, 159, 168, 236, 283, 352, 538, 563, 568, 573, 574, 619, 665, 742, 893], "vstack": [63, 133, 236], "find": [63, 137, 236, 424, 489, 538, 810, 893], "miss": [63, 80, 92, 93, 103, 134, 236, 285, 357, 361, 368, 370, 524, 538, 562, 619, 883, 893], "stack": [63, 149, 211, 236], "length": [63, 64, 90, 113, 118, 144, 145, 191, 236, 278, 305, 331, 336, 391, 412, 413, 414, 415, 416, 417, 419, 420, 421, 434, 450, 452, 456, 458, 467, 488, 538, 568, 569, 586, 598, 619, 660, 665, 676, 688, 697, 720, 725, 771, 785, 798, 799, 800, 801, 802, 803, 805, 806, 807, 825, 841, 843, 847, 849, 858, 893], "don": [63, 208, 236, 248, 265, 305, 487, 538, 647, 688, 811, 883, 893], "t": [63, 95, 103, 122, 173, 208, 236, 248, 265, 305, 343, 344, 345, 346, 451, 457, 463, 464, 487, 530, 538, 585, 619, 647, 688, 733, 735, 736, 737, 811, 842, 848, 854, 855, 883, 893], "match": [63, 74, 80, 82, 83, 84, 86, 110, 111, 135, 159, 182, 236, 389, 440, 441, 444, 447, 448, 451, 454, 455, 457, 462, 463, 464, 563, 574, 619, 831, 832, 835, 838, 839, 842, 845, 846, 848, 853, 854, 855], "relev": 63, "execut": [63, 160, 236, 265, 550, 578, 586, 619, 647], "df_h1": 63, "l1": 63, "l2": 63, "df_h2": 63, "r1": 63, "r2": 63, "r3": 63, "df_d1": 63, "df_d2": 63, "bin": [64, 453, 532, 844, 887], "label": [64, 80, 412, 413, 414, 415, 416, 417, 419, 420, 421, 538, 586, 619, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "break_point_label": 64, "break_point": 64, "category_label": 64, "discret": [64, 264, 306, 343, 538, 646, 690, 733, 893], "creat": [64, 65, 80, 84, 86, 104, 113, 114, 115, 123, 124, 144, 145, 170, 174, 209, 213, 236, 312, 331, 336, 407, 458, 482, 488, 493, 500, 501, 502, 538, 551, 552, 555, 556, 568, 569, 608, 619, 677, 681, 693, 697, 720, 725, 785, 793, 849, 875, 893], "assign": [64, 113, 144, 236, 406, 460, 461, 538, 568, 619, 792, 851, 852, 893], "must": [64, 80, 81, 82, 94, 104, 144, 145, 159, 166, 182, 236, 283, 347, 383, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 578, 583, 619, 893], "len": [64, 113, 114, 157, 236, 300, 410, 450, 456, 467, 538, 796, 841, 847, 858, 893], "breakpoint": 64, "experiment": [64, 105, 186, 208, 213, 236, 305, 331, 413, 414, 415, 416, 417, 419, 420, 421, 538, 592, 608, 619, 688, 720, 893], "being": [64, 92, 93, 103, 105, 208, 236, 305, 331, 413, 414, 415, 416, 417, 419, 420, 421, 503, 530, 538, 688, 720, 893], "consid": [64, 92, 93, 103, 105, 129, 139, 165, 206, 208, 216, 236, 294, 295, 296, 305, 331, 413, 414, 415, 416, 417, 419, 420, 421, 435, 497, 506, 538, 558, 570, 577, 582, 604, 619, 678, 679, 680, 688, 720, 811, 812, 813, 893], "break": [64, 105, 208, 236, 305, 331, 413, 414, 415, 416, 417, 419, 420, 421, 538, 688, 720, 893], "30": [64, 133, 144, 149, 173, 179, 180, 198, 213, 236, 255, 256, 257, 259, 306, 312, 314, 318, 330, 331, 336, 342, 358, 428, 538, 568, 585, 608, 619, 690, 697, 699, 720, 725, 893], "inf": [64, 114, 115, 254, 364, 367, 538, 634, 756, 760, 787, 893], "low": [65, 144, 236, 332, 488, 568, 619], "high": [65, 144, 236, 332, 488, 568, 619], "interv": [65, 144, 145, 209, 236, 331, 332, 336, 362, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 619, 698, 700, 701, 707, 709, 712, 714, 715, 718, 719, 720, 721, 723, 724, 725, 727, 728, 731], "close": [65, 144, 145, 236, 362, 413, 414, 415, 416, 417, 419, 420, 421, 433, 538, 568, 569, 619, 824, 893], "closedinterv": [65, 144, 145, 236, 362, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 619], "lower": [65, 103, 144, 176, 228, 236, 362, 382, 405, 408, 417, 488, 520, 538, 561, 568, 587, 619, 791, 794, 803, 893], "bound": [65, 92, 93, 131, 144, 236, 268, 282, 362, 382, 481, 488, 538, 568, 619, 650, 664, 734, 893], "upper": [65, 92, 93, 131, 144, 236, 362, 481, 488, 538, 568, 619, 734, 893], "period": [65, 144, 145, 188, 189, 236, 277, 331, 336, 344, 345, 346, 401, 426, 427, 538, 568, 569, 593, 594, 619, 659, 720, 725, 735, 736, 737, 787, 816, 817, 893], "It": [65, 122, 166, 173, 218, 236, 248, 283, 337, 390, 538, 578, 583, 613, 619, 726, 812, 813, 893], "like": [65, 81, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 158, 236, 265, 393, 406, 514, 517, 527, 538, 561, 588, 619, 647, 792, 893], "durat": [65, 159, 209, 236, 314, 317, 320, 322, 324, 327, 333, 340, 477, 538, 574, 619, 699, 702, 708, 710, 713, 716, 722, 729, 877, 893], "3d12h4m25": [65, 144, 145, 159, 209, 236, 331, 336, 568, 569, 574, 619, 720, 725], "hour": [65, 144, 145, 159, 209, 236, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 501, 502, 538, 568, 569, 574, 619, 717, 720, 725], "minut": [65, 144, 145, 159, 209, 236, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 501, 502, 538, 568, 569, 574, 619, 717, 720, 725], "tempor": [65, 144, 145, 156, 183, 199, 236, 362, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 619], "window": [65, 144, 145, 236, 305, 331, 336, 344, 345, 346, 400, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 493, 538, 568, 569, 619, 688, 720, 725, 735, 736, 737, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 893], "granular": 65, "finer": 65, "than": [65, 79, 84, 86, 92, 93, 105, 114, 115, 122, 142, 143, 156, 159, 182, 183, 184, 208, 218, 236, 248, 374, 423, 433, 435, 450, 456, 461, 467, 514, 517, 524, 527, 538, 567, 574, 596, 597, 613, 619, 809, 824, 841, 847, 852, 858, 893], "1d": [65, 144, 145, 159, 209, 236, 310, 317, 324, 328, 331, 336, 340, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 695, 700, 702, 704, 705, 706, 711, 713, 717, 720, 723, 724, 725, 728, 729], "also": [65, 83, 114, 115, 130, 143, 144, 145, 166, 169, 186, 192, 213, 236, 301, 304, 311, 347, 361, 362, 406, 413, 414, 415, 416, 417, 419, 420, 421, 497, 498, 506, 508, 521, 537, 538, 568, 569, 583, 592, 599, 608, 609, 619, 696, 792, 893], "permut": 65, "1mo": [65, 144, 145, 159, 209, 236, 311, 314, 328, 331, 334, 336, 337, 341, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 696, 699, 714, 717, 718, 719, 720, 725, 727, 730], "dtrang": 65, "1985": 65, "00": [65, 144, 159, 209, 236, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 464, 502, 568, 574, 619, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 855], "04": [65, 105, 144, 209, 236, 311, 312, 313, 314, 317, 323, 324, 325, 329, 331, 332, 333, 334, 337, 338, 339, 340, 341, 464, 502, 568, 619, 696, 699, 702, 707, 709, 712, 713, 714, 715, 719, 721, 722, 723, 727, 728, 729, 730, 855], "05": [65, 105, 110, 111, 159, 209, 236, 311, 312, 314, 332, 334, 337, 341, 574, 619, 696, 697, 698, 699, 720, 725, 728, 730], "07": [65, 311, 312, 313, 329, 331, 336, 339, 464, 508, 697, 698, 728, 855], "08": [65, 110, 111, 145, 236, 312, 331, 464, 502, 569, 619, 720, 725, 855], "zone": [65, 311, 337, 341, 696, 726, 730], "america": [65, 696], "new_york": [65, 696], "\u03bc": [65, 144, 145, 159, 209, 236, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 508, 568, 569, 574, 619, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731], "est": [65, 696], "encount": [66, 144, 236, 397, 398, 448, 497, 506, 524, 538, 568, 619, 783, 784, 839, 893], "error": [66, 92, 93, 103, 182, 236, 270, 282, 287, 291, 374, 440, 442, 448, 464, 538, 613, 652, 664, 668, 672, 831, 833, 839, 855, 893], "duplic": [69, 152, 158, 159, 206, 236, 363, 489, 538, 573, 574, 604, 619, 754, 893], "certain": [70, 94, 104, 150, 209, 236, 347, 504, 538, 553, 586, 596, 597, 619, 893], "structur": [71, 75, 77, 133, 173, 236, 585, 619, 627, 893], "least": [72, 114, 401, 482, 538, 787, 881, 893], "expect": [72, 74, 79, 248, 487, 538, 576, 578, 619], "unexpect": [73, 236], "caus": [73, 81, 92, 93, 103, 121, 133, 236, 627, 893], "panic": 73, "combin": [75, 77, 144, 145, 146, 159, 209, 216, 236, 336, 451, 457, 463, 568, 569, 574, 595, 619, 725, 842, 848, 854], "mismatch": 75, "incompat": 77, "pa": [80, 104, 105, 236], "chunkedarrai": [80, 168, 236, 691, 893], "schema_overrid": [80, 82, 83, 84, 85, 86, 157, 236], "schemadict": [80, 82, 83, 84, 85, 86, 103, 185, 236, 578, 591, 613, 619], "zero": [80, 81, 91, 92, 93, 96, 100, 121, 135, 156, 182, 197, 236, 351, 352, 424, 433, 467, 538, 563, 619, 665, 742, 824, 858, 871, 875, 893], "copi": [80, 81, 121, 123, 124, 157, 197, 213, 236, 350, 467, 538, 551, 552, 608, 619, 624, 677, 681, 693, 740, 858, 871, 875, 893], "most": [80, 391, 395, 401, 461, 482, 538, 779, 787, 852, 881, 893], "closest": 80, "dimens": [80, 82, 84, 86, 236, 410, 538, 796, 893], "column_1": [80, 122, 205, 236], "pair": [80, 82, 83, 84, 86, 178, 236, 589, 619], "declar": [80, 82, 83, 84, 86, 236], "sever": [80, 82, 83, 84, 86, 236, 526], "wai": [80, 82, 83, 84, 86, 157, 173, 236, 585, 619], "As": [80, 82, 83, 84, 86, 95, 236, 522], "auto": [80, 82, 83, 84, 86, 100, 108, 205, 236], "automat": [80, 82, 83, 84, 86, 92, 93, 102, 103, 114, 115, 186, 213, 236, 451, 457, 463, 464, 592, 608, 619, 842, 848, 854, 855, 893], "equival": [80, 82, 83, 84, 86, 94, 155, 169, 236, 452, 769, 843, 856, 857, 893], "form": [80, 82, 83, 84, 86, 156, 183, 208, 236, 401, 538, 787, 893], "suppli": [80, 82, 83, 84, 86, 182, 236], "here": [80, 82, 83, 84, 86, 94, 102, 104, 113, 114, 115, 236, 448, 839], "overwrit": [80, 82, 83, 84, 86, 92, 93, 103, 121, 236, 561, 619], "them": [80, 82, 83, 84, 86, 133, 144, 145, 159, 166, 209, 236, 270, 362, 397, 398, 493, 538, 568, 569, 574, 583, 619, 627, 652, 783, 784, 893], "param": [80, 82, 83, 84, 86, 92, 93, 103, 114, 115, 182, 236], "overridden": [80, 82, 84, 86, 236], "construct": [80, 82, 83, 84, 85, 86, 236, 566, 588, 619, 893], "allow_copi": [81, 121], "interchang": [81, 121], "protocol": [81, 102, 121], "__dataframe__": 81, "convers": [81, 121, 157, 236, 464, 547, 855, 874, 875, 893], "fail": [81, 94, 104, 121, 206, 236, 283, 464, 604, 619, 628, 855, 893], "detail": [81, 102, 110, 111, 121, 900], "latest": [81, 94, 104, 121, 357, 391, 538], "index": [81, 88, 109, 121, 137, 144, 145, 150, 159, 174, 180, 182, 191, 203, 209, 214, 236, 243, 255, 256, 257, 258, 259, 260, 261, 268, 278, 282, 328, 413, 414, 415, 416, 417, 419, 420, 421, 424, 434, 446, 458, 473, 489, 538, 568, 569, 574, 598, 610, 619, 635, 636, 637, 638, 639, 640, 642, 643, 650, 660, 664, 717, 785, 810, 813, 825, 837, 849, 866, 893], "html": [81, 121], "throw": [81, 291, 448, 538, 672, 839, 893], "notimplementederror": 81, "from_panda": [81, 95], "from_arrow": 81, "effici": [81, 157, 236], "schemadefinit": [82, 83, 84, 236], "clone": [82, 83, 84, 85, 86, 123, 201, 202, 236, 551, 619, 677, 874, 875, 883, 893], "two": [82, 84, 86, 102, 138, 165, 166, 174, 204, 216, 217, 218, 236, 243, 307, 312, 435, 436, 473, 485, 496, 519, 524, 526, 538, 582, 583, 613, 619, 691, 697, 893], "dimension": [82, 84, 86, 236, 893], "infer_schema_length": [83, 86, 92, 93, 95, 103, 107, 236], "mani": [83, 86, 102, 133, 236, 627, 893], "scan": [83, 86, 92, 93, 100, 103, 104, 105, 106, 107, 108, 561, 570, 577, 619], "slow": [83, 86, 92, 93, 103, 305, 538, 688, 893], "NOT": [83, 110, 111, 469, 567, 619], "actual": [83, 95, 114, 115, 819, 893], "thei": [83, 110, 119, 160, 236, 347, 412, 538, 619, 798, 893], "appear": [83, 110, 480, 538, 880, 893], "typic": 83, "clearer": 83, "after": [83, 91, 92, 93, 96, 100, 103, 106, 107, 108, 133, 207, 235, 236, 406, 467, 538, 605, 619, 627, 696, 792, 858, 893], "load": [83, 94, 104, 236, 547, 570, 577, 619], "want": [83, 122, 133, 169, 236, 294, 295, 296, 353, 383, 413, 414, 415, 416, 417, 419, 420, 421, 497, 506, 538, 553, 570, 577, 619, 627, 678, 679, 680, 875, 893], "some": [83, 92, 93, 103, 129, 236, 558, 619, 759, 893], "_partial_": [83, 236], "omit": [83, 113, 114, 115, 169, 236], "similarli": 83, "ad": [83, 121, 144, 205, 213, 236, 247, 350, 497, 498, 538, 568, 608, 619, 740, 893], "partial": 83, "present": [83, 110, 114, 366, 538, 883, 893], "np": [84, 236, 756, 760, 761, 762, 798, 893], "ndarrai": [84, 136, 201, 236, 473, 538, 691, 810, 813, 866, 875, 893], "numpi": [84, 109, 136, 172, 201, 236, 397, 398, 473, 538, 756, 760, 761, 762, 783, 784, 798, 810, 866, 875, 883, 893], "columnar": [84, 86, 156, 183, 236], "interpret": [84, 86, 92, 93, 103, 236], "yield": [84, 86, 92, 93, 103, 131, 133, 205, 236, 627, 734, 893], "conclus": [84, 86, 236], "pd": [85, 95, 236, 477, 538, 877, 893], "nan_to_nul": [85, 236, 893], "datetimeindex": [85, 691, 893], "panda": [85, 95, 109, 202, 236, 477, 538, 876, 877, 893], "instal": [85, 92, 93, 96, 100, 102, 104, 109, 172, 201, 202, 236, 595, 619], "nan": [85, 110, 111, 114, 121, 134, 236, 308, 309, 351, 361, 368, 370, 371, 372, 385, 394, 397, 398, 524, 538, 562, 619, 630, 634, 692, 741, 761, 762, 783, 784, 798, 893], "convert": [85, 87, 94, 95, 104, 121, 198, 199, 200, 201, 202, 204, 236, 283, 341, 464, 665, 730, 855, 862, 863, 874, 875, 876, 883, 893], "pd_df": 85, "pd_seri": 85, "dummi": [87, 200, 236, 872, 893], "subset": [87, 129, 169, 200, 206, 236, 558, 604, 619], "to_dummi": [87, 236, 893], "foo_1": [87, 200, 236], "foo_2": [87, 200, 236], "bar_3": [87, 200, 236], "bar_4": [87, 200, 236], "ham_a": [87, 200, 236], "ham_b": [87, 200, 236], "get": [88, 97, 101, 116, 125, 130, 140, 141, 144, 145, 147, 148, 152, 154, 161, 168, 182, 185, 187, 191, 195, 200, 212, 221, 230, 236, 243, 255, 256, 257, 258, 259, 267, 271, 272, 284, 300, 301, 302, 303, 304, 315, 354, 359, 363, 365, 373, 376, 378, 385, 386, 387, 390, 392, 394, 397, 398, 405, 434, 438, 449, 452, 471, 472, 479, 483, 505, 510, 514, 515, 516, 517, 525, 528, 529, 538, 554, 559, 565, 568, 569, 570, 575, 577, 591, 598, 602, 607, 614, 615, 619, 635, 636, 637, 638, 639, 640, 649, 653, 654, 666, 676, 684, 685, 686, 687, 700, 746, 749, 754, 757, 767, 772, 775, 777, 778, 780, 783, 784, 788, 789, 791, 825, 828, 840, 843, 865, 871, 872, 879, 882, 883, 893], "uint32": [88, 109, 131, 236, 257, 259, 260, 261, 272, 313, 316, 319, 321, 323, 325, 326, 329, 330, 332, 338, 339, 409, 441, 449, 452, 473, 477, 538, 638, 642, 643, 654, 672, 698, 701, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 734, 811, 832, 877, 893], "regular": [88, 156, 182, 183, 209, 236, 347, 492, 504, 514, 517, 527, 538], "uint64": [88, 146, 236, 260, 261, 358, 408, 538, 642, 643, 748, 794, 893], "bigidx": 88, "read": [89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 133, 236, 383, 538, 561, 566, 588, 619, 627, 893], "over": [89, 92, 93, 94, 103, 114, 122, 133, 143, 156, 157, 182, 183, 205, 215, 218, 236, 248, 305, 352, 361, 383, 384, 412, 413, 414, 415, 416, 417, 419, 420, 421, 487, 497, 498, 506, 513, 521, 538, 613, 627, 628, 688, 798, 799, 800, 802, 806, 893], "avail": [89, 94, 104, 113, 235, 406, 531, 532, 534, 537, 538, 539, 542, 543, 544, 547, 548, 561, 618, 619, 792, 885, 887, 889, 893, 896, 897, 898], "fetch": [89, 103, 160, 236, 551, 553, 570, 577, 605, 619], "ideal": 89, "read_csv_batch": [89, 548], "tpch": [89, 93], "tables_scale_100": [89, 93], "lineitem": [89, 93, 102], "tbl": [89, 93], "parse_d": [89, 92, 93, 103], "polarsdatatyp": [90, 92, 93, 97, 101, 112, 113, 114, 115, 118, 122, 130, 236, 248, 291, 347, 383, 538, 559, 619, 628, 672, 893], "new": [90, 118, 119, 122, 127, 129, 149, 150, 169, 170, 178, 179, 196, 208, 213, 236, 244, 312, 349, 361, 384, 454, 455, 460, 461, 468, 469, 474, 538, 547, 558, 589, 603, 608, 613, 619, 624, 628, 693, 697, 739, 785, 795, 845, 846, 851, 852, 859, 861, 867, 873, 884, 893], "In": [90, 94, 104, 108, 114, 115, 118, 122, 131, 133, 144, 145, 169, 236, 248, 390, 435, 436, 538, 568, 569, 619, 627, 734, 793, 893], "probabl": [90, 118, 343, 538, 733, 893], "n_row": [91, 92, 93, 96, 100, 103, 106, 107, 108, 157, 236, 561, 619], "accept": [91, 92, 93, 94, 96, 100, 186, 192, 213, 236, 592, 608, 619], "start": [91, 92, 93, 96, 100, 103, 106, 107, 108, 143, 144, 160, 191, 209, 214, 236, 278, 290, 313, 315, 316, 318, 323, 325, 329, 330, 331, 332, 335, 336, 338, 339, 342, 347, 362, 434, 440, 444, 458, 462, 492, 497, 504, 506, 530, 538, 567, 568, 586, 598, 610, 619, 660, 671, 695, 696, 698, 700, 701, 707, 709, 712, 714, 715, 718, 719, 720, 721, 723, 724, 725, 727, 728, 729, 730, 731, 825, 835, 849, 853, 893], "stop": [91, 92, 93, 96, 100, 103, 106, 107, 108, 313, 315, 316, 318, 323, 325, 329, 330, 331, 332, 335, 336, 338, 339, 342, 695, 696, 698, 700, 701, 707, 709, 712, 714, 715, 718, 719, 720, 721, 723, 724, 725, 727, 728, 729, 730, 731], "textio": 92, "new_column": [92, 93, 95], "comment_char": [92, 93, 103], "quote_char": [92, 93, 103], "skip_row": [92, 93, 103], "missing_utf8_is_empty_str": [92, 93, 103], "ignore_error": [92, 93, 103], "n_thread": [92, 93], "8192": 92, "csvencod": [92, 93, 103], "low_memori": [92, 93, 100, 103, 107, 108], "storage_opt": [92, 94, 96, 100, 104, 106, 108], "skip_rows_after_head": [92, 93, 103], "row_count_nam": [92, 93, 96, 100, 103, 106, 107, 108], "row_count_offset": [92, 93, 96, 100, 103, 106, 107, 108], "sample_s": [92, 93], "eol_char": [92, 93, 103], "By": [92, 93, 95, 103, 159, 192, 236, 453, 512, 574, 619, 828, 844, 875, 882, 893], "we": [92, 93, 95, 103, 143, 159, 192, 236, 265, 453, 512, 530, 574, 578, 599, 619, 628, 647, 844, 893], "handler": [92, 93, 95], "g": [92, 93, 94, 95, 96, 100, 104, 106, 108, 208, 236, 347, 425, 428, 504, 538, 589, 619, 811, 814, 875, 893], "via": [92, 93, 95, 103, 106, 108, 156, 183, 236], "builtin": [92, 93, 95], "open": [92, 93, 95, 96, 100, 106, 108], "stringio": [92, 93], "fsspec": [92, 93, 96, 100, 104, 106, 108, 109], "remot": [92, 93, 96, 100], "first": [92, 93, 95, 103, 107, 122, 142, 144, 147, 159, 161, 168, 173, 174, 195, 205, 206, 209, 221, 236, 257, 258, 259, 265, 268, 269, 305, 328, 331, 359, 365, 378, 424, 446, 448, 454, 455, 464, 489, 491, 497, 506, 510, 538, 553, 568, 570, 574, 577, 585, 604, 609, 614, 619, 637, 640, 647, 650, 651, 665, 688, 689, 717, 720, 749, 757, 772, 810, 837, 839, 845, 846, 855, 893], "dataset": [92, 93, 103, 105, 375, 538, 547, 578, 619, 770, 893], "autogener": [92, 93, 103], "column_x": [92, 93, 103], "enumer": [92, 93, 103, 157, 236], "everi": [92, 93, 103, 144, 196, 199, 209, 236, 260, 261, 264, 266, 268, 269, 278, 281, 300, 301, 302, 303, 304, 305, 331, 336, 349, 445, 474, 497, 498, 538, 561, 568, 603, 619, 642, 643, 646, 648, 650, 651, 660, 663, 684, 685, 686, 687, 688, 720, 725, 739, 836, 867, 893], "shorter": [92, 93], "remain": [92, 93, 103, 131, 143, 236, 248, 460, 461, 538, 567, 578, 619, 734, 851, 852, 893], "comment": [92, 93, 103], "instanc": [92, 93, 103, 114, 115, 133, 138, 236, 283, 291, 391, 413, 414, 415, 416, 417, 419, 420, 421, 497, 506, 538, 578, 610, 619, 627, 672, 893], "special": [92, 93, 103, 628, 893], "handl": [92, 93, 103, 105, 264, 306, 467, 538, 646, 690, 858, 893], "escap": [92, 93, 103], "dure": [92, 93, 103, 119, 133, 236, 627, 893], "provid": [92, 93, 94, 102, 103, 104, 114, 115, 283, 287, 288, 442, 443, 446, 448, 508, 547, 596, 597, 619, 668, 669, 833, 834, 837, 839, 900], "equal": [92, 93, 103, 110, 111, 117, 139, 144, 159, 166, 236, 412, 413, 414, 415, 416, 417, 419, 420, 421, 449, 450, 456, 467, 488, 538, 568, 574, 583, 619, 798, 799, 800, 801, 802, 803, 805, 806, 807, 811, 840, 841, 847, 858, 893], "would": [92, 93, 103, 257, 259, 268, 390, 406, 489, 538, 578, 619, 637, 640, 650, 792, 875, 893], "prefer": [92, 93, 94, 103, 122, 133, 156, 183, 218, 236, 248, 412, 538, 613, 619, 627, 798, 893], "treat": [92, 93, 103, 440, 454, 455, 831, 845, 846], "check": [92, 93, 103, 110, 111, 139, 153, 155, 236, 245, 246, 263, 286, 289, 290, 362, 366, 440, 444, 462, 538, 578, 619, 625, 626, 645, 667, 670, 671, 752, 753, 755, 758, 759, 765, 766, 768, 769, 811, 831, 835, 853, 893], "might": [92, 93, 103, 390, 480, 538], "issu": [92, 93, 95, 103, 303, 304, 471, 538, 686, 687, 864, 893], "alwai": [92, 122, 218, 236, 248, 390, 538, 578, 613, 619], "physic": [92, 93, 159, 236, 292, 477, 538, 550, 573, 574, 619, 674, 877, 893], "cpu": [92, 93], "your": [92, 93, 110, 111, 156, 186, 213, 236, 464, 553, 570, 577, 578, 592, 608, 619, 855], "system": [92, 93], "done": [92, 93, 103, 105, 142, 159, 236, 247, 291, 450, 456, 538, 574, 599, 612, 619, 672, 841, 847, 893], "buffer": [92, 93, 131, 156, 236, 734, 893], "onc": [92, 93, 95, 121, 184, 236, 423, 538, 550, 619, 809, 893], "modifi": [92, 93, 103, 119, 149, 156, 211, 236, 311, 340, 696, 729, 795, 856, 857, 893], "multi": [92, 93], "lossi": [92, 93, 103], "replac": [92, 93, 103, 134, 135, 180, 205, 213, 236, 312, 455, 562, 608, 619, 697, 812, 813, 846, 893], "decod": [92, 93], "im": [92, 93], "usag": [92, 93, 103, 114, 115, 190, 236, 819, 893], "expens": [92, 93, 100, 103, 107, 108, 143, 156, 182, 183, 205, 206, 236, 248, 538, 567, 604, 619, 627, 893], "nativ": [92, 96, 100, 122, 156, 183, 199, 218, 236, 248, 538, 613], "parser": 92, "even": 92, "possibl": [92, 122, 156, 183, 218, 236, 248, 382, 390, 461, 481, 538, 613, 852, 893], "differ": [92, 105, 133, 144, 145, 156, 183, 199, 205, 236, 264, 306, 311, 313, 328, 329, 338, 397, 398, 464, 480, 505, 508, 514, 517, 538, 568, 569, 619, 627, 646, 690, 696, 698, 717, 718, 727, 783, 784, 811, 855, 893], "regard": [92, 524], "sens": [92, 96, 100, 106, 108, 144, 145, 166, 209, 236, 568, 569, 583, 619], "particular": [92, 96, 100, 106, 108, 131, 236, 734, 893], "storag": [92, 94, 96, 100, 104, 106, 108], "connect": [92, 96, 100, 102, 105, 106, 108, 548], "port": [92, 96, 100, 102, 106, 108], "usernam": [92, 96, 100, 102, 106, 108], "password": [92, 96, 100, 102, 106, 108], "skip": [92, 93, 95, 103, 208, 236, 628, 893], "insert": [92, 93, 96, 100, 103, 106, 107, 108, 150, 179, 205, 207, 236, 424, 439, 464, 467, 538, 605, 619, 810, 830, 855, 858, 893], "count": [92, 93, 96, 100, 103, 106, 107, 108, 126, 144, 145, 159, 169, 170, 174, 205, 209, 214, 218, 227, 236, 300, 328, 377, 396, 399, 413, 414, 415, 416, 417, 419, 420, 421, 441, 480, 482, 518, 538, 568, 569, 574, 610, 613, 619, 689, 717, 781, 786, 832, 880, 881, 893], "offset": [92, 93, 96, 100, 103, 106, 107, 108, 144, 145, 191, 209, 214, 236, 278, 328, 331, 336, 434, 458, 464, 538, 568, 569, 598, 610, 619, 660, 717, 720, 725, 825, 849, 855, 893], "row_count": [92, 93, 96, 100, 103, 106, 107, 108], "sampl": [92, 93, 218, 236, 433, 538, 613, 824, 893], "estim": [92, 93, 131, 236, 345, 346, 375, 538, 734, 736, 737, 770, 893], "alloc": [92, 93, 131, 177, 236, 734, 893], "need": [92, 93, 95, 110, 111, 144, 145, 190, 201, 236, 283, 428, 449, 538, 568, 569, 612, 619, 818, 840, 893], "end": [92, 93, 100, 103, 144, 236, 278, 289, 331, 347, 362, 440, 444, 458, 462, 492, 504, 538, 568, 570, 577, 586, 619, 660, 670, 720, 835, 849, 853], "scan_csv": [92, 93, 596, 597, 612, 619], "glob": [92, 93, 103, 106, 108], "pattern": [92, 93, 103, 106, 108, 156, 236, 389, 440, 441, 446, 447, 454, 455, 812, 813, 831, 832, 837, 838, 845, 846, 893], "store": [92, 100, 133, 156, 183, 236, 627, 893], "continu": [92, 100, 433, 538, 824, 893], "benchmark": [92, 100], "50000": 93, "batchedcsvread": [93, 547], "batch": [93, 107, 578, 619], "upon": 93, "creation": 93, "gather": 93, "work": [93, 95, 143, 145, 179, 236, 265, 293, 294, 295, 296, 356, 452, 469, 479, 538, 567, 569, 619, 647, 675, 678, 679, 680, 745, 843, 879, 893], "next_batch": 93, "call": [93, 114, 115, 160, 235, 236, 301, 304, 538, 548, 618, 619, 628, 893], "big": 93, "interest": 93, "seen_group": 93, "big_fil": 93, "while": [93, 94, 95, 104, 114, 115, 156, 165, 205, 236, 582, 619], "df_current_batch": 93, "concat": [93, 493, 494, 676, 780, 893], "partition_df": 93, "partition_bi": [93, 157, 236], "as_dict": [93, 171, 236], "fh": 93, "write_csv": [93, 103, 236], "els": 93, "table_uri": [94, 104], "delta_table_opt": [94, 104], "lake": [94, 104, 547], "uri": [94, 102, 104], "root": [94, 104, 374, 384, 392, 403, 437, 470, 537, 538, 827, 893], "For": [94, 95, 102, 104, 133, 145, 158, 159, 192, 218, 236, 283, 291, 391, 408, 433, 497, 506, 507, 538, 569, 574, 599, 613, 619, 627, 794, 824, 875, 893], "filesystem": [94, 104], "absolut": [94, 104, 110, 111, 242, 538, 623, 893], "rel": [94, 104, 110, 111, 328, 344, 345, 346, 538, 717, 735, 736, 737, 893], "But": [94, 104], "gc": [94, 104], "azur": [94, 104], "thu": [94, 103, 104, 133, 236, 524, 627, 893], "backend": [94, 102, 104], "deltalak": [94, 104], "cloud": [94, 104, 105], "configur": [94, 104], "authent": [94, 104], "keyword": [94, 100, 104, 172, 173, 182, 186, 213, 236, 523, 585, 592, 608, 619, 893], "sinc": [94, 104, 315, 337, 349, 508, 538, 700, 726, 739, 893], "table_path": [94, 104], "partit": [94, 100, 102, 104, 105, 157, 171, 236], "avoid": 94, "year": [94, 104, 144, 145, 159, 209, 236, 318, 328, 329, 331, 336, 338, 413, 414, 415, 416, 417, 419, 420, 421, 500, 501, 538, 568, 569, 574, 619, 703, 717, 718, 720, 725, 727], "2021": [94, 104, 126, 142, 144, 209, 236, 464, 512, 568, 619, 703, 753, 855, 893], "aw": [94, 104], "see": [94, 95, 102, 104, 110, 111, 114, 115, 158, 172, 173, 236, 294, 295, 296, 334, 352, 361, 375, 383, 433, 521, 538, 678, 679, 680, 723, 770, 824, 893, 900], "bucket": [94, 104, 331, 336, 720, 725], "aws_access_key_id": [94, 104], "the_aws_access_key_id": [94, 104], "aws_secret_access_kei": [94, 104], "the_aws_secret_access_kei": [94, 104], "googl": [94, 104], "service_account": [94, 104], "service_account_json_absolute_path": [94, 104], "az": [94, 104], "adl": [94, 104], "abf": [94, 104], "azure_storage_account_nam": [94, 104], "azure_storage_account_kei": [94, 104], "without_fil": [94, 104], "track": [94, 104, 122, 236], "sheet_id": 95, "sheet_nam": 95, "xlsx2csv_option": 95, "read_csv_opt": 95, "excel": [95, 547], "xlsx": 95, "sheet": 95, "xlsx2csv": [95, 109], "read_csv": [95, 103], "skip_empty_lin": 95, "my": [95, 104, 105], "datasheet": 95, "excel_fil": 95, "correct": [95, 345, 346, 375, 418, 433, 538, 578, 619, 736, 737, 770, 804, 824, 893], "look": [95, 283, 286, 667], "document": [95, 102, 448, 464, 839, 855], "fix": [95, 113, 114, 340, 413, 414, 415, 416, 417, 419, 420, 421, 538, 729], "whole": [95, 435, 436, 446, 538, 837], "twice": 95, "With": 95, "1000": [95, 131, 236, 319, 320, 467, 708], "spreadsheet": [95, 174, 236], "xl": 95, "xlsm": 95, "xlsb": 95, "odf": 95, "od": [95, 463, 854], "odt": 95, "memory_map": [96, 100, 106], "v2": [96, 106], "valid": [96, 100, 115, 119, 131, 236, 305, 435, 440, 441, 446, 447, 448, 538, 688, 734, 747, 831, 832, 837, 838, 839, 845, 846, 893], "greatli": [96, 106], "repeat": [96, 106, 407, 409, 538], "o": [96, 106, 305, 445, 478, 538, 688, 836, 878, 893], "page": [96, 106, 236, 538, 547, 597, 619, 893], "give": [96, 100, 106, 107, 108, 165, 236, 315, 375, 409, 538, 547, 582, 619, 700, 770, 893], "read_ndjson": 98, "parallelstrategi": [100, 108], "directori": 100, "awar": [100, 156, 183, 199, 236, 337, 464, 726, 855], "stabl": 100, "increas": [100, 305, 538, 688, 893], "row_group": [100, 108], "direct": [100, 102, 108, 208, 236], "read_tabl": 100, "connection_uri": 102, "partition_on": 102, "partition_rang": 102, "partition_num": 102, "databas": 102, "postgresql": 102, "redshift": 102, "mysql": 102, "mariadb": 102, "clickhous": 102, "oracl": 102, "bigqueri": 102, "server": 102, "pleas": [102, 104], "connectorx": [102, 109], "doc": 102, "github": 102, "com": [102, 344, 345, 346, 446, 538, 735, 736, 737, 837, 893], "sfu": 102, "db": 102, "connector": 102, "destin": 102, "raw": 102, "transfer": 102, "partition_col": 102, "explicitli": [102, 113, 114, 526], "with_column_nam": 103, "push": [103, 105, 106, 107, 108], "down": [103, 105, 106, 107, 108, 356, 538, 745, 893], "therebi": [103, 106, 107, 108], "potenti": [103, 106, 107, 108], "overhead": [103, 106, 107, 108], "updat": 103, "just": [103, 165, 236, 582, 619], "befor": [103, 119, 133, 144, 159, 207, 236, 303, 304, 305, 401, 412, 413, 414, 415, 416, 417, 419, 420, 421, 467, 471, 538, 568, 571, 574, 605, 619, 627, 686, 687, 688, 787, 798, 799, 800, 801, 802, 803, 805, 806, 807, 858, 864, 893], "realloc": [103, 106, 107, 133, 236, 627, 893], "my_long_fil": 103, "doesn": [103, 343, 538, 733, 883, 893], "thing": [103, 485, 505], "less": [103, 159, 236, 450, 456, 461, 467, 574, 619, 841, 847, 852, 858], "limit": [103, 135, 236, 285, 294, 295, 296, 352, 357, 538, 563, 570, 597, 619, 678, 679, 680, 742, 893], "breezah": 103, "languag": [103, 144, 145, 159, 209, 236, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 717, 720, 725], "terribl": 103, "mydf": 103, "lambda": [103, 122, 138, 173, 218, 236, 248, 283, 344, 345, 346, 383, 384, 412, 499, 527, 538, 578, 585, 613, 619, 628, 665, 735, 736, 737, 893], "raw_filesystem": 104, "adjust": [104, 344, 345, 346, 433, 538, 735, 736, 737, 824, 893], "subtreefilesystem": 104, "reli": 104, "mention": 104, "ensur": [104, 114, 115, 117, 182, 236, 362, 482, 538, 578, 619, 875, 881, 893], "gcsf": 104, "pyfilesystem": 104, "fsspechandl": 104, "gcsfilesystem": 104, "id": [104, 218, 454, 455, 480, 482, 538, 613, 880, 893], "token": 104, "pa_f": 104, "adlf": 104, "azureblobfilesystem": 104, "account_nam": 104, "account_kei": 104, "allow_pyarrow_filt": 105, "lead": [105, 236, 425, 451, 463, 467, 473, 482, 514, 517, 524, 538, 578, 613, 619, 814, 842, 854, 858, 893], "comparison": 105, "dset": 105, "folder": 105, "out": [105, 109, 145, 236, 268, 282, 287, 364, 367, 440, 442, 538, 569, 596, 597, 619, 650, 664, 668, 831, 833], "1970": 105, "stdout": [109, 142, 236], "14": [109, 122, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 236, 318, 361, 538, 720], "platform": 109, "linux": 109, "microsoft": 109, "standard": [109, 193, 236, 318, 345, 419, 433, 438, 448, 525, 538, 600, 619, 703, 736, 824, 828, 839, 893], "wsl2": 109, "x86_64": 109, "glibc2": 109, "main": 109, "jul": [109, 464, 855], "56": [109, 475, 538], "gcc": 109, "20210110": 109, "23": [109, 144, 145, 236, 312, 316, 331, 501, 568, 569, 619, 697, 701], "check_dtyp": [110, 111], "check_exact": [110, 111], "rtol": [110, 111], "1e": [110, 111], "atol": [110, 111], "nans_compare_equ": [110, 111], "check_column_ord": 110, "check_row_ord": 110, "assertionerror": [110, 111], "compar": [110, 111, 139, 236, 811, 893], "exactli": [110, 111, 114, 115, 460, 461, 819, 851, 852, 893], "toler": [110, 111, 159, 236, 574, 619], "inexact": [110, 111], "assert": [110, 111, 113, 114, 115, 145, 236, 547, 569, 619, 747, 893], "irrespect": 110, "unsort": 110, "check_nam": 111, "s1": [111, 138, 236, 884, 893], "searchstrategi": [112, 114, 115], "null_prob": [112, 114, 115], "percentag": [112, 114, 115, 401, 538, 787, 893], "chanc": [112, 114, 115], "flag": [112, 425, 538, 556, 578, 619, 814, 893], "hypothesi": [112, 113, 114, 115, 900], "sampled_from": 112, "unique_small_int": 112, "ccy": 112, "gbp": 112, "eur": [112, 126, 142, 236], "jpy": 112, "min_col": [113, 114], "max_col": [113, 114], "suitabl": [113, 424, 538, 810, 893], "standalon": [113, 114], "itself": [113, 576, 619], "explicit": [113, 488, 521], "random": [113, 114, 115, 146, 184, 236, 358, 406, 423, 429, 538, 748, 792, 809, 820, 893], "mincol": 113, "exact": [113, 114, 115, 190, 236, 464, 855], "especi": 113, "punctuat": 113, "test_special_char_colname_init": 113, "z": [113, 114, 131, 152, 154, 158, 165, 236, 262, 292, 358, 409, 464, 538, 573, 582, 598, 619, 674, 742, 855, 893], "test_unique_xyz": 113, "assert_someth": 113, "min_siz": [114, 115], "max_siz": [114, 115], "include_col": 114, "allow_infin": [114, 115], "allowed_dtyp": [114, 115], "excluded_dtyp": [114, 115], "describ": [114, 142, 236, 612, 893], "desir": 114, "ignor": [114, 115, 163, 194, 236, 264, 306, 397, 398, 538, 646, 690, 783, 784, 893], "n_chunk": [114, 115, 236, 893], "randomis": 114, "individu": [114, 145, 236, 248, 447, 538, 569, 597, 619, 676, 838, 893], "append": [114, 133, 158, 159, 236, 407, 538, 573, 574, 619, 893], "onto": 114, "independ": [114, 115], "either": [114, 145, 160, 163, 182, 194, 236, 569, 576, 619], "basi": 114, "pct": 114, "take": [114, 138, 166, 173, 196, 236, 328, 337, 474, 503, 505, 538, 583, 603, 619, 717, 726, 867, 884, 893], "preced": 114, "disallow": [114, 115], "exclud": [114, 115, 301, 304, 362, 492, 524, 538], "deploi": [114, 115], "characterist": [114, 115], "develop": [114, 115], "directli": [114, 115, 344, 345, 346, 538, 735, 736, 737, 893], "concret": [114, 115], "test_repr": [114, 115], "isinst": [114, 115, 236], "repr": [114, 115], "known": [114, 613], "colnam": [114, 130, 236, 384, 538, 559, 619], "df_strategi": 114, "15836": 114, "1755e": 114, "38": 114, "575050513": 114, "constructor": 115, "max_data_s": 115, "distinct": [115, 171, 236, 284, 406, 500, 501, 502, 538, 666, 792, 893], "54666": 115, "35": [115, 306, 538, 690, 893], "6414": 115, "63290": 115, "pool": 116, "toggl": [117, 464, 855], "scope": 119, "lifetim": 119, "initi": [119, 497, 506], "whatev": 119, "were": 119, "enter": 119, "set_verbos": 119, "do_various_th": 119, "restor": 119, "nan_as_nul": 121, "_pyarrowdatafram": 121, "effect": [121, 138, 236, 610, 619], "nullabl": 121, "extens": 121, "propag": [121, 163, 194, 236, 397, 398, 538, 783, 784, 893], "return_dtyp": [122, 236, 248, 383, 487, 513, 538, 628, 893], "inference_s": [122, 236], "256": [122, 236, 787, 893], "user": [122, 173, 218, 236, 248, 425, 487, 538, 585, 613, 619, 628, 814, 893], "udf": [122, 173, 218, 236, 248, 487, 538, 585, 613, 619, 628, 893], "logic": [122, 218, 236, 248, 477, 538, 566, 573, 588, 611, 613, 619, 877, 893], "almost": [122, 218, 236, 248, 538, 613], "_significantly_": [122, 218, 236, 248, 538, 613], "intens": [122, 218, 236, 248, 538, 613], "becaus": [122, 131, 144, 160, 208, 218, 236, 248, 265, 538, 568, 613, 619, 628, 647, 734, 893], "engin": [122, 218, 236, 248, 538, 578, 613, 619], "forc": [122, 159, 218, 236, 248, 538, 573, 574, 613, 619], "materi": [122, 218, 236, 248, 538, 586, 613, 619], "parallelis": [122, 218, 236, 248, 538, 613], "optimis": [122, 218, 236, 248, 538, 613, 812, 813, 893], "wherev": [122, 218, 236, 248, 538, 613], "strongli": [122, 218, 236, 248, 538, 613], "achiev": [122, 218, 236, 248, 538, 613], "best": [122, 218, 236, 248, 538, 613], "tri": [122, 236], "arbitrarili": [122, 236], "rearrang": [122, 236], "preserv": [122, 236, 430, 538, 821, 893], "syntax": [122, 169, 192, 236, 595, 599, 619, 893], "15": [122, 144, 145, 150, 236, 305, 306, 331, 336, 349, 538, 568, 569, 619, 688, 690, 720, 725, 739, 893], "better": [122, 218, 236, 248, 482, 538, 613, 812, 813, 893], "scalar": [122, 155, 236, 424, 487, 538, 769, 810, 893], "ident": [123, 124, 236, 551, 552, 619, 677, 681, 893], "cheap": [123, 124, 236, 551, 552, 619, 627, 677, 681, 893], "deepcopi": [123, 124, 236, 551, 552, 619, 677, 681, 893], "13": [123, 124, 134, 135, 141, 145, 150, 160, 168, 213, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 236, 412, 414, 493, 529, 538, 551, 552, 562, 563, 569, 576, 608, 619, 628, 720, 725, 727, 893], "clear": [124, 236, 552, 619, 681, 893], "properti": [125, 130, 148, 185, 187, 212, 236, 547, 554, 559, 591, 607, 619], "appl": [125, 149, 158, 178, 180, 198, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 236, 403, 411, 444, 462, 470, 538, 573, 589, 619, 835, 853], "banana": [125, 198, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 236, 403, 411, 470, 538], "summari": [126, 236, 689, 893], "glimps": [126, 147, 236], "usd": [126, 142, 236], "2020": [126, 142, 145, 236, 311, 314, 317, 319, 320, 322, 324, 327, 333, 334, 337, 341, 569, 619, 696, 699, 702, 708, 710, 713, 716, 722, 730], "null_count": [126, 129, 236, 305, 538, 688, 689, 893], "266667": [126, 236], "666667": [126, 163, 210, 224, 236, 344, 538, 606, 619], "std": [126, 236, 412, 538, 619, 689, 805, 893], "101514": [126, 236], "707107": [126, 236, 345, 538, 736, 893], "57735": [126, 236], "median": [126, 174, 236, 415, 538, 609, 619, 801, 893], "snippet": [129, 236, 558, 619], "is_nul": [129, 236, 538, 558, 619, 893], "height": [129, 236], "sizeunit": [131, 236, 734, 893], "total": [131, 236, 734, 893], "heap": [131, 236, 734, 893], "its": [131, 207, 236, 312, 331, 336, 605, 619, 697, 720, 725, 734, 893], "bitmap": [131, 236, 734, 893], "therefor": [131, 236, 283, 734, 893], "structarrai": [131, 236, 734, 893], "constant": [131, 145, 236, 350, 538, 569, 619, 734, 740, 893], "unchang": [131, 236, 248, 477, 538, 578, 613, 619, 734, 877, 893], "visibl": [131, 236, 734, 893], "capac": [131, 190, 236, 734, 819, 893], "ffi": [131, 236, 734, 893], "kb": [131, 236, 734, 893], "mb": [131, 236, 734, 893], "gb": [131, 236, 734, 893], "tb": [131, 236, 734, 893], "scale": [131, 236, 734, 893], "1_000_000": [131, 236, 734, 893], "25888898": [131, 236], "689577102661133": [131, 236], "long": [132, 165, 208, 236, 560, 582, 619], "largelist": [132, 236], "letter": [132, 221, 230, 236, 347, 504, 538, 560, 614, 615, 619], "locat": [133, 180, 203, 207, 236, 424, 538, 605, 619, 627, 810, 813, 866, 893], "faster": [133, 208, 236, 248, 412, 452, 480, 538, 596, 597, 619, 627, 628, 798, 843, 893], "onlin": [133, 236, 627, 893], "rerun": [133, 236, 627, 893], "latter": [133, 236, 627, 893], "20": [133, 149, 150, 173, 175, 179, 180, 236, 255, 256, 257, 259, 306, 331, 336, 358, 361, 508, 512, 538, 585, 619, 690, 725, 893], "40": [133, 173, 236, 331, 336, 358, 538, 585, 619, 703, 725], "50": [133, 236, 294, 295, 296, 331, 336, 538, 678, 725, 893], "60": [133, 236, 332, 333, 464, 718, 721, 722, 855], "fill_valu": [134, 189, 208, 236, 351, 427, 538, 562, 594, 619, 741, 817, 893], "Not": [134, 236, 368, 370, 538, 562, 619], "To": [134, 236, 308, 309, 352, 514, 517, 527, 538, 562, 619], "fillnullstrategi": [135, 236, 352, 538, 563, 619, 742, 893], "matches_supertyp": [135, 236, 563, 619], "forward": [135, 159, 236, 352, 357, 538, 563, 574, 619, 742, 893], "consecut": [135, 236, 285, 352, 357, 439, 538, 563, 619, 742, 830, 893], "supertyp": [135, 236, 247, 538, 563, 619], "fill_nan": [135, 236, 538, 619, 893], "OR": [136, 236, 486, 564, 619], "reduct": [138, 236], "supercast": [138, 236], "similar": [138, 159, 236, 400, 538, 574, 619], "parent": [138, 236], "rule": [138, 236, 334, 723], "arithmet": [138, 236], "zip_with": [138, 236, 893], "foo11": [138, 236], "bar22": [138, 236], "null_equ": [139, 236, 811, 893], "retriev": [140, 236, 260, 261, 468, 642, 643, 859], "return_as_str": [142, 236], "preview": [142, 236], "wide": [142, 165, 208, 236, 582, 619], "nice": [142, 236], "few": [142, 236], "rather": [142, 159, 236, 467, 574, 619, 858], "head": [142, 161, 195, 236, 247, 378, 538, 577, 619, 772, 893], "tail": [142, 147, 216, 236, 247, 433, 538, 619, 824, 893], "maintain_ord": [143, 171, 174, 206, 209, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 236, 243, 248, 473, 479, 495, 538, 553, 556, 561, 567, 586, 595, 596, 597, 604, 619, 879, 893], "consist": [143, 236, 567, 619], "agg": [143, 144, 145, 236, 243, 248, 353, 355, 435, 473, 484, 495, 538, 553, 556, 561, 567, 568, 569, 586, 595, 619], "loop": [143, 236], "sub_df": [143, 236], "index_column": [144, 145, 236, 568, 569, 619], "truncat": [144, 236, 568, 586, 619], "include_boundari": [144, 236, 568, 619], "start_bi": [144, 236, 568, 619], "startbi": [144, 236, 568, 619], "dynamicgroupbi": [144, 236], "normal": [144, 236, 343, 375, 433, 538, 568, 619, 733, 770, 824, 893], "groupbi": [144, 145, 169, 236, 243, 248, 265, 305, 353, 355, 400, 435, 436, 473, 484, 487, 495, 538, 553, 556, 561, 568, 569, 586, 595, 619, 647, 688, 893], "member": [144, 236, 568, 619, 759, 893], "seen": [144, 236, 285, 357, 538, 568, 619], "roll": [144, 145, 236, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 493, 538, 568, 569, 619, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 893], "slot": [144, 236, 264, 305, 306, 538, 568, 619, 646, 688, 690, 893], "1n": [144, 145, 159, 209, 236, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 717, 720, 725], "nanosecond": [144, 145, 159, 209, 236, 328, 331, 332, 336, 413, 414, 415, 416, 417, 419, 420, 421, 502, 538, 568, 569, 574, 619, 717, 720, 721, 725], "1u": [144, 145, 159, 209, 236, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 717, 720, 725], "microsecond": [144, 145, 159, 209, 236, 328, 331, 332, 336, 413, 414, 415, 416, 417, 419, 420, 421, 501, 502, 538, 568, 569, 574, 586, 619, 717, 720, 725], "1m": [144, 145, 159, 209, 236, 319, 320, 322, 327, 328, 331, 333, 336, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 708, 710, 716, 717, 720, 722, 725], "millisecond": [144, 145, 159, 209, 236, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 502, 538, 568, 569, 574, 619, 717, 720, 725], "1h": [144, 145, 159, 209, 236, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 701, 717, 720, 725], "1w": [144, 145, 159, 209, 236, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 717, 720, 725], "week": [144, 145, 159, 209, 236, 328, 331, 336, 339, 413, 414, 415, 416, 417, 419, 420, 421, 502, 538, 568, 569, 574, 619, 717, 720, 725, 728], "month": [144, 145, 159, 209, 236, 313, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 500, 501, 538, 568, 569, 574, 619, 698, 717, 720, 725], "1y": [144, 145, 159, 209, 236, 328, 331, 336, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 717, 720, 725, 731], "1i": [144, 145, 159, 209, 236, 328, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 569, 574, 619, 717], "Or": [144, 145, 159, 209, 236, 400, 530, 538, 568, 569, 574, 619], "10i": [144, 145, 236, 568, 569, 619], "ascend": [144, 145, 236, 489, 568, 569, 619], "often": [144, 145, 236, 409, 538, 568, 569, 619], "dynam": [144, 236, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 619], "matter": [144, 145, 156, 183, 199, 236, 568, 569, 619], "neg": [144, 147, 188, 189, 191, 195, 236, 277, 278, 426, 427, 434, 458, 538, 568, 593, 594, 598, 610, 619, 659, 660, 816, 817, 825, 849, 893], "_lower_bound": [144, 236, 568, 619], "_upper_bound": [144, 236, 568, 619], "impact": [144, 236, 568, 619], "harder": [144, 236, 568, 619], "side": [144, 145, 236, 362, 413, 414, 415, 416, 417, 419, 420, 421, 424, 538, 568, 569, 619, 810, 893], "inclus": [144, 145, 236, 362, 413, 414, 415, 416, 417, 419, 420, 421, 459, 460, 538, 568, 569, 619, 850, 851], "datapoint": [144, 236, 568, 619], "mondai": [144, 236, 339, 568, 619, 728], "date_rang": [144, 209, 236, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 568, 619, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731], "30m": [144, 236, 331, 336, 568, 619, 720, 725], "time_min": [144, 236, 568, 619], "time_max": [144, 236, 568, 619], "boundari": [144, 236, 294, 295, 296, 538, 568, 619, 678, 679, 680, 893], "time_count": [144, 236, 568, 619], "_lower_boundari": [144, 236, 568, 619], "_upper_boundari": [144, 236, 568, 619], "lower_bound": [144, 236, 538, 568, 619], "upper_bound": [144, 236, 283, 538, 568, 619], "time_agg_list": [144, 236, 568, 619], "idx": [144, 157, 236, 283, 568, 619, 665, 813, 893], "arang": [144, 208, 218, 236, 568, 613, 619], "2i": [144, 236, 568, 619], "3i": [144, 236, 568, 619], "a_agg_list": [144, 236, 568, 619], "rollinggroupbi": [145, 236], "dynamic_groupbi": [145, 236, 569, 619], "groupby_dynam": [145, 236, 569, 619], "45": [145, 236, 312, 331, 336, 441, 447, 569, 619, 697, 720, 725, 832, 838], "48": [145, 236, 569, 619], "18": [145, 236, 304, 331, 336, 337, 340, 361, 374, 538, 569, 586, 619, 726, 729], "19": [145, 159, 236, 331, 569, 574, 619, 720, 725], "43": [145, 236, 304, 538, 569, 619], "strptime": [145, 236, 334, 569, 619, 723], "2d": [145, 201, 236, 569, 619, 698], "sum_a": [145, 236, 569, 619], "min_a": [145, 236, 569, 619], "max_a": [145, 236, 569, 619], "to_list": [145, 236, 283, 569, 619, 665, 893], "seed": [146, 184, 236, 358, 423, 429, 538, 748, 809, 820, 893], "seed_1": [146, 236, 358, 538, 748, 893], "seed_2": [146, 236, 358, 538, 748, 893], "seed_3": [146, 236, 358, 538, 748, 893], "hash": [146, 236, 538, 893], "u64": [146, 236, 358, 408, 538, 586, 619, 748, 893], "10783150408545073287": [146, 236], "1438741209321515184": [146, 236], "10047419486152048166": [146, 236], "2047317070637311557": [146, 236], "last": [147, 159, 174, 192, 195, 206, 230, 236, 257, 259, 268, 281, 305, 313, 329, 338, 461, 472, 528, 538, 574, 599, 602, 604, 615, 619, 637, 640, 650, 663, 688, 698, 718, 727, 852, 865, 893], "_except_": [147, 195, 236], "ab": [147, 195, 213, 236, 514, 517, 538, 608, 619, 893], "grown": [149, 236], "baz": [150, 151, 174, 207, 236, 459, 461, 572, 605, 619, 852], "intermedi": [151, 236, 572, 619, 751, 893], "linear": [151, 176, 228, 236, 262, 361, 387, 405, 417, 493, 494, 520, 538, 572, 587, 619, 644, 751, 791, 803, 893], "mask": [152, 154, 236, 263, 286, 287, 363, 365, 373, 440, 442, 538, 645, 667, 668, 743, 754, 757, 767, 788, 789, 812, 831, 833, 884, 893], "buffer_s": [156, 236], "500": [156, 236, 561, 619, 707, 709, 715, 721, 799, 800, 802, 893], "iter": [156, 157, 182, 183, 186, 205, 213, 215, 236, 305, 523, 538, 592, 608, 619, 688, 893], "veri": [156, 205, 236, 552, 619, 681, 893], "fit": [156, 190, 208, 236, 428, 538, 818, 819, 893], "speedup": [156, 236], "signific": [156, 236], "4x": [156, 236], "disabl": [156, 236], "export": [156, 157, 183, 199, 236, 511], "materialis": [156, 157, 182, 183, 236], "10000": [157, 236, 467], "iter_row": [157, 182, 183, 236], "17_500": [157, 236], "2023": [157, 236, 312, 697], "klmnoopqrstuvwxyz": [157, 236], "__name__": [157, 236], "7500": [157, 236], "recordbatch": [157, 236], "15_000": [157, 236], "record_batch": [157, 236], "to_arrow": [157, 236, 893], "to_batch": [157, 236], "date32": [157, 236], "large_str": [157, 197, 236], "15000": [157, 236], "2500": [157, 236], "left_on": [158, 159, 236, 573, 574, 619], "right_on": [158, 159, 236, 573, 574, 619], "joinstrategi": [158, 236, 573, 619], "suffix": [158, 159, 186, 213, 216, 236, 289, 368, 370, 371, 372, 411, 444, 464, 538, 573, 574, 592, 608, 609, 619, 670, 835, 855], "_right": [158, 159, 236, 573, 574, 619], "outer": [158, 236, 573, 619], "semi": [158, 236, 573, 619], "anti": [158, 236, 573, 619, 812, 813, 893], "cross": [158, 236, 573, 619], "join_asof": [158, 236, 573, 619], "stringcach": [158, 236, 547], "other_df": [158, 236, 573, 619], "by_left": [159, 236, 574, 619], "by_right": [159, 236, 574, 619], "asofjoinstrategi": [159, 236, 574, 619], "allow_parallel": [159, 236, 573, 574, 619], "force_parallel": [159, 236, 573, 574, 619], "asof": [159, 236, 574, 619], "asof_join": [159, 236], "search": [159, 236, 574, 619], "greater": [159, 236, 433, 461, 538, 574, 619, 824, 852, 893], "numer": [159, 236, 294, 295, 296, 362, 409, 428, 538, 547, 574, 619, 678, 679, 680, 765, 811, 818, 893], "distanc": [159, 236, 574, 619], "plan": [159, 160, 236, 550, 555, 556, 566, 573, 574, 588, 595, 611, 619], "gdp": [159, 236, 574, 619], "2016": [159, 236, 574, 619], "2017": [159, 236, 574, 619], "2018": [159, 236, 574, 619], "2019": [159, 236, 574, 619], "record": [159, 236, 574, 619], "jan": [159, 236, 574, 619], "1st": [159, 236, 574, 619], "4164": [159, 236, 574, 619], "4411": [159, 236, 574, 619], "4566": [159, 236, 574, 619], "4696": [159, 236, 574, 619], "popul": [159, 236, 574, 619], "12th": [159, 236, 574, 619], "82": [159, 236, 574, 619], "66": [159, 236, 574, 619, 803, 893], "83": [159, 236, 574, 619], "52": [159, 213, 236, 422, 538, 574, 608, 619], "request": [160, 236], "small": [160, 236, 331, 435, 436, 538, 561, 619], "describe_plan": [160, 236, 619], "unoptim": [160, 236, 556, 619], "describe_optimized_plan": [160, 236, 556, 619], "show_graph": [160, 236, 619], "un": [160, 236], "graphviz": [160, 236, 595, 619], "advis": [160, 236], "axi": [162, 163, 165, 167, 194, 236, 582, 619], "null_strategi": [163, 194, 236], "nullstrategi": [163, 194, 236], "spam": [163, 236], "id_var": [165, 236, 582, 619], "value_var": [165, 236, 582, 619], "variable_nam": [165, 236, 582, 619], "value_nam": [165, 236, 582, 619], "unpivot": [165, 236, 582, 619], "leav": [165, 236, 582, 619], "identifi": [165, 206, 236, 582, 604, 619], "massag": [165, 236, 582, 619], "measur": [165, 236, 582, 619], "merg": [166, 236, 583, 619], "caller": [166, 236, 283, 578, 583, 613, 619], "respons": [166, 236, 583, 619], "One": [169, 174, 236, 893], "what": [169, 236, 875, 883, 893], "struct": [169, 186, 204, 207, 213, 236, 283, 460, 461, 482, 497, 498, 499, 538, 592, 605, 608, 619, 665, 851, 852], "pack": [169, 236], "expr_unique_subset": [169, 236], "df_nuniqu": [169, 236], "df_agg_nuniqu": [169, 236], "simpl": [169, 236], "predict": [171, 174, 177, 209, 236], "k": [171, 236, 292, 375, 478, 538, 674, 770, 878, 893], "l": [171, 236], "pearson": [172, 236, 375, 433, 519, 538, 770, 824, 893], "correl": [172, 236, 519, 524], "coeffici": [172, 236, 433, 538, 824, 893], "corrcoef": [172, 236], "func": [173, 236, 585, 619, 628, 893], "offer": [173, 236, 585, 619], "recommend": [173, 236], "fulli": [173, 236, 464, 855], "advantag": [173, 236], "cast_str_to_int": [173, 236, 585, 619], "col_nam": [173, 236, 585, 619], "tdf": [173, 236, 585, 619], "aggregate_fn": [174, 236], "pivotagg": [174, 236], "sort_column": [174, 236], "well": [174, 236, 362, 538], "predefin": [174, 236], "transpos": [174, 236], "discoveri": [174, 236], "interpol": [176, 228, 236, 352, 387, 405, 417, 520, 538, 587, 619, 791, 803, 893], "rollinginterpolationmethod": [176, 228, 236, 405, 417, 520, 538, 587, 619, 791, 803, 893], "midpoint": [176, 228, 236, 405, 417, 520, 538, 587, 619, 791, 803, 893], "subsequ": [177, 236], "old": [178, 236, 589, 619], "new_col": [179, 236], "val": [181, 236, 292, 477, 538, 590, 619, 674], "by_pred": [182, 236], "accord": [182, 236, 703], "mutual": [182, 236], "exclus": [182, 236], "addition": [182, 236], "clariti": [182, 236], "anyth": [182, 236], "toomanyrowsreturn": [182, 236, 547], "norowsreturn": [182, 236, 547], "inherit": [182, 236], "rowsexcept": [182, 236, 547], "frac": [184, 236, 344, 345, 346, 423, 433, 478, 538, 735, 736, 737, 809, 824, 878, 893], "with_replac": [184, 236, 423, 538, 809, 893], "shuffl": [184, 218, 236, 423, 538, 613, 809, 893], "modul": [184, 236, 423, 429, 537, 538, 809, 820, 893], "polarsexprtyp": [186, 213, 236, 523, 592, 608, 619], "pythonliter": [186, 213, 236, 523, 592, 608, 619, 740, 893], "more_expr": [186, 213, 236, 523, 592, 608, 619], "named_expr": [186, 213, 236, 523, 592, 608, 619], "posit": [186, 213, 236, 453, 523, 592, 608, 619, 844, 893], "threshold": [186, 236, 592, 619], "instanti": [186, 213, 236, 592, 608, 619], "set_auto_structifi": [186, 213, 236, 592, 608, 619], "integer_dtyp": [186, 236, 592, 619], "is_odd": [186, 236, 592, 619], "_is_odd": [186, 236, 592, 619], "shift_and_fil": [188, 236, 538, 619, 893], "shift": [189, 236, 264, 306, 401, 427, 493, 538, 594, 619, 646, 690, 787, 817, 893], "shrink": [190, 236, 428, 538, 818, 819, 893], "hold": [190, 236, 492], "nulls_last": [192, 236, 257, 259, 435, 538, 599, 619, 637, 640, 893], "ddof": [193, 210, 236, 438, 483, 519, 524, 525, 529, 538, 600, 606, 619, 828, 882, 893], "deviat": [193, 236, 345, 419, 438, 525, 538, 600, 619, 736, 828, 893], "degre": [193, 210, 236, 438, 483, 519, 524, 538, 828, 882, 893], "freedom": [193, 210, 236, 438, 483, 519, 524, 538, 828, 882, 893], "816497": [193, 236], "21": [194, 236, 508], "16a": [194, 236], "27b": [194, 236], "38c": [194, 236], "nth": [196, 236, 461, 474, 538, 603, 619, 852, 867, 893], "mostli": [197, 236, 353, 538], "categoricaltyp": [197, 236], "as_seri": [198, 236], "fruit": [198, 236, 403, 411, 444, 462, 470, 538, 835, 853], "car": [198, 236, 403, 411, 470, 538], "beetl": [198, 236, 403, 411, 470, 538], "audi": [198, 236, 403, 411, 470, 538], "28": [198, 236, 340, 729], "300": [198, 236, 799, 800, 802, 893], "hot": [200, 236], "re": [201, 236, 511], "ll": [201, 236], "numpy_arrai": [201, 236], "date_as_object": [202, 236], "sent": [202, 236, 875, 893], "datetime64": [202, 236], "pandas_df": [202, 236], "three": [204, 236, 424, 526, 538], "four": [204, 236, 526], "five": [204, 236], "num": [204, 236, 362, 365, 467, 538], "include_head": [205, 236], "header_nam": [205, 236], "column_nam": [205, 236], "perhap": [205, 236], "column_2": [205, 236], "name_gener": [205, 236, 283, 665], "base_nam": [205, 236], "my_column_": [205, 236], "my_column_0": [205, 236], "my_column_1": [205, 236], "my_column_2": [205, 236], "uniquekeepstrategi": [206, 236, 604, 619], "decompos": [207, 236, 605, 619], "t_a": [207, 236, 605, 619], "t_b": [207, 236, 605, 619], "t_c": [207, 236, 605, 619], "t_d": [207, 236, 605, 619], "womp": [207, 236, 605, 619], "t_": [207, 236, 605, 619], "t_struct": [207, 236, 605, 619], "step": [208, 236, 488], "unstackdirect": [208, 236], "much": [208, 236, 282, 305, 538, 664, 688, 893], "pivot": [208, 236], "phase": [208, 236], "subject": [208, 236], "ascii_uppercas": [208, 236], "col1": [208, 236], "col2": [208, 236], "h": [208, 236, 334, 428, 538], "col1_0": [208, 236], "col1_1": [208, 236], "col1_2": [208, 236], "col2_0": [208, 236], "col2_1": [208, 236], "col2_2": [208, 236], "time_column": [209, 236], "frequenc": [209, 236], "forward_fil": [209, 236, 301, 304, 538], "06": [209, 236, 311, 312, 318, 330, 342, 720, 728], "varianc": [210, 236, 346, 375, 421, 483, 529, 538, 606, 619, 737, 770, 807, 882, 893], "grow": [211, 236], "is_not": [213, 236, 538, 608, 619], "not_c": [213, 236, 608, 619], "diff": [213, 236, 314, 317, 320, 322, 324, 327, 333, 538, 608, 619, 699, 702, 708, 710, 713, 716, 722, 893], "_diff": [213, 236, 608, 619], "row_nr": [214, 236, 610, 619, 813, 893], "complet": [216, 875, 893], "idiomat": 216, "_sum": 216, "_tail_sum": 216, "bar_sum": 216, "bar_tail_sum": 216, "sub": [218, 289, 290, 444, 462, 670, 671, 835, 853], "triangl": [218, 613], "group_df": [218, 613], "nr": [221, 230, 614, 615], "maxim": [223, 255, 538, 635, 893], "833333": 224, "minim": [226, 256, 261, 428, 538, 636, 643, 778, 818, 893], "overview": [236, 538, 547, 619, 893], "public": [236, 538, 547, 619, 893], "variou": [236, 538, 619, 893], "entri": 236, "prevent": [236, 303, 304, 374, 471, 538, 686, 687, 864, 893], "come": [236, 375, 538, 548, 618, 770, 893], "behavior": [236, 248, 282, 487, 514, 517, 538, 664], "mydatafram": 236, "notic": [236, 893], "df4": 236, "df5": 236, "df6": 236, "drop_in_plac": 236, "drop_nul": [236, 308, 538, 619, 893], "estimated_s": [236, 893], "explod": [236, 355, 538, 619, 893], "find_idx_by_nam": 236, "fold": [236, 391, 491, 497, 498, 521, 527], "frame_equ": [236, 331, 336], "get_column": [236, 527], "groupby_rol": [236, 413, 414, 415, 416, 417, 419, 420, 421, 538, 568, 619], "hash_row": 236, "hstack": 236, "insert_at_idx": 236, "is_dupl": [236, 538, 893], "is_empti": [236, 893], "is_uniqu": [236, 538, 893], "iter_slic": 236, "melt": [236, 619], "merge_sort": [236, 619], "n_uniqu": [236, 538, 612, 893], "pearson_corr": 236, "pipe": [236, 619], "quantil": [236, 417, 538, 619, 803, 893], "replace_at_idx": 236, "shrink_to_fit": [236, 893], "take_everi": [236, 538, 619, 893], "to_dict": 236, "to_numpi": [236, 383, 538, 893], "to_panda": [236, 893], "to_struct": [236, 468, 469], "unnest": [236, 460, 461, 619, 851, 852], "unstack": 236, "upsampl": 236, "var": [236, 538, 619, 893], "write_avro": 236, "write_ipc": 236, "write_json": [236, 588, 619], "write_parquet": 236, "94": [243, 538], "confus": [245, 368, 370, 538], "tt": [245, 538], "tf": [245, 246, 538], "ff": [245, 246, 538], "upcast": [247, 538], "skip_nul": [248, 538, 628, 893], "pass_nam": [248, 538], "assum": [248, 538, 578, 613, 619], "a_times_2": [248, 538], "invers": [249, 250, 251, 252, 253, 254, 538, 629, 630, 631, 632, 633, 634, 893], "cosin": [249, 250, 297, 298, 383, 538, 629, 630, 682, 683, 893], "570796": [249, 251, 538, 629, 631, 893], "hyperbol": [250, 252, 254, 298, 432, 476, 538, 630, 632, 634, 683, 823, 869, 893], "sine": [251, 252, 383, 431, 432, 538, 631, 632, 822, 823, 893], "881374": [252, 538, 632, 893], "tangent": [253, 254, 475, 476, 538, 633, 634, 868, 869, 893], "785398": [253, 538, 633, 893], "arg_sort": [259, 538, 640, 893], "sublist": [260, 261, 263, 264, 267, 268, 269, 270, 271, 278, 281, 282, 642, 643, 645, 646, 649, 650, 651, 652, 653, 660, 663, 664, 665, 759, 893], "membership": [263, 645], "null_behavior": [264, 306, 538, 646, 690, 893], "nullbehavior": [264, 306, 538, 646, 690, 893], "th": [264, 306, 433, 538, 646, 690, 824, 893], "against": [265, 619, 647, 899], "blindli": [265, 647], "worth": [265, 647], "enough": [265, 433, 538, 647, 824, 893], "alreadi": [265, 305, 538, 647, 688, 893], "concat_list": [265, 503, 647], "rank": [265, 503, 524, 538, 647, 893], "taken": [278, 458, 473, 538, 660, 849], "null_on_oob": [282, 664], "anoth": [282, 305, 310, 337, 436, 538, 609, 619, 628, 664, 688, 695, 726, 811, 893], "cheaper": [282, 664], "n_field_strategi": [283, 665], "tostructstrategi": [283, 665], "first_non_nul": [283, 665], "max_width": [283, 665], "field_0": [283, 665], "field_1": [283, 665], "field_n": [283, 665], "know": [283, 452, 843, 875, 883, 893], "incorrectli": 283, "downstream": [283, 425, 538, 814, 893], "advic": 283, "col_name_": [283, 665], "col_name_0": [283, 665], "col_name_1": [283, 665], "col_name_2": [283, 665], "substr": [286, 289, 290, 440, 444, 454, 455, 459, 460, 461, 462, 667, 670, 671, 831, 835, 845, 846, 850, 851, 852, 853], "transferencod": [287, 288, 442, 443, 668, 669, 833, 834], "strict": [287, 291, 440, 442, 464, 538, 668, 672, 811, 831, 833, 855, 893], "hex": [287, 288, 442, 443, 453, 668, 669, 833, 834, 844], "base64": [287, 288, 442, 443, 668, 669, 833, 834], "prefix": [290, 462, 467, 538, 671, 853, 858], "due": [291, 538, 672, 893], "overflow": [291, 303, 304, 471, 538, 672, 686, 687, 864, 893], "categoricalord": [292, 674], "lexic": [292, 674], "min_val": [294, 296, 538, 678, 680, 893], "max_val": [294, 295, 538, 678, 679, 893], "foo_clip": [294, 295, 296, 538], "clip": [295, 296, 538, 679, 680, 893], "543081": [298, 538, 683, 893], "cumul": [300, 301, 302, 303, 304, 497, 498, 499, 538, 684, 685, 686, 687, 893], "a_revers": [300, 301, 302, 303, 304, 384, 411, 470, 538], "value_cummax": [301, 538], "value_cummax_all_fil": [301, 538], "uint16": [303, 304, 471, 538, 686, 687, 864, 893], "value_cumsum": [304, 538], "value_cumsum_all_fil": [304, 538], "min_period": [305, 344, 345, 346, 412, 413, 414, 415, 416, 417, 419, 420, 421, 538, 688, 735, 736, 737, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "slide": [305, 538, 688, 893], "realli": [305, 538, 688, 893], "complex": [305, 478, 538, 688, 878, 893], "visit": [305, 538, 688, 893], "44": [307, 538], "drop_nan": [309, 538, 893], "tu": [310, 312, 315, 335, 340, 695, 696, 697, 700, 724, 729], "lose": [310, 695], "2001": [310, 313, 315, 316, 318, 323, 325, 328, 329, 330, 331, 332, 335, 336, 338, 339, 340, 342, 464, 695, 698, 700, 701, 704, 705, 706, 707, 709, 711, 712, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 727, 728, 729, 731, 855], "tu_m": [310, 695], "tu_n": [310, 695], "tz": [311, 337, 341, 696, 726, 730], "with_time_zon": [311, 464, 696, 855], "timestamp": [311, 508, 696], "unset": [311, 696], "london_timezon": 311, "utc": [311, 341, 464, 696, 730, 855], "europ": [311, 337, 341, 696, 730], "london": [311, 341, 696, 730], "amsterdam": [311, 337], "london_to_amsterdam": 311, "gmt": [311, 341, 696, 730], "cet": [311, 337], "bst": [311, 341, 696, 730], "cest": [311, 337], "tm": [312, 697], "naiv": [312, 337, 697, 726], "compon": [312, 332, 464, 500, 501, 502, 697, 721], "resolv": 312, "dtm": [312, 697], "59": [312, 323, 332, 501, 697, 712, 721], "456000": [312, 697], "101000": 312, "456": [312, 697, 873, 893], "101": [312, 453, 844], "d1": 312, "d2": 312, "d3": 312, "extract": [313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 338, 339, 342, 447, 448, 698, 699, 701, 702, 703, 707, 708, 709, 710, 712, 713, 714, 715, 716, 718, 719, 721, 722, 727, 728, 731, 838, 839], "weekdai": [313, 329], "day_of_month": [313, 329, 339], "ordinal_dai": [313, 339], "day_of_year": [313, 329, 339], "days_diff": 314, "epochtimeunit": [315, 700], "unix": [315, 508, 700], "epoch_n": [315, 700], "epoch_": [315, 700], "978307200000000": [315, 335, 700, 724], "978307200": [315, 700], "978393600000000": [315, 335, 700, 724], "978393600": [315, 700], "978480000000000": [315, 335, 700, 724], "978480000": [315, 700], "hours_diff": 317, "iso": [318, 338, 339, 703, 727, 728], "correspond": [318, 406, 538, 703, 792, 893], "2006": [318, 328, 717], "180": [318, 330, 342], "2002": [318, 328, 330, 342, 717, 731], "2004": [318, 328, 717], "2005": [318, 328, 717], "1001": [319, 320, 322, 327], "002": [319, 320, 322, 327, 502, 708, 710, 716], "2000": [319, 328, 717], "003": [319, 320, 322, 327], "3000": 319, "997": [319, 320, 322, 327], "997000": 319, "998": [319, 320, 322, 327], "998000": 319, "999": [319, 320, 322, 327], "999000": 319, "microseconds_diff": 320, "milliseconds_diff": 322, "minutes_diff": 324, "1440": [324, 713], "nanoseconds_diff": 327, "1000000": [327, 467, 716], "leap": [328, 717], "account": [328, 344, 345, 346, 538, 717, 735, 736, 737, 893], "minu": [328, 717], "dictat": [328, 717], "date_plus_1i": [328, 717], "1y2mo": [328, 717], "date_min": 328, "1998": [328, 717], "1999": [328, 717], "2003": [328, 508, 717], "ordin": [329, 406, 538, 718, 792, 893], "366": [329, 718], "half": [331, 344, 345, 346, 538, 720, 735, 736, 737, 893], "eg": [331, 464], "225": [331, 336], "to_fram": [331, 336, 464, 468, 469, 812, 813, 851, 852, 855, 893], "10m": [331, 336, 720, 725], "milli": [332, 721], "micro": [332, 721], "456789": 332, "654321": 332, "111110": 332, "765431": 332, "sec": 332, "11111": 332, "seconds_diff": 333, "timestamp_n": [335, 724], "timestamp_m": 335, "978307200000": 335, "978393600000": 335, "978480000000": 335, "deprec": [337, 349, 538, 726, 739, 893], "favor": [337, 726], "53": [338, 727], "sundai": [339, 728], "incorrect": [340, 425, 538, 613, 729, 814, 893], "tu_u": [340, 729], "32971": [340, 729], "32974": [340, 729], "32976": [340, 729], "718281828459045": [343, 380, 538, 733, 773, 893], "formula": [343, 538, 733, 893], "pk": [343, 538, 733, 893], "459148": [343, 538], "754888": [343, 538], "span": [344, 345, 346, 538, 735, 736, 737, 893], "half_lif": [344, 345, 346, 538, 735, 736, 737, 893], "exponenti": [344, 345, 346, 348, 538, 735, 736, 737, 738, 893], "weight": [344, 345, 346, 412, 413, 414, 415, 416, 417, 419, 420, 421, 433, 538, 735, 736, 737, 798, 799, 800, 801, 802, 803, 805, 806, 807, 824, 893], "averag": [344, 406, 538, 735, 792, 893], "decai": [344, 345, 346, 538, 735, 736, 737, 893], "term": [344, 345, 346, 449, 452, 538, 735, 736, 737, 840, 843, 893], "mass": [344, 345, 346, 538, 735, 736, 737, 893], "gamma": [344, 345, 346, 538, 735, 736, 737, 893], "foral": [344, 345, 346, 538, 735, 736, 737, 893], "geq": [344, 345, 346, 538, 735, 736, 737, 893], "theta": [344, 345, 346, 538, 735, 736, 737, 893], "life": [344, 345, 346, 538, 735, 736, 737, 893], "exp": [344, 345, 346, 538, 735, 736, 737, 893], "ln": [344, 345, 346, 538, 735, 736, 737, 893], "smooth": [344, 345, 346, 538, 735, 736, 737, 893], "factor": [344, 345, 346, 477, 538, 735, 736, 737, 877, 893], "leq": [344, 345, 346, 538, 735, 736, 737, 893], "begin": [344, 345, 346, 446, 538, 735, 736, 737, 837, 893], "imbal": [344, 345, 346, 538, 735, 736, 737, 893], "ew": [344, 345, 346, 538, 735, 736, 737, 893], "w_i": [344, 345, 346, 538, 735, 736, 737, 893], "recurs": [344, 345, 346, 538, 735, 736, 737, 893], "y_0": [344, 345, 346, 538, 735, 736, 737, 893], "x_0": [344, 345, 346, 538, 735, 736, 737, 893], "y_t": [344, 345, 346, 538, 735, 736, 737, 893], "y_": [344, 345, 346, 538, 735, 736, 737, 893], "x_t": [344, 345, 346, 538, 735, 736, 737, 893], "observ": [344, 345, 346, 538, 735, 736, 737, 893], "428571": [344, 538], "bia": [345, 346, 375, 418, 433, 538, 736, 737, 770, 804, 824, 893], "unbias": [345, 346, 538, 736, 737, 893], "963624": [345, 538, 736, 893], "928571": [346, 538, 737, 893], "frozenset": [347, 492, 504, 538], "wildcard": [347, 485, 492, 497, 498, 504, 506, 521, 538], "regex": [347, 389, 440, 441, 444, 446, 447, 454, 455, 462, 492, 504, 514, 517, 527, 538, 831, 832, 835, 837, 838, 845, 846, 853], "aa": [347, 504, 538], "ba": [347, 504, 538], "cc": [347, 504, 538], "718282": [348, 538], "389056": [348, 538], "54": [348, 538], "59815": [348, 538], "expand": [349, 388, 389, 409, 538, 739, 893], "favour": [349, 538, 739, 893], "arr": [349, 503, 531, 538, 739, 875, 885, 893], "exprlistnamespac": [349, 355, 538], "exprstringnamespac": [349, 538], "extrem": [350, 538, 740, 893], "group_col": [353, 484, 538], "g1": [353, 400, 484, 538], "g2": [353, 400, 484, 538], "lt": [353, 484, 538], "gte": [353, 484, 538], "9774092659964970114": [358, 538], "13614470193936745724": [358, 538], "1101441246220388612": [358, 538], "11638928888656214026": [358, 538], "13382926553367784577": [358, 538], "cumsum": [360, 538, 571, 619, 893], "interpolationmethod": [361, 538, 751, 893], "regrid": [361, 538], "grid": [361, 538], "df_original_grid": [361, 538], "grid_point": [361, 538], "df_new_grid": [361, 538], "conflat": [362, 538], "finit": [364, 524, 538, 756, 893], "primit": [366, 538, 875, 893], "optional_memb": [366, 538, 759, 893], "infinit": [367, 538, 760, 893], "_isnan": [368, 538], "b_isnan": [368, 538], "negat": [369, 538], "_is_not_nan": [370, 538], "b_is_not_nan": [370, 538], "_not_nul": [371, 538], "a_not_nul": [371, 538], "b_not_nul": [371, 538], "_isnul": [372, 538], "a_isnul": [372, 538], "b_isnul": [372, 538], "undo": [374, 393, 538], "duplicateerror": [374, 538, 547], "occurr": [374, 538], "333333": [374, 421, 538, 787, 807, 893], "fisher": [375, 433, 538, 770, 824, 893], "fourth": [375, 538, 770, 893], "central": [375, 433, 538, 770, 824, 893], "definit": [375, 538, 770, 893], "subtract": [375, 538, 770, 893], "distribut": [375, 433, 538, 770, 824, 893], "elimin": [375, 538, 770, 893], "bias": [375, 433, 538, 770, 824, 893], "scipi": [375, 433, 538, 770, 824, 893], "stat": [375, 433, 538, 770, 824, 893], "153061": [375, 538], "logarithm": [380, 381, 538, 773, 774, 893], "584963": [380, 538], "30103": [381, 538], "60206": [381, 538], "lowest": [382, 538], "9223372036854775808": [382, 538], "agg_list": [383, 538], "elementwis": [383, 412, 413, 414, 415, 416, 417, 419, 420, 421, 485, 486, 538, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "third": [383, 538], "parti": [383, 538], "book": [383, 538], "argmax": [383, 538], "_revers": [384, 411, 470, 538], "b_revers": [384, 411, 470, 538], "computeerror": [390, 547], "keep_nam": [393, 538], "poison": [397, 398, 538, 783, 784, 893], "nanmax": [397, 398, 538, 783, 784, 893], "wherea": [397, 398, 538, 570, 577, 619, 783, 784, 893], "subgroup": [400, 538], "postgr": [400, 538], "max_by_group": [400, 538], "recent": [401, 538, 787, 893], "percent": [401, 538, 787, 893], "090909": [401, 538], "expon": [402, 538], "power": [402, 538], "reverse_": [403, 538], "reverse_a": [403, 538], "reverse_fruit": [403, 538], "reverse_b": [403, 538], "reverse_car": [403, 538], "rankmethod": [406, 538, 792, 893], "ti": [406, 538, 792, 893], "appropri": [406, 538, 792, 893], "competit": [406, 538, 792, 893], "highest": [406, 481, 524, 538, 792, 893], "immedi": [406, 526, 538, 792, 893], "64bit": [408, 538, 794, 893], "safe": [408, 538, 794, 875, 893], "coerc": [409, 538], "dim": [410, 538, 796, 893], "flat": [410, 538, 796, 893], "fruits_revers": [411, 470, 538], "cars_revers": [411, 470, 538], "window_s": [412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 538, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 893], "rolling_min": [412, 538, 798, 893], "rolling_max": [412, 538, 798, 893], "rolling_mean": [412, 538, 798, 893], "rolling_sum": [412, 538, 798, 893], "multipli": [412, 413, 414, 415, 416, 417, 419, 420, 421, 538, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "358899": [412, 538], "041452": [412, 538], "567764": [412, 538], "travers": [413, 414, 416, 419, 420, 421, 538, 799, 800, 802, 805, 806, 807, 893], "vector": [413, 414, 416, 419, 420, 421, 538, 799, 800, 802, 805, 806, 807, 893], "5h": [413, 414, 415, 416, 417, 419, 420, 421, 538], "33": [417, 422, 492, 538, 803, 893], "skew": [418, 538, 804, 893], "527525": [419, 538, 805, 893], "digit": [422, 467, 538, 808, 832, 858, 893], "17": [422, 508, 538, 682, 720, 893], "searchsortedsid": [424, 538, 810, 893], "maintain": [424, 479, 538, 596, 597, 619, 810, 879, 893], "leftmost": [424, 538, 810, 893], "rightmost": [424, 538, 810, 893], "six": [424, 538], "code": [425, 538, 576, 619, 814, 893], "care": [425, 538, 814, 893], "extrema": [428, 538, 818, 893], "112": [428, 538], "129": [428, 538], "i8": [428, 538, 690, 797, 893], "8589934592": [428, 538], "1073741824": [428, 538], "content": [429, 482, 538, 820, 893], "175201": [432, 538, 823, 893], "about": [433, 538, 824, 893], "unimod": [433, 538, 824, 893], "skewtest": [433, 538, 824, 893], "speak": [433, 538, 824, 893], "g_1": [433, 538, 824, 893], "m_3": [433, 538, 824, 893], "m_2": [433, 538, 824, 893], "m_i": [433, 538, 824, 893], "sum_": [433, 538, 824, 893], "texttt": [433, 538, 824, 893], "k_3": [433, 538, 824, 893], "k_2": [433, 538, 824, 893], "sqrt": [433, 538, 824, 893], "343622": [433, 538], "larg": [435, 436, 538], "larger": [435, 524, 538, 596, 597, 619], "414214": [437, 538, 827, 893], "ends_with": [440, 462, 853], "crab": [440, 831], "dog": [440, 465, 466, 494, 831], "rab": [440, 831], "success": [441, 447, 832, 838], "overlap": [441, 447, 832, 838], "captur": [441, 446, 447, 832, 837, 838], "123": [441, 447, 455, 832, 838, 846, 873, 893], "bla": [441, 447, 832, 838], "asd": [441, 447, 832, 838], "678": [441, 447, 832, 838], "910t": [441, 447, 832, 838], "r": [441, 445, 446, 447, 454, 832, 836, 837, 838, 845], "count_digit": 441, "666f6f": [443, 834], "626172": [443, 834], "mango": [444, 462, 835, 853], "go": [444, 835], "has_suffix": 444, "group_index": [446, 837], "vote": [446, 837], "ballon_dor": [446, 837], "candid": [446, 837], "messi": [446, 837], "ref": [446, 837], "candidat": [446, 837], "jorginho": [446, 837], "ronaldo": [446, 837], "w": [446, 837], "extracted_nr": 447, "910": [447, 838], "json_path": [448, 839], "jsonpath": [448, 839], "regardless": [448, 839], "json_val": [448, 839], "n_char": [449, 840], "caf\u00e9": [449, 452, 840, 843], "345": [449, 452, 840, 843], "\u6771\u4eac": [449, 452, 840, 843], "nchar": [449, 452], "fillchar": [450, 456, 841, 847], "justifi": [450, 456, 841, 847], "pad": [450, 456, 467, 841, 847, 858], "cow": [450, 456, 841, 847], "monkei": [450, 456, 841, 847], "hippopotamu": [450, 456, 841, 847], "strip": [451, 457, 842, 848], "whitespac": [451, 457, 463, 842, 848, 854], "tworld": [451, 463, 842, 854], "wod": [451, 457, 842, 848], "rld": [451, 842], "text": [452, 454, 455, 843], "radix": [453, 844], "110": [453, 844], "010": [453, 844], "fa1e": [453, 844], "ff00": [453, 844], "cafe": [453, 844], "64030": [453, 844], "65280": [453, 844], "51966": [453, 844], "replace_al": [454, 845], "123abc": [454, 845], "abc456": [454, 845], "abcabc": [455, 846], "123a123": [455, 846], "bc": [455, 527, 846], "trail": [457, 463, 848, 854], "worl": [457, 463, 848, 854], "subslic": [458, 849], "pear": [458, 849], "papaya": [458, 849], "dragonfruit": [458, 849], "s_slice": 458, "ear": [458, 849], "aya": [458, 849], "uit": [458, 849], "ya": [458, 849], "onf": [458, 849], "a_1": [460, 851, 872, 893], "d_4": [460, 851], "rename_field": [460, 461, 851, 852], "first_part": [460, 461, 851, 852], "second_part": [460, 461, 851, 852], "remaind": [461, 852], "app": [462, 853], "has_prefix": 462, "polarstemporaltyp": [464, 855], "tz_awar": [464, 855], "strftime": [464, 855], "zulu": [464, 855], "iso8601": [464, 855], "yet": [464, 855], "anywher": [464, 855], "3f": 464, "sun": [464, 855], "34": [464, 855], "lowercas": [465, 856], "variant": [465, 466], "uppercas": [466, 857], "100000": 467, "0010": 467, "0001": 467, "00000": 467, "00001": 467, "my_struct": [468, 469, 526], "anymor": 469, "panicexcept": [469, 547], "761594": [476, 538, 869, 893], "replic": [477, 538, 877, 893], "vals_phys": [477, 538], "largest": [478, 538, 878, 893], "smallest": [478, 538, 878, 893], "bottom_k": [478, 538], "value_count": [480, 538, 893], "9223372036854775807": [481, 538], "multithread": [482, 538], "columnwis": [485, 486], "AND": 485, "bitwis": [485, 486], "returns_scalar": 487, "Be": 488, "argsort": [489, 538, 893], "hamburg": 492, "lag": 493, "mimic": 493, "a_lag_": 493, "a_rol": 493, "plai": 494, "swim": 494, "walk": 494, "full_sent": 494, "covari": 496, "acc": [497, 498, 506, 521], "intoexpr": [497, 506], "include_init": 497, "accumul": [497, 498, 506, 521], "fn": [497, 498, 506, 521], "new_valu": [497, 498, 506, 521], "simpli": [497, 506], "cumreduc": 497, "across": [499, 527], "syntact": [499, 504, 505, 509, 520, 523, 527, 827, 893], "sugar": [499, 504, 505, 509, 520, 523, 527, 827, 893], "cumfold": 499, "999999": 501, "add_week": 502, "add_dai": 502, "add_second": 502, "add_millisecond": 502, "add_hour": 502, "add_millisec": 502, "ond": 502, "eval": 503, "mathemat": 503, "a_b_doubl": 503, "fstring": 507, "placehold": 507, "hello_": 507, "_world": 507, "foo_": 507, "_bar_": 507, "foo_a_bar_1": 507, "foo_b_bar_2": 507, "foo_c_bar_3": 507, "epoch": [508, 696], "timestep": 508, "1666683077": 508, "1666683099": 508, "39": 508, "12345": [508, 675, 745, 808, 893], "12346": 508, "agg_group": [509, 538], "allow_object": 512, "unknown": 512, "valueexcept": 512, "selector": [514, 517, 527], "544705": 519, "mode": [522, 538, 893], "propagate_nan": 524, "spearman": 524, "605551": 525, "605551275463989": 525, "a_and_b": 526, "isn": 530, "thens": 530, "chain": 530, "sometim": 537, "arcco": [538, 893], "arccosh": [538, 893], "arcsin": [538, 893], "arcsinh": [538, 893], "arctan": [538, 893], "arctanh": [538, 893], "arg_max": [538, 893], "arg_min": [538, 893], "arg_uniqu": [538, 893], "backward_fil": 538, "clip_max": [538, 893], "clip_min": [538, 893], "co": [538, 893], "cosh": [538, 893], "cumcount": 538, "cummax": [538, 893], "cummin": [538, 893], "cumprod": [538, 893], "cumulative_ev": [538, 893], "entropi": [538, 893], "ewm_mean": [538, 893], "ewm_std": [538, 893], "ewm_var": [538, 893], "extend_const": [538, 893], "flatten": 538, "inspect": [538, 619], "is_between": 538, "is_finit": [538, 893], "is_first": [538, 893], "is_in": [538, 893], "is_infinit": [538, 893], "is_nan": [538, 893], "is_not_nan": [538, 893], "is_not_nul": [538, 893], "kurtosi": [538, 893], "log10": [538, 893], "map_alia": 538, "nan_max": [538, 893], "nan_min": [538, 893], "pct_chang": [538, 893], "pow": 538, "reinterpret": [538, 893], "repeat_bi": 538, "reshap": [538, 893], "rolling_appli": [538, 893], "rolling_median": [538, 893], "rolling_quantil": [538, 893], "rolling_skew": [538, 893], "rolling_std": [538, 893], "rolling_var": [538, 893], "search_sort": [538, 893], "set_sort": [538, 893], "shrink_dtyp": [538, 893], "sin": [538, 893], "sinh": [538, 893], "sort_bi": 538, "tan": [538, 893], "tanh": [538, 893], "to_phys": [538, 893], "top_k": [538, 893], "unique_count": [538, 893], "expos": 547, "registr": 547, "miscellan": 547, "arrowerror": 547, "columnnotfounderror": 547, "invalidoperationerror": 547, "nodataerror": 547, "schemaerror": 547, "schemafieldnotfounderror": 547, "shapeerror": 547, "structfieldnotfounderror": 547, "build_info": 547, "show_vers": 547, "sqlcontext": [547, 899], "hit": [550, 619], "node": [550, 571, 578, 586, 589, 619], "huge": [553, 619], "saver": [553, 619], "purpos": [561, 619], "help": [561, 619], "influenc": [561, 578, 619], "read_json": [566, 611, 619], "lazygroupbi": [567, 568, 569, 619], "typeerror": [567, 619], "subscript": [567, 619], "validate_output_schema": [578, 619], "streamabl": [578, 619], "past": [578, 619], "paramount": [578, 619], "hard": [578, 619], "bug": [578, 613, 619], "elig": [578, 619], "ot": [578, 619], "That": [578, 619], "exectut": [578, 619], "invari": [578, 619], "upheld": [578, 619], "prune": [578, 619], "show_plot": [586, 619], "truncate_nod": [586, 619], "figsiz": [586, 595, 619], "gantt": [586, 619], "chart": [586, 619], "matplotlib": [586, 595, 619], "plot": [586, 595, 619], "groupby_partit": [586, 619], "470": [586, 619], "475": [586, 619], "1964": [586, 619], "from_json": [588, 619], "swap": [589, 619], "output_path": [595, 619], "raw_output": [595, 619], "figur": [595, 619], "persist": [596, 597, 619], "ram": [596, 597, 619], "slightli": [596, 597, 619], "my_larger_than_ram_fil": [596, 597, 619], "data_pagesize_limit": [597, 619], "290994": [600, 619], "118034": [600, 619], "433013": [600, 619], "1875": [606, 619], "extern": [609, 619], "df_a": [609, 619], "df_other": [609, 619], "afoo": [609, 619], "cfoo": [609, 619], "train_df": [609, 619], "feature_0": [609, 619], "feature_1": [609, 619], "test_df": [609, 619], "_train": [609, 619], "feature_0_train": [609, 619], "dataframescan": [611, 619], "output_schema": [611, 619], "unique_nam": 612, "profil": 619, "sink_ipc": 619, "sink_parquet": 619, "with_context": 619, "sr": [624, 893], "new_aliased_sr": [624, 893], "append_chunk": [627, 893], "super": [627, 893], "141593": [629, 893], "292432": [630, 893], "549306": [634, 893], "listnamespac": [641, 739, 893], "catnamespac": 673, "56789": [675, 745, 808, 893], "901234": [675, 745, 808, 893], "pi": [682, 822, 868, 893], "1232e": [682, 893], "quick": [689, 893], "series_num": [689, 893], "581139": [689, 893], "series_str": [689, 893], "datetimenamespac": 694, "1583020800": 696, "1585699200": 696, "1588291200": 696, "nyc": 696, "edt": 696, "1583038800": 696, "1585717200": 696, "1588309200": 696, "500m": [707, 709, 715, 721], "500000": 707, "2m": 712, "500000000": 715, "date_minus_1y_2mon": 717, "165": [720, 725], "series_equ": [720, 725, 893], "timestamp_u": 724, "978307200000000000": 724, "978393600000000000": 724, "978480000000000000": 724, "005": [733, 893], "06293300616044681": [733, 893], "65": [733, 893], "8568409950394724": [733, 893], "4000000": [734, 893], "814697265625": [734, 893], "stringnamespac": [739, 829, 893], "bitmask": [747, 893], "swiftli": [747, 893], "10734580197236529959": [748, 893], "3022416320763508302": [748, 893], "13756996518000038261": [748, 893], "datelik": [753, 893], "166667": [787, 893], "142857": [787, 893], "512": [787, 893], "peak": [788, 789, 893], "nanstd": [798, 893], "858612": [798, 893], "200": [799, 800, 802, 893], "400": [799, 800, 802, 893], "150": [800, 893], "250": [800, 893], "350": [800, 893], "450": [800, 893], "381802": [804, 893], "dev": [805, 893], "57": [808, 893], "frequent": [812, 813, 893], "mutat": [813, 893], "2246e": [822, 868, 893], "divisor": [828, 882, 893], "6331e16": [868, 893], "lib": [871, 893], "int64arrai": [871, 893], "a_2": [872, 893], "a_3": [872, 893], "zero_copy_onli": [875, 893], "writabl": [875, 893], "view": [875, 893], "presenc": [875, 893], "immut": [875, 893], "made": [875, 893], "ignore_nul": [883, 893], "seriesview": [883, 893], "arraylik": 893, "dtype_if_empti": 893, "position": 893, "scenario": 893, "through": 893, "arg_tru": 893, "chunk_length": 893, "get_chunk": 893, "has_valid": 893, "is_boolean": 893, "is_datelik": 893, "is_float": 893, "is_numer": 893, "is_sort": 893, "is_utf8": 893, "new_from_index": 893, "peak_max": 893, "peak_min": 893, "set_at_idx": 893, "readthedoc": 900}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [30, 0, 1, "", "DataType"], [31, 0, 1, "", "Date"], [32, 0, 1, "", "Datetime"], [33, 0, 1, "", "Duration"], [34, 0, 1, "", "Float32"], [35, 0, 1, "", "Float64"], [36, 0, 1, "", "Int16"], [37, 0, 1, "", "Int32"], [38, 0, 1, "", "Int64"], [39, 0, 1, "", "Int8"], [40, 0, 1, "", "List"], [41, 0, 1, "", "Null"], [42, 0, 1, "", "Object"], [899, 0, 1, "", "SQLContext"], [46, 0, 1, "", "StringCache"], [47, 0, 1, "", "Struct"], [48, 0, 1, "", "Time"], [49, 0, 1, "", "UInt16"], [50, 0, 1, "", "UInt32"], [51, 0, 1, "", "UInt64"], [52, 0, 1, "", "UInt8"], [53, 0, 1, "", "Unknown"], [54, 0, 1, "", "Utf8"], [55, 4, 1, "", "align_frames"], [485, 4, 1, "", "all"], [486, 4, 1, "", "any"], [487, 4, 1, "", "apply"], [488, 4, 1, "", "arange"], [60, 4, 1, "", "arg_where"], [489, 4, 1, "", "argsort_by"], [490, 4, 1, "", "avg"], [61, 4, 1, "", "build_info"], [491, 4, 1, "", "coalesce"], [492, 4, 1, "", "col"], [62, 4, 1, "", "collect_all"], [63, 4, 1, "", "concat"], [493, 4, 1, "", "concat_list"], [494, 4, 1, "", "concat_str"], [495, 4, 1, "", "count"], [496, 4, 1, "", "cov"], [497, 4, 1, "", "cumfold"], [498, 4, 1, "", "cumreduce"], [499, 4, 1, "", "cumsum"], [64, 4, 1, "", "cut"], [500, 4, 1, "", "date"], [65, 4, 1, "", "date_range"], [501, 4, 1, "", "datetime"], [502, 4, 1, "", "duration"], [503, 4, 1, "", "element"], [504, 4, 1, "", "exclude"], [505, 4, 1, "", "first"], [506, 4, 1, "", "fold"], [507, 4, 1, "", "format"], [80, 4, 1, "", "from_arrow"], [81, 4, 1, "", "from_dataframe"], [82, 4, 1, "", "from_dict"], [83, 4, 1, "", "from_dicts"], [508, 4, 1, "", "from_epoch"], [84, 4, 1, "", "from_numpy"], [85, 4, 1, "", "from_pandas"], [86, 4, 1, "", "from_records"], [87, 4, 1, "", "get_dummies"], [88, 4, 1, "", "get_idx_type"], [509, 4, 1, "", "groups"], [510, 4, 1, "", "head"], [511, 4, 1, "", "list"], [512, 4, 1, "", "lit"], [513, 4, 1, "", "map"], [514, 4, 1, "", "max"], [515, 4, 1, "", "mean"], [516, 4, 1, "", "median"], [517, 4, 1, "", "min"], [518, 4, 1, "", "n_unique"], [90, 4, 1, "", "ones"], [519, 4, 1, "", "pearson_corr"], [520, 4, 1, "", "quantile"], [91, 4, 1, "", "read_avro"], [92, 4, 1, "", "read_csv"], [93, 4, 1, "", "read_csv_batched"], [94, 4, 1, "", "read_delta"], [95, 4, 1, "", "read_excel"], [96, 4, 1, "", "read_ipc"], [97, 4, 1, "", "read_ipc_schema"], [98, 4, 1, "", "read_json"], [99, 4, 1, "", "read_ndjson"], [100, 4, 1, "", "read_parquet"], [101, 4, 1, "", "read_parquet_schema"], [102, 4, 1, "", "read_sql"], [521, 4, 1, "", "reduce"], [522, 4, 1, "", "repeat"], [103, 4, 1, "", "scan_csv"], [104, 4, 1, "", "scan_delta"], [105, 4, 1, "", "scan_ds"], [106, 4, 1, "", "scan_ipc"], [107, 4, 1, "", "scan_ndjson"], [108, 4, 1, "", "scan_parquet"], [523, 4, 1, "", "select"], [109, 4, 1, "", "show_versions"], [524, 4, 1, "", "spearman_rank_corr"], [525, 4, 1, "", "std"], [526, 4, 1, "", "struct"], [527, 4, 1, "", "sum"], [528, 4, 1, "", "tail"], [116, 4, 1, "", "threadpool_size"], [117, 4, 1, "", "toggle_string_cache"], [529, 4, 1, "", "var"], [530, 4, 1, "", "when"], [118, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_float"], [10, 1, 1, "", "set_fmt_str_lengths"], [11, 1, 1, "", "set_tbl_cell_alignment"], [12, 1, 1, "", "set_tbl_cols"], [13, 1, 1, "", "set_tbl_column_data_type_inline"], [14, 1, 1, "", "set_tbl_dataframe_shape_below"], [15, 1, 1, "", "set_tbl_formatting"], [16, 1, 1, "", "set_tbl_hide_column_data_types"], [17, 1, 1, "", "set_tbl_hide_column_names"], [18, 1, 1, "", "set_tbl_hide_dataframe_shape"], [19, 1, 1, "", "set_tbl_hide_dtype_separator"], [20, 1, 1, "", "set_tbl_rows"], [21, 1, 1, "", "set_tbl_width_chars"], [22, 1, 1, "", "set_verbose"], [23, 1, 1, "", "state"]], "polars.DataFrame": [[121, 1, 1, "", "__dataframe__"], [122, 1, 1, "", "apply"], [123, 1, 1, "", "cleared"], [124, 1, 1, "", "clone"], [125, 2, 1, "", "columns"], [126, 1, 1, "", "describe"], [127, 1, 1, "", "drop"], [128, 1, 1, "", "drop_in_place"], [129, 1, 1, "", "drop_nulls"], [130, 2, 1, "", "dtypes"], [131, 1, 1, "", "estimated_size"], [132, 1, 1, "", "explode"], [133, 1, 1, "", "extend"], [134, 1, 1, "", "fill_nan"], [135, 1, 1, "", "fill_null"], [136, 1, 1, "", "filter"], [137, 1, 1, "", "find_idx_by_name"], [138, 1, 1, "", "fold"], [139, 1, 1, "", "frame_equal"], [140, 1, 1, "", "get_column"], [141, 1, 1, "", "get_columns"], [142, 1, 1, "", "glimpse"], [143, 1, 1, "", "groupby"], [144, 1, 1, "", "groupby_dynamic"], [145, 1, 1, "", "groupby_rolling"], [146, 1, 1, "", "hash_rows"], [147, 1, 1, "", "head"], [148, 2, 1, "", "height"], [149, 1, 1, "", "hstack"], [150, 1, 1, "", "insert_at_idx"], [151, 1, 1, "", "interpolate"], [152, 1, 1, "", "is_duplicated"], [153, 1, 1, "", "is_empty"], [154, 1, 1, "", "is_unique"], [155, 1, 1, "", "item"], [156, 1, 1, "", "iter_rows"], [157, 1, 1, "", "iter_slices"], [158, 1, 1, "", "join"], [159, 1, 1, "", "join_asof"], [160, 1, 1, "", "lazy"], [161, 1, 1, "", "limit"], [162, 1, 1, "", "max"], [163, 1, 1, "", "mean"], [164, 1, 1, "", "median"], [165, 1, 1, "", "melt"], [166, 1, 1, "", "merge_sorted"], [167, 1, 1, "", "min"], [168, 1, 1, "", "n_chunks"], [169, 1, 1, "", "n_unique"], [170, 1, 1, "", "null_count"], [171, 1, 1, "", "partition_by"], [172, 1, 1, "", "pearson_corr"], [173, 1, 1, "", "pipe"], [174, 1, 1, "", "pivot"], [175, 1, 1, "", "product"], [176, 1, 1, "", "quantile"], [177, 1, 1, "", "rechunk"], [178, 1, 1, "", "rename"], [179, 1, 1, "", "replace"], [180, 1, 1, "", "replace_at_idx"], [181, 1, 1, "", "reverse"], [182, 1, 1, "", "row"], [183, 1, 1, "", "rows"], [184, 1, 1, "", "sample"], [185, 2, 1, "", "schema"], [186, 1, 1, "", "select"], [187, 2, 1, "", "shape"], [188, 1, 1, "", "shift"], [189, 1, 1, "", "shift_and_fill"], [190, 1, 1, "", "shrink_to_fit"], [191, 1, 1, "", "slice"], [192, 1, 1, "", "sort"], [193, 1, 1, "", "std"], [194, 1, 1, "", "sum"], [195, 1, 1, "", "tail"], [196, 1, 1, "", "take_every"], [197, 1, 1, "", "to_arrow"], [198, 1, 1, "", "to_dict"], [199, 1, 1, "", "to_dicts"], [200, 1, 1, "", "to_dummies"], [201, 1, 1, "", "to_numpy"], [202, 1, 1, "", "to_pandas"], [203, 1, 1, "", "to_series"], [204, 1, 1, "", "to_struct"], [205, 1, 1, "", "transpose"], [206, 1, 1, "", "unique"], [207, 1, 1, "", "unnest"], [208, 1, 1, "", "unstack"], [209, 1, 1, "", "upsample"], [210, 1, 1, "", "var"], [211, 1, 1, "", "vstack"], [212, 2, 1, "", "width"], [213, 1, 1, "", "with_columns"], [214, 1, 1, "", "with_row_count"], [24, 1, 1, "", "write_avro"], [25, 1, 1, "", "write_csv"], [26, 1, 1, "", "write_ipc"], [27, 1, 1, "", "write_json"], [28, 1, 1, "", "write_ndjson"], [29, 1, 1, "", "write_parquet"]], "polars.DataType": [[30, 1, 1, "", "__init__"]], "polars.Date": [[31, 1, 1, "", "__init__"]], "polars.Datetime": [[32, 1, 1, "", "__init__"]], "polars.Duration": [[33, 1, 1, "", "__init__"]], "polars.Expr": [[242, 1, 1, "", "abs"], [243, 1, 1, "", "agg_groups"], [244, 1, 1, "", "alias"], [245, 1, 1, "", "all"], [246, 1, 1, "", "any"], [247, 1, 1, "", "append"], [248, 1, 1, "", "apply"], [249, 1, 1, "", "arccos"], [250, 1, 1, "", "arccosh"], [251, 1, 1, "", "arcsin"], [252, 1, 1, "", "arcsinh"], [253, 1, 1, "", "arctan"], [254, 1, 1, "", "arctanh"], [255, 1, 1, "", "arg_max"], [256, 1, 1, "", "arg_min"], [257, 1, 1, "", "arg_sort"], [258, 1, 1, "", "arg_unique"], [259, 1, 1, "", "argsort"], [285, 1, 1, "", "backward_fill"], [291, 1, 1, "", "cast"], [293, 1, 1, "", "ceil"], [294, 1, 1, "", "clip"], [295, 1, 1, "", "clip_max"], [296, 1, 1, "", "clip_min"], [297, 1, 1, "", "cos"], [298, 1, 1, "", "cosh"], [299, 1, 1, "", "count"], [300, 1, 1, "", "cumcount"], [301, 1, 1, "", "cummax"], [302, 1, 1, "", "cummin"], [303, 1, 1, "", "cumprod"], [304, 1, 1, "", "cumsum"], [305, 1, 1, "", "cumulative_eval"], [306, 1, 1, "", "diff"], [307, 1, 1, "", "dot"], [308, 1, 1, "", "drop_nans"], [309, 1, 1, "", "drop_nulls"], [343, 1, 1, "", "entropy"], [344, 1, 1, "", "ewm_mean"], [345, 1, 1, "", "ewm_std"], [346, 1, 1, "", "ewm_var"], [347, 1, 1, "", "exclude"], [348, 1, 1, "", "exp"], [349, 1, 1, "", "explode"], [350, 1, 1, "", "extend_constant"], [351, 1, 1, "", "fill_nan"], [352, 1, 1, "", "fill_null"], [353, 1, 1, "", "filter"], [354, 1, 1, "", "first"], [355, 1, 1, "", "flatten"], [356, 1, 1, "", "floor"], [357, 1, 1, "", "forward_fill"], [358, 1, 1, "", "hash"], [359, 1, 1, "", "head"], [360, 1, 1, "", "inspect"], [361, 1, 1, "", "interpolate"], [362, 1, 1, "", "is_between"], [363, 1, 1, "", "is_duplicated"], [364, 1, 1, "", "is_finite"], [365, 1, 1, "", "is_first"], [366, 1, 1, "", "is_in"], [367, 1, 1, "", "is_infinite"], [368, 1, 1, "", "is_nan"], [369, 1, 1, "", "is_not"], [370, 1, 1, "", "is_not_nan"], [371, 1, 1, "", "is_not_null"], [372, 1, 1, "", "is_null"], [373, 1, 1, "", "is_unique"], [374, 1, 1, "", "keep_name"], [375, 1, 1, "", "kurtosis"], [376, 1, 1, "", "last"], [377, 1, 1, "", "len"], [378, 1, 1, "", "limit"], [379, 1, 1, "", "list"], [380, 1, 1, "", "log"], [381, 1, 1, "", "log10"], [382, 1, 1, "", "lower_bound"], [383, 1, 1, "", "map"], [384, 1, 1, "", "map_alias"], [385, 1, 1, "", "max"], [386, 1, 1, "", "mean"], [387, 1, 1, "", "median"], [394, 1, 1, "", "min"], [395, 1, 1, "", "mode"], [396, 1, 1, "", "n_unique"], [397, 1, 1, "", "nan_max"], [398, 1, 1, "", "nan_min"], [399, 1, 1, "", "null_count"], [400, 1, 1, "", "over"], [401, 1, 1, "", "pct_change"], [402, 1, 1, "", "pow"], [403, 1, 1, "", "prefix"], [404, 1, 1, "", "product"], [405, 1, 1, "", "quantile"], [406, 1, 1, "", "rank"], [407, 1, 1, "", "rechunk"], [408, 1, 1, "", "reinterpret"], [409, 1, 1, "", "repeat_by"], [410, 1, 1, "", "reshape"], [411, 1, 1, "", "reverse"], [412, 1, 1, "", "rolling_apply"], [413, 1, 1, "", "rolling_max"], [414, 1, 1, "", "rolling_mean"], [415, 1, 1, "", "rolling_median"], [416, 1, 1, "", "rolling_min"], [417, 1, 1, "", "rolling_quantile"], [418, 1, 1, "", "rolling_skew"], [419, 1, 1, "", "rolling_std"], [420, 1, 1, "", "rolling_sum"], [421, 1, 1, "", "rolling_var"], [422, 1, 1, "", "round"], [423, 1, 1, "", "sample"], [424, 1, 1, "", "search_sorted"], [425, 1, 1, "", "set_sorted"], [426, 1, 1, "", "shift"], [427, 1, 1, "", "shift_and_fill"], [428, 1, 1, "", "shrink_dtype"], [429, 1, 1, "", "shuffle"], [430, 1, 1, "", "sign"], [431, 1, 1, "", "sin"], [432, 1, 1, "", "sinh"], [433, 1, 1, "", "skew"], [434, 1, 1, "", "slice"], [435, 1, 1, "", "sort"], [436, 1, 1, "", "sort_by"], [437, 1, 1, "", "sqrt"], [438, 1, 1, "", "std"], [470, 1, 1, "", "suffix"], [471, 1, 1, "", "sum"], [472, 1, 1, "", "tail"], [473, 1, 1, "", "take"], [474, 1, 1, "", "take_every"], [475, 1, 1, "", "tan"], [476, 1, 1, "", "tanh"], [477, 1, 1, "", "to_physical"], [478, 1, 1, "", "top_k"], [479, 1, 1, "", "unique"], [480, 1, 1, "", "unique_counts"], [481, 1, 1, "", "upper_bound"], [482, 1, 1, "", "value_counts"], [483, 1, 1, "", "var"], [484, 1, 1, "", "where"]], "polars.Expr.arr": [[260, 1, 1, "", "arg_max"], [261, 1, 1, "", "arg_min"], [262, 1, 1, "", "concat"], [263, 1, 1, "", "contains"], [264, 1, 1, "", "diff"], [265, 1, 1, "", "eval"], [266, 1, 1, "", "explode"], [267, 1, 1, "", "first"], [268, 1, 1, "", "get"], [269, 1, 1, "", "head"], [270, 1, 1, "", "join"], [271, 1, 1, "", "last"], [272, 1, 1, "", "lengths"], [273, 1, 1, "", "max"], [274, 1, 1, "", "mean"], [275, 1, 1, "", "min"], [276, 1, 1, "", "reverse"], [277, 1, 1, "", "shift"], [278, 1, 1, "", "slice"], [279, 1, 1, "", "sort"], [280, 1, 1, "", "sum"], [281, 1, 1, "", "tail"], [282, 1, 1, "", "take"], [283, 1, 1, "", "to_struct"], [284, 1, 1, "", "unique"]], "polars.Expr.bin": [[286, 1, 1, "", "contains"], [287, 1, 1, "", "decode"], [288, 1, 1, "", "encode"], [289, 1, 1, "", "ends_with"], [290, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[292, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[310, 1, 1, "", "cast_time_unit"], [311, 1, 1, "", "cast_time_zone"], [312, 1, 1, "", "combine"], [313, 1, 1, "", "day"], [314, 1, 1, "", "days"], [315, 1, 1, "", "epoch"], [316, 1, 1, "", "hour"], [317, 1, 1, "", "hours"], [318, 1, 1, "", "iso_year"], [319, 1, 1, "", "microsecond"], [320, 1, 1, "", "microseconds"], [321, 1, 1, "", "millisecond"], [322, 1, 1, "", "milliseconds"], [323, 1, 1, "", "minute"], [324, 1, 1, "", "minutes"], [325, 1, 1, "", "month"], [326, 1, 1, "", "nanosecond"], [327, 1, 1, "", "nanoseconds"], [328, 1, 1, "", "offset_by"], [329, 1, 1, "", "ordinal_day"], [330, 1, 1, "", "quarter"], [331, 1, 1, "", "round"], [332, 1, 1, "", "second"], [333, 1, 1, "", "seconds"], [334, 1, 1, "", "strftime"], [335, 1, 1, "", "timestamp"], [336, 1, 1, "", "truncate"], [337, 1, 1, "", "tz_localize"], [338, 1, 1, "", "week"], [339, 1, 1, "", "weekday"], [340, 1, 1, "", "with_time_unit"], [341, 1, 1, "", "with_time_zone"], [342, 1, 1, "", "year"]], "polars.Expr.meta": [[388, 1, 1, "", "has_multiple_outputs"], [389, 1, 1, "", "is_regex_projection"], [390, 1, 1, "", "output_name"], [391, 1, 1, "", "pop"], [392, 1, 1, "", "root_names"], [393, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[439, 1, 1, "", "concat"], [440, 1, 1, "", "contains"], [441, 1, 1, "", "count_match"], [442, 1, 1, "", "decode"], [443, 1, 1, "", "encode"], [444, 1, 1, "", "ends_with"], [445, 1, 1, "", "explode"], [446, 1, 1, "", "extract"], [447, 1, 1, "", "extract_all"], [448, 1, 1, "", "json_path_match"], [449, 1, 1, "", "lengths"], [450, 1, 1, "", "ljust"], [451, 1, 1, "", "lstrip"], [452, 1, 1, "", "n_chars"], [453, 1, 1, "", "parse_int"], [454, 1, 1, "", "replace"], [455, 1, 1, "", "replace_all"], [456, 1, 1, "", "rjust"], [457, 1, 1, "", "rstrip"], [458, 1, 1, "", "slice"], [459, 1, 1, "", "split"], [460, 1, 1, "", "split_exact"], [461, 1, 1, "", "splitn"], [462, 1, 1, "", "starts_with"], [463, 1, 1, "", "strip"], [464, 1, 1, "", "strptime"], [465, 1, 1, "", "to_lowercase"], [466, 1, 1, "", "to_uppercase"], [467, 1, 1, "", "zfill"]], "polars.Expr.struct": [[468, 1, 1, "", "field"], [469, 1, 1, "", "rename_fields"]], "polars.Float32": [[34, 1, 1, "", "__init__"]], "polars.Float64": [[35, 1, 1, "", "__init__"]], "polars.Int16": [[36, 1, 1, "", "__init__"]], "polars.Int32": [[37, 1, 1, "", "__init__"]], "polars.Int64": [[38, 1, 1, "", "__init__"]], "polars.Int8": [[39, 1, 1, "", "__init__"]], "polars.LazyFrame": [[550, 1, 1, "", "cache"], [551, 1, 1, "", "cleared"], [552, 1, 1, "", "clone"], [553, 1, 1, "", "collect"], [554, 2, 1, "", "columns"], [555, 1, 1, "", "describe_optimized_plan"], [556, 1, 1, "", "describe_plan"], [557, 1, 1, "", "drop"], [558, 1, 1, "", "drop_nulls"], [559, 2, 1, "", "dtypes"], [560, 1, 1, "", "explode"], [561, 1, 1, "", "fetch"], [562, 1, 1, "", "fill_nan"], [563, 1, 1, "", "fill_null"], [564, 1, 1, "", "filter"], [565, 1, 1, "", "first"], [566, 1, 1, "", "from_json"], [567, 1, 1, "", "groupby"], [568, 1, 1, "", "groupby_dynamic"], [569, 1, 1, "", "groupby_rolling"], [570, 1, 1, "", "head"], [571, 1, 1, "", "inspect"], [572, 1, 1, "", "interpolate"], [573, 1, 1, "", "join"], [574, 1, 1, "", "join_asof"], [575, 1, 1, "", "last"], [576, 1, 1, "", "lazy"], [577, 1, 1, "", "limit"], [578, 1, 1, "", "map"], [579, 1, 1, "", "max"], [580, 1, 1, "", "mean"], [581, 1, 1, "", "median"], [582, 1, 1, "", "melt"], [583, 1, 1, "", "merge_sorted"], [584, 1, 1, "", "min"], [585, 1, 1, "", "pipe"], [586, 1, 1, "", "profile"], [587, 1, 1, "", "quantile"], [588, 1, 1, "", "read_json"], [589, 1, 1, "", "rename"], [590, 1, 1, "", "reverse"], [591, 2, 1, "", "schema"], [592, 1, 1, "", "select"], [593, 1, 1, "", "shift"], [594, 1, 1, "", "shift_and_fill"], [595, 1, 1, "", "show_graph"], [596, 1, 1, "", "sink_ipc"], [597, 1, 1, "", "sink_parquet"], [598, 1, 1, "", "slice"], [599, 1, 1, "", "sort"], [600, 1, 1, "", "std"], [601, 1, 1, "", "sum"], [602, 1, 1, "", "tail"], [603, 1, 1, "", "take_every"], [604, 1, 1, "", "unique"], [605, 1, 1, "", "unnest"], [606, 1, 1, "", "var"], [607, 2, 1, "", "width"], [608, 1, 1, "", "with_columns"], [609, 1, 1, "", "with_context"], [610, 1, 1, "", "with_row_count"], [611, 1, 1, "", "write_json"]], "polars.List": [[40, 1, 1, "", "__init__"]], "polars.Null": [[41, 1, 1, "", "__init__"]], "polars.Object": [[42, 1, 1, "", "__init__"]], "polars.SQLContext": [[43, 1, 1, "", "execute"], [44, 1, 1, "", "query"], [45, 1, 1, "", "register"]], "polars.Series": [[623, 1, 1, "", "abs"], [624, 1, 1, "", "alias"], [625, 1, 1, "", "all"], [626, 1, 1, "", "any"], [627, 1, 1, "", "append"], [628, 1, 1, "", "apply"], [629, 1, 1, "", "arccos"], [630, 1, 1, "", "arccosh"], [631, 1, 1, "", "arcsin"], [632, 1, 1, "", "arcsinh"], [633, 1, 1, "", "arctan"], [634, 1, 1, "", "arctanh"], [635, 1, 1, "", "arg_max"], [636, 1, 1, "", "arg_min"], [637, 1, 1, "", "arg_sort"], [638, 1, 1, "", "arg_true"], [639, 1, 1, "", "arg_unique"], [640, 1, 1, "", "argsort"], [641, 3, 1, "", "arr"], [672, 1, 1, "", "cast"], [673, 3, 1, "", "cat"], [675, 1, 1, "", "ceil"], [676, 1, 1, "", "chunk_lengths"], [677, 1, 1, "", "cleared"], [678, 1, 1, "", "clip"], [679, 1, 1, "", "clip_max"], [680, 1, 1, "", "clip_min"], [681, 1, 1, "", "clone"], [682, 1, 1, "", "cos"], [683, 1, 1, "", "cosh"], [684, 1, 1, "", "cummax"], [685, 1, 1, "", "cummin"], [686, 1, 1, "", "cumprod"], [687, 1, 1, "", "cumsum"], [688, 1, 1, "", "cumulative_eval"], [689, 1, 1, "", "describe"], [690, 1, 1, "", "diff"], [691, 1, 1, "", "dot"], [692, 1, 1, "", "drop_nans"], [693, 1, 1, "", "drop_nulls"], [694, 3, 1, "", "dt"], [732, 3, 1, "", "dtype"], [733, 1, 1, "", "entropy"], [734, 1, 1, "", "estimated_size"], [735, 1, 1, "", "ewm_mean"], [736, 1, 1, "", "ewm_std"], [737, 1, 1, "", "ewm_var"], [738, 1, 1, "", "exp"], [739, 1, 1, "", "explode"], [740, 1, 1, "", "extend_constant"], [741, 1, 1, "", "fill_nan"], [742, 1, 1, "", "fill_null"], [743, 1, 1, "", "filter"], [744, 3, 1, "", "flags"], [745, 1, 1, "", "floor"], [746, 1, 1, "", "get_chunks"], [747, 1, 1, "", "has_validity"], [748, 1, 1, "", "hash"], [749, 1, 1, "", "head"], [750, 3, 1, "", "inner_dtype"], [751, 1, 1, "", "interpolate"], [752, 1, 1, "", "is_boolean"], [753, 1, 1, "", "is_datelike"], [754, 1, 1, "", "is_duplicated"], [755, 1, 1, "", "is_empty"], [756, 1, 1, "", "is_finite"], [757, 1, 1, "", "is_first"], [758, 1, 1, "", "is_float"], [759, 1, 1, "", "is_in"], [760, 1, 1, "", "is_infinite"], [761, 1, 1, "", "is_nan"], [762, 1, 1, "", "is_not_nan"], [763, 1, 1, "", "is_not_null"], [764, 1, 1, "", "is_null"], [765, 1, 1, "", "is_numeric"], [766, 1, 1, "", "is_sorted"], [767, 1, 1, "", "is_unique"], [768, 1, 1, "", "is_utf8"], [769, 1, 1, "", "item"], [770, 1, 1, "", "kurtosis"], [771, 1, 1, "", "len"], [772, 1, 1, "", "limit"], [773, 1, 1, "", "log"], [774, 1, 1, "", "log10"], [775, 1, 1, "", "max"], [776, 1, 1, "", "mean"], [777, 1, 1, "", "median"], [778, 1, 1, "", "min"], [779, 1, 1, "", "mode"], [780, 1, 1, "", "n_chunks"], [781, 1, 1, "", "n_unique"], [782, 3, 1, "", "name"], [783, 1, 1, "", "nan_max"], [784, 1, 1, "", "nan_min"], [785, 1, 1, "", "new_from_index"], [786, 1, 1, "", "null_count"], [787, 1, 1, "", "pct_change"], [788, 1, 1, "", "peak_max"], [789, 1, 1, "", "peak_min"], [790, 1, 1, "", "product"], [791, 1, 1, "", "quantile"], [792, 1, 1, "", "rank"], [793, 1, 1, "", "rechunk"], [794, 1, 1, "", "reinterpret"], [795, 1, 1, "", "rename"], [796, 1, 1, "", "reshape"], [797, 1, 1, "", "reverse"], [798, 1, 1, "", "rolling_apply"], [799, 1, 1, "", "rolling_max"], [800, 1, 1, "", "rolling_mean"], [801, 1, 1, "", "rolling_median"], [802, 1, 1, "", "rolling_min"], [803, 1, 1, "", "rolling_quantile"], [804, 1, 1, "", "rolling_skew"], [805, 1, 1, "", "rolling_std"], [806, 1, 1, "", "rolling_sum"], [807, 1, 1, "", "rolling_var"], [808, 1, 1, "", "round"], [809, 1, 1, "", "sample"], [810, 1, 1, "", "search_sorted"], [811, 1, 1, "", "series_equal"], [812, 1, 1, "", "set"], [813, 1, 1, "", "set_at_idx"], [814, 1, 1, "", "set_sorted"], [815, 3, 1, "", "shape"], [816, 1, 1, "", "shift"], [817, 1, 1, "", "shift_and_fill"], [818, 1, 1, "", "shrink_dtype"], [819, 1, 1, "", "shrink_to_fit"], [820, 1, 1, "", "shuffle"], [821, 1, 1, "", "sign"], [822, 1, 1, "", "sin"], [823, 1, 1, "", "sinh"], [824, 1, 1, "", "skew"], [825, 1, 1, "", "slice"], [826, 1, 1, "", "sort"], [827, 1, 1, "", "sqrt"], [828, 1, 1, "", "std"], [829, 3, 1, "", "str"], [864, 1, 1, "", "sum"], [865, 1, 1, "", "tail"], [866, 1, 1, "", "take"], [867, 1, 1, "", "take_every"], [868, 1, 1, "", "tan"], [869, 1, 1, "", "tanh"], [870, 3, 1, "", "time_unit"], [871, 1, 1, "", "to_arrow"], [872, 1, 1, "", "to_dummies"], [873, 1, 1, "", "to_frame"], [874, 1, 1, "", "to_list"], [875, 1, 1, "", "to_numpy"], [876, 1, 1, "", "to_pandas"], [877, 1, 1, "", "to_physical"], [878, 1, 1, "", "top_k"], [879, 1, 1, "", "unique"], [880, 1, 1, "", "unique_counts"], [881, 1, 1, "", "value_counts"], [882, 1, 1, "", "var"], [883, 1, 1, "", "view"], [884, 1, 1, "", "zip_with"]], "polars.Series.arr": [[642, 1, 1, "", "arg_max"], [643, 1, 1, "", "arg_min"], [644, 1, 1, "", "concat"], [645, 1, 1, "", "contains"], [646, 1, 1, "", "diff"], [647, 1, 1, "", "eval"], [648, 1, 1, "", "explode"], [649, 1, 1, "", "first"], [650, 1, 1, "", "get"], [651, 1, 1, "", "head"], [652, 1, 1, "", "join"], [653, 1, 1, "", "last"], [654, 1, 1, "", "lengths"], [655, 1, 1, "", "max"], [656, 1, 1, "", "mean"], [657, 1, 1, "", "min"], [658, 1, 1, "", "reverse"], [659, 1, 1, "", "shift"], [660, 1, 1, "", "slice"], [661, 1, 1, "", "sort"], [662, 1, 1, "", "sum"], [663, 1, 1, "", "tail"], [664, 1, 1, "", "take"], [665, 1, 1, "", "to_struct"], [666, 1, 1, "", "unique"]], "polars.Series.bin": [[667, 1, 1, "", "contains"], [668, 1, 1, "", "decode"], [669, 1, 1, "", "encode"], [670, 1, 1, "", "ends_with"], [671, 1, 1, "", "starts_with"]], "polars.Series.cat": [[674, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[695, 1, 1, "", "cast_time_unit"], [696, 1, 1, "", "cast_time_zone"], [697, 1, 1, "", "combine"], [698, 1, 1, "", "day"], [699, 1, 1, "", "days"], [700, 1, 1, "", "epoch"], [701, 1, 1, "", "hour"], [702, 1, 1, "", "hours"], [703, 1, 1, "", "iso_year"], [704, 1, 1, "", "max"], [705, 1, 1, "", "mean"], [706, 1, 1, "", "median"], [707, 1, 1, "", "microsecond"], [708, 1, 1, "", "microseconds"], [709, 1, 1, "", "millisecond"], [710, 1, 1, "", "milliseconds"], [711, 1, 1, "", "min"], [712, 1, 1, "", "minute"], [713, 1, 1, "", "minutes"], [714, 1, 1, "", "month"], [715, 1, 1, "", "nanosecond"], [716, 1, 1, "", "nanoseconds"], [717, 1, 1, "", "offset_by"], [718, 1, 1, "", "ordinal_day"], [719, 1, 1, "", "quarter"], [720, 1, 1, "", "round"], [721, 1, 1, "", "second"], [722, 1, 1, "", "seconds"], [723, 1, 1, "", "strftime"], [724, 1, 1, "", "timestamp"], [725, 1, 1, "", "truncate"], [726, 1, 1, "", "tz_localize"], [727, 1, 1, "", "week"], [728, 1, 1, "", "weekday"], [729, 1, 1, "", "with_time_unit"], [730, 1, 1, "", "with_time_zone"], [731, 1, 1, "", "year"]], "polars.Series.str": [[830, 1, 1, "", "concat"], [831, 1, 1, "", "contains"], [832, 1, 1, "", "count_match"], [833, 1, 1, "", "decode"], [834, 1, 1, "", "encode"], [835, 1, 1, "", "ends_with"], [836, 1, 1, "", "explode"], [837, 1, 1, "", "extract"], [838, 1, 1, "", "extract_all"], [839, 1, 1, "", "json_path_match"], [840, 1, 1, "", "lengths"], [841, 1, 1, "", "ljust"], [842, 1, 1, "", "lstrip"], [843, 1, 1, "", "n_chars"], [844, 1, 1, "", "parse_int"], [845, 1, 1, "", "replace"], [846, 1, 1, "", "replace_all"], [847, 1, 1, "", "rjust"], [848, 1, 1, "", "rstrip"], [849, 1, 1, "", "slice"], [850, 1, 1, "", "split"], [851, 1, 1, "", "split_exact"], [852, 1, 1, "", "splitn"], [853, 1, 1, "", "starts_with"], [854, 1, 1, "", "strip"], [855, 1, 1, "", "strptime"], [856, 1, 1, "", "to_lowercase"], [857, 1, 1, "", "to_uppercase"], [858, 1, 1, "", "zfill"]], "polars.Series.struct": [[859, 1, 1, "", "field"], [860, 3, 1, "", "fields"], [861, 1, 1, "", "rename_fields"], [862, 1, 1, "", "to_frame"], [863, 1, 1, "", "unnest"]], "polars.StringCache": [[46, 1, 1, "", "__init__"]], "polars.Struct": [[47, 1, 1, "", "__init__"]], "polars.Time": [[48, 1, 1, "", "__init__"]], "polars.UInt16": [[49, 1, 1, "", "__init__"]], "polars.UInt32": [[50, 1, 1, "", "__init__"]], "polars.UInt64": [[51, 1, 1, "", "__init__"]], "polars.UInt8": [[52, 1, 1, "", "__init__"]], "polars.Unknown": [[53, 1, 1, "", "__init__"]], "polars.Utf8": [[54, 1, 1, "", "__init__"]], "polars.api": [[56, 4, 1, "", "register_dataframe_namespace"], [57, 4, 1, "", "register_expr_namespace"], [58, 4, 1, "", "register_lazyframe_namespace"], [59, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[66, 5, 1, "", "ArrowError"], [67, 5, 1, "", "ColumnNotFoundError"], [68, 5, 1, "", "ComputeError"], [69, 5, 1, "", "DuplicateError"], [70, 5, 1, "", "InvalidOperationError"], [71, 5, 1, "", "NoDataError"], [72, 5, 1, "", "NoRowsReturned"], [73, 5, 1, "", "PanicException"], [74, 5, 1, "", "RowsException"], [75, 5, 1, "", "SchemaError"], [76, 5, 1, "", "SchemaFieldNotFoundError"], [77, 5, 1, "", "ShapeError"], [78, 5, 1, "", "StructFieldNotFoundError"], [79, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[89, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[215, 1, 1, "", "__iter__"], [216, 1, 1, "", "agg"], [217, 1, 1, "", "all"], [218, 1, 1, "", "apply"], [219, 1, 1, "", "count"], [220, 1, 1, "", "first"], [221, 1, 1, "", "head"], [222, 1, 1, "", "last"], [223, 1, 1, "", "max"], [224, 1, 1, "", "mean"], [225, 1, 1, "", "median"], [226, 1, 1, "", "min"], [227, 1, 1, "", "n_unique"], [228, 1, 1, "", "quantile"], [229, 1, 1, "", "sum"], [230, 1, 1, "", "tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[612, 1, 1, "", "agg"], [613, 1, 1, "", "apply"], [614, 1, 1, "", "head"], [615, 1, 1, "", "tail"]], "polars.testing": [[110, 4, 1, "", "assert_frame_equal"], [111, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[112, 0, 1, "", "column"], [113, 4, 1, "", "columns"], [114, 4, 1, "", "dataframes"], [115, 4, 1, "", "series"]], "polars.testing.parametric.column": [[112, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 133], "api": [1, 56, 57, 58, 59, 547], "provid": 1, "new": 1, "function": [1, 239, 537, 546], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884], "binari": [2, 532, 887], "boolean": [3, 533, 888], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119], "load": [5, 119], "restore_default": 6, "save": [7, 119], "set_ascii_t": 8, "set_fmt_float": 9, "set_fmt_str_length": 10, "set_tbl_cell_align": 11, "set_tbl_col": 12, "set_tbl_column_data_type_inlin": 13, "set_tbl_dataframe_shape_below": 14, "set_tbl_format": 15, "set_tbl_hide_column_data_typ": 16, "set_tbl_hide_column_nam": 17, "set_tbl_hide_dataframe_shap": 18, "set_tbl_hide_dtype_separ": 19, "set_tbl_row": 20, "set_tbl_width_char": 21, "set_verbos": 22, "state": [23, 119], "datafram": [24, 25, 26, 27, 28, 29, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236], "write_avro": 24, "write_csv": 25, "write_ipc": 26, "write_json": [27, 611], "write_ndjson": 28, "write_parquet": 29, "datatyp": 30, "date": [31, 239, 500], "datetim": [32, 501], "durat": [33, 502], "float32": 34, "float64": 35, "int16": 36, "int32": 37, "int64": 38, "int8": 39, "list": [40, 379, 511], "null": 41, "object": 42, "sqlcontext": [43, 44, 45], "execut": 43, "queri": 44, "regist": 45, "stringcach": [46, 546], "struct": [47, 468, 469, 526, 543, 859, 860, 861, 862, 863, 897], "time": [48, 239], "uint16": 49, "uint32": 50, "uint64": 51, "uint8": 52, "unknown": 53, "utf8": 54, "align_fram": 55, "register_dataframe_namespac": 56, "register_expr_namespac": 57, "register_lazyframe_namespac": 58, "register_series_namespac": 59, "arg_wher": 60, "build_info": 61, "collect_al": 62, "concat": [63, 262, 439, 644, 830], "cut": 64, "date_rang": 65, "except": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 240], "arrowerror": 66, "columnnotfounderror": 67, "computeerror": 68, "duplicateerror": 69, "invalidoperationerror": 70, "nodataerror": 71, "norowsreturn": 72, "panicexcept": 73, "rowsexcept": 74, "schemaerror": 75, "schemafieldnotfounderror": 76, "shapeerror": 77, "structfieldnotfounderror": 78, "toomanyrowsreturn": 79, "from_arrow": 80, "from_datafram": 81, "from_dict": [82, 83], "from_numpi": 84, "from_panda": 85, "from_record": 86, "get_dummi": 87, "get_idx_typ": 88, "intern": [89, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 612, 613, 614, 615], "batch": 89, "batchedcsvread": [89, 548], "next_batch": 89, "ones": 90, "read_avro": 91, "read_csv": 92, "read_csv_batch": 93, "read_delta": 94, "read_excel": 95, "read_ipc": 96, "read_ipc_schema": 97, "read_json": [98, 588], "read_ndjson": 99, "read_parquet": 100, "read_parquet_schema": 101, "read_sql": 102, "scan_csv": 103, "scan_delta": 104, "scan_d": 105, "scan_ipc": 106, "scan_ndjson": 107, "scan_parquet": 108, "show_vers": 109, "test": [110, 111, 112, 113, 114, 115, 900], "assert_frame_equ": 110, "assert_series_equ": 111, "parametr": [112, 113, 114, 115], "column": [112, 113, 125, 535, 554], "seri": [115, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 893], "threadpool_s": 116, "toggle_string_cach": 117, "zero": 118, "option": 119, "current": 119, "us": 119, "context": 119, "manag": 119, "aggreg": [120, 241, 549, 622], "__dataframe__": 121, "appli": [122, 218, 248, 487, 613, 628], "clear": [123, 551, 677], "clone": [124, 552, 681], "describ": [126, 689], "drop": [127, 557], "drop_in_plac": 128, "drop_nul": [129, 309, 558, 693], "dtype": [130, 559, 732], "estimated_s": [131, 734], "explod": [132, 266, 349, 445, 560, 648, 739, 836], "fill_nan": [134, 351, 562, 741], "fill_nul": [135, 352, 563, 742], "filter": [136, 353, 564, 743], "find_idx_by_nam": 137, "fold": [138, 506], "frame_equ": 139, "get_column": [140, 141], "glimps": 142, "groupbi": [143, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 235, 567, 612, 613, 614, 615, 618], "groupby_dynam": [144, 568], "groupby_rol": [145, 569], "hash_row": 146, "head": [147, 221, 269, 359, 510, 570, 614, 651, 749], "height": 148, "hstack": 149, "insert_at_idx": 150, "interpol": [151, 361, 572, 751], "is_dupl": [152, 363, 754], "is_empti": [153, 755], "is_uniqu": [154, 373, 767], "item": [155, 769], "iter_row": 156, "iter_slic": 157, "join": [158, 270, 573, 652], "join_asof": [159, 574], "lazi": [160, 546, 576], "limit": [161, 378, 577, 772], "max": [162, 223, 273, 385, 514, 579, 655, 704, 775], "mean": [163, 224, 274, 386, 515, 580, 656, 705, 776], "median": [164, 225, 387, 516, 581, 706, 777], "melt": [165, 582], "merge_sort": [166, 583], "min": [167, 226, 275, 394, 517, 584, 657, 711, 778], "n_chunk": [168, 780], "n_uniqu": [169, 227, 396, 518, 781], "null_count": [170, 399, 786], "partition_bi": 171, "pearson_corr": [172, 519], "pipe": [173, 585], "pivot": 174, "product": [175, 404, 790], "quantil": [176, 228, 405, 520, 587, 791], "rechunk": [177, 407, 793], "renam": [178, 589, 795], "replac": [179, 454, 845], "replace_at_idx": 180, "revers": [181, 276, 411, 590, 658, 797], "row": [182, 183], "sampl": [184, 423, 809], "schema": [185, 591], "select": [186, 238, 523, 541, 592, 621, 895], "shape": [187, 815], "shift": [188, 277, 426, 593, 659, 816], "shift_and_fil": [189, 427, 594, 817], "shrink_to_fit": [190, 819], "slice": [191, 278, 434, 458, 598, 660, 825, 849], "sort": [192, 279, 435, 599, 661, 826], "std": [193, 438, 525, 600, 828], "sum": [194, 229, 280, 471, 527, 601, 662, 864], "tail": [195, 230, 281, 472, 528, 602, 615, 663, 865], "take_everi": [196, 474, 603, 867], "to_arrow": [197, 871], "to_dict": [198, 199], "to_dummi": [200, 872], "to_numpi": [201, 875], "to_panda": [202, 876], "to_seri": 203, "to_struct": [204, 283, 665], "transpos": 205, "uniqu": [206, 284, 479, 604, 666, 879], "unnest": [207, 605, 863], "unstack": 208, "upsampl": 209, "var": [210, 483, 529, 606, 882], "vstack": 211, "width": [212, 607], "with_column": [213, 608], "with_row_count": [214, 610], "__iter__": 215, "agg": [216, 612], "all": [217, 245, 485, 625], "count": [219, 299, 495], "first": [220, 267, 354, 505, 565, 649], "last": [222, 271, 376, 575, 653], "attribut": [231, 616, 886], "comput": [232, 536, 890], "descript": [233, 617, 891], "export": [234, 892], "miscellan": [237, 540, 546, 620, 894], "manipul": [238, 541, 621, 895], "data": 239, "type": 239, "numer": 239, "nest": 239, "other": 239, "expr": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "ab": [242, 623], "agg_group": 243, "alia": [244, 624], "ani": [246, 486, 626], "append": [247, 627], "arcco": [249, 629], "arccosh": [250, 630], "arcsin": [251, 631], "arcsinh": [252, 632], "arctan": [253, 633], "arctanh": [254, 634], "arg_max": [255, 260, 635, 642], "arg_min": [256, 261, 636, 643], "arg_sort": [257, 637], "arg_uniqu": [258, 639], "argsort": [259, 640], "arr": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666], "contain": [263, 286, 440, 645, 667, 831], "diff": [264, 306, 646, 690], "eval": [265, 647], "get": [268, 650], "length": [272, 449, 654, 840], "take": [282, 473, 664, 866], "backward_fil": 285, "bin": [286, 287, 288, 289, 290, 667, 668, 669, 670, 671], "decod": [287, 442, 668, 833], "encod": [288, 443, 669, 834], "ends_with": [289, 444, 670, 835], "starts_with": [290, 462, 671, 853], "cast": [291, 672], "cat": [292, 673, 674], "set_ord": [292, 674], "ceil": [293, 675], "clip": [294, 678], "clip_max": [295, 679], "clip_min": [296, 680], "co": [297, 682], "cosh": [298, 683], "cumcount": 300, "cummax": [301, 684], "cummin": [302, 685], "cumprod": [303, 686], "cumsum": [304, 499, 687], "cumulative_ev": [305, 688], "dot": [307, 691], "drop_nan": [308, 692], "dt": [310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "cast_time_unit": [310, 695], "cast_time_zon": [311, 696], "combin": [312, 697], "dai": [313, 314, 698, 699], "epoch": [315, 700], "hour": [316, 317, 701, 702], "iso_year": [318, 703], "microsecond": [319, 320, 707, 708], "millisecond": [321, 322, 709, 710], "minut": [323, 324, 712, 713], "month": [325, 714], "nanosecond": [326, 327, 715, 716], "offset_bi": [328, 717], "ordinal_dai": [329, 718], "quarter": [330, 719], "round": [331, 422, 720, 808], "second": [332, 333, 721, 722], "strftime": [334, 723], "timestamp": [335, 724], "truncat": [336, 725], "tz_local": [337, 726], "week": [338, 727], "weekdai": [339, 728], "with_time_unit": [340, 729], "with_time_zon": [341, 730], "year": [342, 731], "entropi": [343, 733], "ewm_mean": [344, 735], "ewm_std": [345, 736], "ewm_var": [346, 737], "exclud": [347, 504], "exp": [348, 738], "extend_const": [350, 740], "flatten": 355, "floor": [356, 745], "forward_fil": 357, "hash": [358, 748], "inspect": [360, 571], "is_between": 362, "is_finit": [364, 756], "is_first": [365, 757], "is_in": [366, 759], "is_infinit": [367, 760], "is_nan": [368, 761], "is_not": 369, "is_not_nan": [370, 762], "is_not_nul": [371, 763], "is_nul": [372, 764], "keep_nam": 374, "kurtosi": [375, 770], "len": [377, 771], "log": [380, 773], "log10": [381, 774], "lower_bound": 382, "map": [383, 513, 578], "map_alia": 384, "meta": [388, 389, 390, 391, 392, 393, 539], "has_multiple_output": 388, "is_regex_project": 389, "output_nam": 390, "pop": 391, "root_nam": 392, "undo_alias": 393, "mode": [395, 779], "nan_max": [397, 783], "nan_min": [398, 784], "over": 400, "pct_chang": [401, 787], "pow": 402, "prefix": 403, "rank": [406, 792], "reinterpret": [408, 794], "repeat_bi": 409, "reshap": [410, 796], "rolling_appli": [412, 798], "rolling_max": [413, 799], "rolling_mean": [414, 800], "rolling_median": [415, 801], "rolling_min": [416, 802], "rolling_quantil": [417, 803], "rolling_skew": [418, 804], "rolling_std": [419, 805], "rolling_sum": [420, 806], "rolling_var": [421, 807], "search_sort": [424, 810], "set_sort": [425, 814], "shrink_dtyp": [428, 818], "shuffl": [429, 820], "sign": [430, 821], "sin": [431, 822], "sinh": [432, 823], "skew": [433, 824], "sort_bi": 436, "sqrt": [437, 827], "str": [439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858], "count_match": [441, 832], "extract": [446, 837], "extract_al": [447, 838], "json_path_match": [448, 839], "ljust": [450, 841], "lstrip": [451, 842], "n_char": [452, 843], "parse_int": [453, 844], "replace_al": [455, 846], "rjust": [456, 847], "rstrip": [457, 848], "split": [459, 850], "split_exact": [460, 851], "splitn": [461, 852], "strip": [463, 854], "strptime": [464, 855], "to_lowercas": [465, 856], "to_uppercas": [466, 857], "zfill": [467, 858], "field": [468, 859, 860], "rename_field": [469, 861], "suffix": 470, "tan": [475, 868], "tanh": [476, 869], "to_phys": [477, 877], "top_k": [478, 878], "unique_count": [480, 880], "upper_bound": 481, "value_count": [482, 881], "where": 484, "arang": 488, "argsort_bi": 489, "avg": 490, "coalesc": 491, "col": 492, "concat_list": 493, "concat_str": 494, "cov": 496, "cumfold": 497, "cumreduc": 498, "element": 503, "format": 507, "from_epoch": 508, "group": 509, "lit": 512, "reduc": 521, "repeat": 522, "spearman_rank_corr": 524, "when": 530, "arrai": [531, 885], "categori": [534, 889], "name": [535, 782], "express": 538, "string": [542, 896], "tempor": [544, 898], "window": 545, "convers": 546, "eager": 546, "parallel": 546, "refer": 547, "input": 548, "output": 548, "csv": 548, "feather": 548, "ipc": 548, "parquet": 548, "sql": [548, 899], "json": 548, "avro": 548, "excel": 548, "delta": 548, "lake": 548, "dataset": 548, "lazyfram": [550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619], "cach": 550, "collect": 553, "describe_optimized_plan": 555, "describe_plan": 556, "fetch": 561, "from_json": 566, "profil": 586, "show_graph": 595, "sink_ipc": 596, "sink_parquet": 597, "with_context": 609, "lazygroupbi": [612, 613, 614, 615], "read": 620, "write": 620, "logic": 620, "plan": 620, "arg_tru": 638, "chunk_length": 676, "flag": 744, "get_chunk": 746, "has_valid": 747, "inner_dtyp": 750, "is_boolean": 752, "is_datelik": 753, "is_float": 758, "is_numer": 765, "is_sort": 766, "is_utf8": 768, "new_from_index": 785, "peak_max": 788, "peak_min": 789, "series_equ": 811, "set": 812, "set_at_idx": 813, "to_fram": [862, 873], "time_unit": 870, "to_list": 874, "view": 883, "zip_with": 884, "method": 899, "assert": 900, "properti": 900, "base": 900, "strategi": 900, "helper": 900, "util": 901}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.DataType": [[30, "polars-datatype"]], "polars.DataFrame.write_ndjson": [[28, "polars-dataframe-write-ndjson"]], "polars.SQLContext.execute": [[43, "polars-sqlcontext-execute"]], "polars.arg_where": [[60, "polars-arg-where"]], "polars.DataFrame.write_parquet": [[29, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_column_data_type_inline": [[13, "polars-config-set-tbl-column-data-type-inline"]], "polars.Time": [[48, "polars-time"]], "polars.Utf8": [[54, "polars-utf8"]], "polars.Config.set_tbl_hide_dtype_separator": [[19, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_json": [[27, "polars-dataframe-write-json"]], "polars.exceptions.ArrowError": [[66, "polars-exceptions-arrowerror"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.DataFrame.write_ipc": [[26, "polars-dataframe-write-ipc"]], "polars.SQLContext.query": [[44, "polars-sqlcontext-query"]], "polars.Config.set_tbl_hide_column_names": [[17, "polars-config-set-tbl-hide-column-names"]], "polars.date_range": [[65, "polars-date-range"]], "polars.DataFrame.write_avro": [[24, "polars-dataframe-write-avro"]], "polars.Int16": [[36, "polars-int16"]], "polars.Int32": [[37, "polars-int32"]], "polars.Object": [[42, "polars-object"]], "polars.Float32": [[34, "polars-float32"]], "polars.Config.state": [[23, "polars-config-state"]], "polars.Float64": [[35, "polars-float64"]], "polars.concat": [[63, "polars-concat"]], "polars.UInt16": [[49, "polars-uint16"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.Date": [[31, "polars-date"]], "polars.Int8": [[39, "polars-int8"]], "polars.api.register_expr_namespace": [[57, "polars-api-register-expr-namespace"]], "polars.build_info": [[61, "polars-build-info"]], "polars.UInt32": [[50, "polars-uint32"]], "polars.Config.set_fmt_str_lengths": [[10, "polars-config-set-fmt-str-lengths"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.Config.set_tbl_width_chars": [[21, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_cell_alignment": [[11, "polars-config-set-tbl-cell-alignment"]], "polars.Unknown": [[53, "polars-unknown"]], "polars.api.register_lazyframe_namespace": [[58, "polars-api-register-lazyframe-namespace"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.UInt64": [[51, "polars-uint64"]], "polars.Config.set_tbl_dataframe_shape_below": [[14, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Duration": [[33, "polars-duration"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Config.set_tbl_formatting": [[15, "polars-config-set-tbl-formatting"]], "polars.Config.set_verbose": [[22, "polars-config-set-verbose"]], "polars.Null": [[41, "polars-null"]], "polars.align_frames": [[55, "polars-align-frames"]], "polars.UInt8": [[52, "polars-uint8"]], "polars.Config.set_tbl_hide_dataframe_shape": [[18, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.api.register_dataframe_namespace": [[56, "polars-api-register-dataframe-namespace"]], "polars.Config.set_tbl_cols": [[12, "polars-config-set-tbl-cols"]], "polars.collect_all": [[62, "polars-collect-all"]], "polars.Config.set_tbl_rows": [[20, "polars-config-set-tbl-rows"]], "polars.SQLContext.register": [[45, "polars-sqlcontext-register"]], "polars.cut": [[64, "polars-cut"]], "polars.Int64": [[38, "polars-int64"]], "polars.Config.set_fmt_float": [[9, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_hide_column_data_types": [[16, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.write_csv": [[25, "polars-dataframe-write-csv"]], "polars.List": [[40, "polars-list"]], "polars.Datetime": [[32, "polars-datetime"]], "polars.Struct": [[47, "polars-struct"]], "polars.api.register_series_namespace": [[59, "polars-api-register-series-namespace"]], "polars.Binary": [[2, "polars-binary"]], "polars.exceptions.InvalidOperationError": [[70, "polars-exceptions-invalidoperationerror"]], "polars.read_json": [[98, "polars-read-json"]], "Config": [[119, "config"]], "Config options": [[119, "config-options"]], "Config load, save, and current state": [[119, "config-load-save-and-current-state"]], "Use as a context manager": [[119, "use-as-a-context-manager"]], "polars.from_arrow": [[80, "polars-from-arrow"]], "polars.from_dict": [[82, "polars-from-dict"]], "polars.scan_delta": [[104, "polars-scan-delta"]], "polars.DataFrame.explode": [[132, "polars-dataframe-explode"]], "polars.show_versions": [[109, "polars-show-versions"]], "polars.DataFrame.drop": [[127, "polars-dataframe-drop"]], "polars.testing.assert_series_equal": [[111, "polars-testing-assert-series-equal"]], "polars.from_dataframe": [[81, "polars-from-dataframe"]], "polars.exceptions.ShapeError": [[77, "polars-exceptions-shapeerror"]], "polars.read_sql": [[102, "polars-read-sql"]], "polars.DataFrame.drop_nulls": [[129, "polars-dataframe-drop-nulls"]], "Aggregation": [[120, "aggregation"], [622, "aggregation"], [549, "aggregation"], [241, "aggregation"]], "polars.read_ndjson": [[99, "polars-read-ndjson"]], "polars.from_records": [[86, "polars-from-records"]], "polars.scan_ndjson": [[107, "polars-scan-ndjson"]], "polars.exceptions.DuplicateError": [[69, "polars-exceptions-duplicateerror"]], "polars.DataFrame.cleared": [[123, "polars-dataframe-cleared"]], "polars.testing.assert_frame_equal": [[110, "polars-testing-assert-frame-equal"]], "polars.get_dummies": [[87, "polars-get-dummies"]], "polars.exceptions.NoRowsReturned": [[72, "polars-exceptions-norowsreturned"]], "polars.exceptions.NoDataError": [[71, "polars-exceptions-nodataerror"]], "polars.exceptions.PanicException": [[73, "polars-exceptions-panicexception"]], "polars.exceptions.SchemaFieldNotFoundError": [[76, "polars-exceptions-schemafieldnotfounderror"]], "polars.from_pandas": [[85, "polars-from-pandas"]], "polars.read_excel": [[95, "polars-read-excel"]], "polars.DataFrame.__dataframe__": [[121, "polars-dataframe-dataframe"]], "polars.DataFrame.apply": [[122, "polars-dataframe-apply"]], "polars.DataFrame.columns": [[125, "polars-dataframe-columns"]], "polars.scan_csv": [[103, "polars-scan-csv"]], "polars.from_numpy": [[84, "polars-from-numpy"]], "polars.read_csv_batched": [[93, "polars-read-csv-batched"]], "polars.DataFrame.drop_in_place": [[128, "polars-dataframe-drop-in-place"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[89, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.testing.parametric.column": [[112, "polars-testing-parametric-column"]], "polars.read_ipc_schema": [[97, "polars-read-ipc-schema"]], "polars.exceptions.TooManyRowsReturned": [[79, "polars-exceptions-toomanyrowsreturned"]], "polars.from_dicts": [[83, "polars-from-dicts"]], "polars.ones": [[90, "polars-ones"]], "polars.read_avro": [[91, "polars-read-avro"]], "polars.DataFrame.clone": [[124, "polars-dataframe-clone"]], "polars.exceptions.StructFieldNotFoundError": [[78, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.describe": [[126, "polars-dataframe-describe"]], "polars.testing.parametric.columns": [[113, "polars-testing-parametric-columns"]], "polars.read_parquet": [[100, "polars-read-parquet"]], "polars.zeros": [[118, "polars-zeros"]], "polars.testing.parametric.series": [[115, "polars-testing-parametric-series"]], "polars.read_ipc": [[96, "polars-read-ipc"]], "polars.get_idx_type": [[88, "polars-get-idx-type"]], "polars.read_delta": [[94, "polars-read-delta"]], "polars.exceptions.ColumnNotFoundError": [[67, "polars-exceptions-columnnotfounderror"]], "polars.scan_parquet": [[108, "polars-scan-parquet"]], "polars.threadpool_size": [[116, "polars-threadpool-size"]], "polars.toggle_string_cache": [[117, "polars-toggle-string-cache"]], "polars.DataFrame.estimated_size": [[131, "polars-dataframe-estimated-size"]], "polars.DataFrame.dtypes": [[130, "polars-dataframe-dtypes"]], "polars.read_parquet_schema": [[101, "polars-read-parquet-schema"]], "polars.testing.parametric.dataframes": [[114, "polars-testing-parametric-dataframes"]], "polars.scan_ipc": [[106, "polars-scan-ipc"]], "polars.DataFrame.extend": [[133, "polars-dataframe-extend"]], "polars.exceptions.SchemaError": [[75, "polars-exceptions-schemaerror"]], "polars.exceptions.ComputeError": [[68, "polars-exceptions-computeerror"]], "polars.exceptions.RowsException": [[74, "polars-exceptions-rowsexception"]], "polars.scan_ds": [[105, "polars-scan-ds"]], "polars.read_csv": [[92, "polars-read-csv"]], "polars.Series.str.rstrip": [[848, "polars-series-str-rstrip"]], "polars.Series.take": [[866, "polars-series-take"]], "polars.Series.struct.fields": [[860, "polars-series-struct-fields"]], "polars.Series.slice": [[825, "polars-series-slice"]], "polars.Series.sample": [[809, "polars-series-sample"]], "polars.Series.rolling_var": [[807, "polars-series-rolling-var"]], "polars.Series.shift": [[816, "polars-series-shift"]], "polars.Series.str.parse_int": [[844, "polars-series-str-parse-int"]], "polars.Series.str.zfill": [[858, "polars-series-str-zfill"]], "polars.Series.sum": [[864, "polars-series-sum"]], "polars.Series.shrink_dtype": [[818, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[819, "polars-series-shrink-to-fit"]], "polars.Series.str.splitn": [[852, "polars-series-str-splitn"]], "polars.Series.str.to_uppercase": [[857, "polars-series-str-to-uppercase"]], "polars.Series.struct.to_frame": [[862, "polars-series-struct-to-frame"]], "polars.Series.sign": [[821, "polars-series-sign"]], "polars.Series.struct.rename_fields": [[861, "polars-series-struct-rename-fields"]], "polars.Series.str.replace": [[845, "polars-series-str-replace"]], "polars.Series.str.n_chars": [[843, "polars-series-str-n-chars"]], "polars.Series.sinh": [[823, "polars-series-sinh"]], "polars.Series.str.encode": [[834, "polars-series-str-encode"]], "polars.Series.time_unit": [[870, "polars-series-time-unit"]], "polars.Series.str.decode": [[833, "polars-series-str-decode"]], "polars.Series.str.strip": [[854, "polars-series-str-strip"]], "polars.Series.series_equal": [[811, "polars-series-series-equal"]], "polars.Series.tanh": [[869, "polars-series-tanh"]], "polars.Series.shape": [[815, "polars-series-shape"]], "polars.Series.rolling_std": [[805, "polars-series-rolling-std"]], "polars.Series.set_at_idx": [[813, "polars-series-set-at-idx"]], "polars.Series.str.concat": [[830, "polars-series-str-concat"]], "polars.Series.search_sorted": [[810, "polars-series-search-sorted"]], "polars.Series.str.starts_with": [[853, "polars-series-str-starts-with"]], "polars.Series.tan": [[868, "polars-series-tan"]], "polars.Series.shuffle": [[820, "polars-series-shuffle"]], "polars.Series.std": [[828, "polars-series-std"]], "polars.Series.struct.unnest": [[863, "polars-series-struct-unnest"]], "polars.Series.str.ends_with": [[835, "polars-series-str-ends-with"]], "polars.Series.str.extract_all": [[838, "polars-series-str-extract-all"]], "polars.Series.set_sorted": [[814, "polars-series-set-sorted"]], "polars.Series.struct.field": [[859, "polars-series-struct-field"]], "polars.Series.tail": [[865, "polars-series-tail"]], "polars.Series.str.contains": [[831, "polars-series-str-contains"]], "polars.Series.take_every": [[867, "polars-series-take-every"]], "polars.Series.round": [[808, "polars-series-round"]], "polars.Series.str.explode": [[836, "polars-series-str-explode"]], "polars.Series.str.split": [[850, "polars-series-str-split"]], "polars.Series.str.json_path_match": [[839, "polars-series-str-json-path-match"]], "polars.Series.sqrt": [[827, "polars-series-sqrt"]], "polars.Series.str.count_match": [[832, "polars-series-str-count-match"]], "polars.Series.str.lstrip": [[842, "polars-series-str-lstrip"]], "polars.Series.str.rjust": [[847, "polars-series-str-rjust"]], "polars.Series.rolling_sum": [[806, "polars-series-rolling-sum"]], "polars.Series.rolling_skew": [[804, "polars-series-rolling-skew"]], "polars.Series.str.extract": [[837, "polars-series-str-extract"]], "polars.Series.str.replace_all": [[846, "polars-series-str-replace-all"]], "polars.Series.str.strptime": [[855, "polars-series-str-strptime"]], "polars.Series.str": [[829, "polars-series-str"]], "polars.Series.set": [[812, "polars-series-set"]], "polars.Series.skew": [[824, "polars-series-skew"]], "polars.Series.str.ljust": [[841, "polars-series-str-ljust"]], "polars.Series.str.split_exact": [[851, "polars-series-str-split-exact"]], "polars.Series.str.to_lowercase": [[856, "polars-series-str-to-lowercase"]], "polars.Series.sin": [[822, "polars-series-sin"]], "polars.Series.str.slice": [[849, "polars-series-str-slice"]], "polars.Series.shift_and_fill": [[817, "polars-series-shift-and-fill"]], "polars.Series.sort": [[826, "polars-series-sort"]], "polars.Series.str.lengths": [[840, "polars-series-str-lengths"]], "polars.Series.product": [[790, "polars-series-product"]], "polars.Series.rolling_quantile": [[803, "polars-series-rolling-quantile"]], "polars.Series.get_chunks": [[746, "polars-series-get-chunks"]], "polars.Series.ewm_var": [[737, "polars-series-ewm-var"]], "polars.Series.is_datelike": [[753, "polars-series-is-datelike"]], "polars.Series.reshape": [[796, "polars-series-reshape"]], "polars.Series.is_finite": [[756, "polars-series-is-finite"]], "polars.Series.rolling_max": [[799, "polars-series-rolling-max"]], "polars.Series.len": [[771, "polars-series-len"]], "polars.Series.n_unique": [[781, "polars-series-n-unique"]], "polars.Series.peak_min": [[789, "polars-series-peak-min"]], "polars.Series.interpolate": [[751, "polars-series-interpolate"]], "polars.Series.rolling_mean": [[800, "polars-series-rolling-mean"]], "polars.Series.nan_max": [[783, "polars-series-nan-max"]], "polars.Series.is_first": [[757, "polars-series-is-first"]], "polars.Series.null_count": [[786, "polars-series-null-count"]], "polars.Series.fill_null": [[742, "polars-series-fill-null"]], "polars.Series.min": [[778, "polars-series-min"]], "polars.Series.head": [[749, "polars-series-head"]], "polars.Series.reinterpret": [[794, "polars-series-reinterpret"]], "polars.Series.is_nan": [[761, "polars-series-is-nan"]], "polars.Series.log10": [[774, "polars-series-log10"]], "polars.Series.reverse": [[797, "polars-series-reverse"]], "polars.Series.rechunk": [[793, "polars-series-rechunk"]], "polars.Series.is_null": [[764, "polars-series-is-null"]], "polars.Series.peak_max": [[788, "polars-series-peak-max"]], "polars.Series.log": [[773, "polars-series-log"]], "polars.Series.explode": [[739, "polars-series-explode"]], "polars.Series.extend_constant": [[740, "polars-series-extend-constant"]], "polars.Series.is_infinite": [[760, "polars-series-is-infinite"]], "polars.Series.max": [[775, "polars-series-max"]], "polars.Series.is_in": [[759, "polars-series-is-in"]], "polars.Series.is_numeric": [[765, "polars-series-is-numeric"]], "polars.Series.nan_min": [[784, "polars-series-nan-min"]], "polars.Series.kurtosis": [[770, "polars-series-kurtosis"]], "polars.Series.rolling_median": [[801, "polars-series-rolling-median"]], "polars.Series.floor": [[745, "polars-series-floor"]], "polars.Series.hash": [[748, "polars-series-hash"]], "polars.Series.limit": [[772, "polars-series-limit"]], "polars.Series.is_not_nan": [[762, "polars-series-is-not-nan"]], "polars.Series.is_unique": [[767, "polars-series-is-unique"]], "polars.Series.filter": [[743, "polars-series-filter"]], "polars.Series.mean": [[776, "polars-series-mean"]], "polars.Series.is_utf8": [[768, "polars-series-is-utf8"]], "polars.Series.item": [[769, "polars-series-item"]], "polars.Series.rank": [[792, "polars-series-rank"]], "polars.Series.rolling_min": [[802, "polars-series-rolling-min"]], "polars.Series.median": [[777, "polars-series-median"]], "polars.Series.has_validity": [[747, "polars-series-has-validity"]], "polars.Series.fill_nan": [[741, "polars-series-fill-nan"]], "polars.Series.is_boolean": [[752, "polars-series-is-boolean"]], "polars.Series.is_sorted": [[766, "polars-series-is-sorted"]], "polars.Series.is_not_null": [[763, "polars-series-is-not-null"]], "polars.Series.rolling_apply": [[798, "polars-series-rolling-apply"]], "polars.Series.new_from_index": [[785, "polars-series-new-from-index"]], "polars.Series.exp": [[738, "polars-series-exp"]], "polars.Series.n_chunks": [[780, "polars-series-n-chunks"]], "polars.Series.inner_dtype": [[750, "polars-series-inner-dtype"]], "polars.Series.mode": [[779, "polars-series-mode"]], "polars.Series.name": [[782, "polars-series-name"]], "polars.Series.is_float": [[758, "polars-series-is-float"]], "polars.Series.rename": [[795, "polars-series-rename"]], "polars.Series.flags": [[744, "polars-series-flags"]], "polars.Series.quantile": [[791, "polars-series-quantile"]], "polars.Series.is_empty": [[755, "polars-series-is-empty"]], "polars.Series.pct_change": [[787, "polars-series-pct-change"]], "polars.Series.is_duplicated": [[754, "polars-series-is-duplicated"]], "polars.Series.dt.offset_by": [[717, "polars-series-dt-offset-by"]], "polars.Series.cumsum": [[687, "polars-series-cumsum"]], "polars.Series.cat": [[673, "polars-series-cat"]], "polars.Series.dt.minute": [[712, "polars-series-dt-minute"]], "polars.Series.dt.nanoseconds": [[716, "polars-series-dt-nanoseconds"]], "polars.Series.drop_nans": [[692, "polars-series-drop-nans"]], "polars.Series.bin.starts_with": [[671, "polars-series-bin-starts-with"]], "polars.Series.describe": [[689, "polars-series-describe"]], "polars.Series.dt.mean": [[705, "polars-series-dt-mean"]], "polars.Series.dt.with_time_unit": [[729, "polars-series-dt-with-time-unit"]], "polars.Series.entropy": [[733, "polars-series-entropy"]], "polars.Series.dt.day": [[698, "polars-series-dt-day"]], "polars.Series.dt.hour": [[701, "polars-series-dt-hour"]], "polars.Series.ewm_std": [[736, "polars-series-ewm-std"]], "polars.Series.clone": [[681, "polars-series-clone"]], "polars.Series.dt": [[694, "polars-series-dt"]], "polars.Series.cat.set_ordering": [[674, "polars-series-cat-set-ordering"]], "polars.Series.dt.cast_time_unit": [[695, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.with_time_zone": [[730, "polars-series-dt-with-time-zone"]], "polars.Series.cummin": [[685, "polars-series-cummin"]], "polars.Series.dt.truncate": [[725, "polars-series-dt-truncate"]], "polars.Series.dt.week": [[727, "polars-series-dt-week"]], "polars.Series.estimated_size": [[734, "polars-series-estimated-size"]], "polars.Series.dt.iso_year": [[703, "polars-series-dt-iso-year"]], "polars.Series.cleared": [[677, "polars-series-cleared"]], "polars.Series.cumulative_eval": [[688, "polars-series-cumulative-eval"]], "polars.Series.dt.microseconds": [[708, "polars-series-dt-microseconds"]], "polars.Series.bin.ends_with": [[670, "polars-series-bin-ends-with"]], "polars.Series.ceil": [[675, "polars-series-ceil"]], "polars.Series.clip_max": [[679, "polars-series-clip-max"]], "polars.Series.dt.days": [[699, "polars-series-dt-days"]], "polars.Series.cumprod": [[686, "polars-series-cumprod"]], "polars.Series.dt.microsecond": [[707, "polars-series-dt-microsecond"]], "polars.Series.dt.cast_time_zone": [[696, "polars-series-dt-cast-time-zone"]], "polars.Series.clip": [[678, "polars-series-clip"]], "polars.Series.dt.nanosecond": [[715, "polars-series-dt-nanosecond"]], "polars.Series.diff": [[690, "polars-series-diff"]], "polars.Series.dt.tz_localize": [[726, "polars-series-dt-tz-localize"]], "polars.Series.ewm_mean": [[735, "polars-series-ewm-mean"]], "polars.Series.dt.minutes": [[713, "polars-series-dt-minutes"]], "polars.Series.dt.milliseconds": [[710, "polars-series-dt-milliseconds"]], "polars.Series.dt.epoch": [[700, "polars-series-dt-epoch"]], "polars.Series.cosh": [[683, "polars-series-cosh"]], "polars.Series.dt.millisecond": [[709, "polars-series-dt-millisecond"]], "polars.Series.dt.quarter": [[719, "polars-series-dt-quarter"]], "polars.Series.dt.max": [[704, "polars-series-dt-max"]], "polars.Series.dt.median": [[706, "polars-series-dt-median"]], "polars.Series.dt.timestamp": [[724, "polars-series-dt-timestamp"]], "polars.Series.dt.weekday": [[728, "polars-series-dt-weekday"]], "polars.Series.dt.combine": [[697, "polars-series-dt-combine"]], "polars.Series.dt.strftime": [[723, "polars-series-dt-strftime"]], "polars.Series.dt.month": [[714, "polars-series-dt-month"]], "polars.Series.dt.second": [[721, "polars-series-dt-second"]], "polars.Series.cos": [[682, "polars-series-cos"]], "polars.Series.dt.hours": [[702, "polars-series-dt-hours"]], "polars.Series.dt.round": [[720, "polars-series-dt-round"]], "polars.Series.dt.ordinal_day": [[718, "polars-series-dt-ordinal-day"]], "polars.Series.drop_nulls": [[693, "polars-series-drop-nulls"]], "polars.Series.dot": [[691, "polars-series-dot"]], "polars.Series.clip_min": [[680, "polars-series-clip-min"]], "polars.Series.dt.min": [[711, "polars-series-dt-min"]], "polars.Series.cast": [[672, "polars-series-cast"]], "polars.Series.dtype": [[732, "polars-series-dtype"]], "polars.Series.dt.year": [[731, "polars-series-dt-year"]], "polars.Series.chunk_lengths": [[676, "polars-series-chunk-lengths"]], "polars.Series.dt.seconds": [[722, "polars-series-dt-seconds"]], "polars.Series.cummax": [[684, "polars-series-cummax"]], "polars.Series.to_frame": [[873, "polars-series-to-frame"]], "polars.Series.zip_with": [[884, "polars-series-zip-with"]], "Array": [[885, "array"], [531, "array"]], "polars.Series.to_pandas": [[876, "polars-series-to-pandas"]], "Utils": [[901, "utils"]], "polars.Series.to_numpy": [[875, "polars-series-to-numpy"]], "Export": [[892, "export"], [234, "export"]], "polars.Series.value_counts": [[881, "polars-series-value-counts"]], "Boolean": [[888, "boolean"], [533, "boolean"]], "polars.Series.to_dummies": [[872, "polars-series-to-dummies"]], "Descriptive": [[891, "descriptive"], [617, "descriptive"], [233, "descriptive"]], "Binary": [[887, "binary"], [532, "binary"]], "polars.Series.view": [[883, "polars-series-view"]], "polars.Series.top_k": [[878, "polars-series-top-k"]], "Miscellaneous": [[894, "miscellaneous"], [620, "miscellaneous"], [546, "miscellaneous"], [540, "miscellaneous"], [237, "miscellaneous"]], "polars.Series.unique": [[879, "polars-series-unique"]], "Attributes": [[886, "attributes"], [616, "attributes"], [231, "attributes"]], "Strings": [[896, "strings"], [542, "strings"]], "SQL": [[899, "sql"], [548, "sql"]], "Methods": [[899, "methods"]], "Testing": [[900, "testing"]], "Asserts": [[900, "asserts"]], "Property-based testing": [[900, "property-based-testing"]], "Strategies": [[900, "strategies"]], "Strategy helpers": [[900, "strategy-helpers"]], "Temporal": [[898, "temporal"], [544, "temporal"]], "polars.Series.var": [[882, "polars-series-var"]], "polars.Series.unique_counts": [[880, "polars-series-unique-counts"]], "Series": [[893, "series"]], "polars.Series.to_list": [[874, "polars-series-to-list"]], "polars.Series.to_physical": [[877, "polars-series-to-physical"]], "polars.Series.to_arrow": [[871, "polars-series-to-arrow"]], "Struct": [[897, "struct"], [543, "struct"]], "Computation": [[890, "computation"], [536, "computation"], [232, "computation"]], "Manipulation/selection": [[895, "manipulation-selection"], [621, "manipulation-selection"], [541, "manipulation-selection"], [238, "manipulation-selection"]], "Categories": [[889, "categories"], [534, "categories"]], "GroupBy": [[618, "groupby"], [235, "groupby"]], "polars.Series.arr.get": [[650, "polars-series-arr-get"]], "polars.Series.arr.tail": [[663, "polars-series-arr-tail"]], "polars.LazyFrame.with_row_count": [[610, "polars-lazyframe-with-row-count"]], "polars.Series.arr.head": [[651, "polars-series-arr-head"]], "polars.Series.arr.join": [[652, "polars-series-arr-join"]], "polars.Series.all": [[625, "polars-series-all"]], "polars.Series.arr.to_struct": [[665, "polars-series-arr-to-struct"]], "polars.LazyFrame.write_json": [[611, "polars-lazyframe-write-json"]], "LazyFrame": [[619, "lazyframe"]], "polars.Series.arg_true": [[638, "polars-series-arg-true"]], "polars.Series.bin.encode": [[669, "polars-series-bin-encode"]], "polars.Series.arr.unique": [[666, "polars-series-arr-unique"]], "polars.Series.arctan": [[633, "polars-series-arctan"]], "polars.Series.arr.mean": [[656, "polars-series-arr-mean"]], "polars.Series.arr.diff": [[646, "polars-series-arr-diff"]], "polars.Series.arr.sum": [[662, "polars-series-arr-sum"]], "polars.Series.arcsinh": [[632, "polars-series-arcsinh"]], "polars.Series.arr.lengths": [[654, "polars-series-arr-lengths"]], "polars.Series.arr.max": [[655, "polars-series-arr-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[614, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.arg_min": [[636, "polars-series-arg-min"]], "polars.Series.arr.explode": [[648, "polars-series-arr-explode"]], "polars.Series.arr.take": [[664, "polars-series-arr-take"]], "polars.Series.any": [[626, "polars-series-any"]], "polars.Series.arr.first": [[649, "polars-series-arr-first"]], "polars.Series.arr.slice": [[660, "polars-series-arr-slice"]], "polars.Series.arctanh": [[634, "polars-series-arctanh"]], "polars.Series.arr.arg_min": [[643, "polars-series-arr-arg-min"]], "polars.Series.arr.sort": [[661, "polars-series-arr-sort"]], "polars.Series.arg_unique": [[639, "polars-series-arg-unique"]], "polars.Series.arcsin": [[631, "polars-series-arcsin"]], "polars.LazyFrame.with_context": [[609, "polars-lazyframe-with-context"]], "polars.Series.argsort": [[640, "polars-series-argsort"]], "polars.LazyFrame.unnest": [[605, "polars-lazyframe-unnest"]], "polars.LazyFrame.with_columns": [[608, "polars-lazyframe-with-columns"]], "polars.Series.arg_max": [[635, "polars-series-arg-max"]], "polars.LazyFrame.width": [[607, "polars-lazyframe-width"]], "polars.Series.arr.arg_max": [[642, "polars-series-arr-arg-max"]], "polars.Series.arccosh": [[630, "polars-series-arccosh"]], "polars.LazyFrame.var": [[606, "polars-lazyframe-var"]], "polars.Series.bin.contains": [[667, "polars-series-bin-contains"]], "polars.Series.arr.min": [[657, "polars-series-arr-min"]], "polars.Series.arr.concat": [[644, "polars-series-arr-concat"]], "polars.Series.arr.contains": [[645, "polars-series-arr-contains"]], "polars.Series.arr.last": [[653, "polars-series-arr-last"]], "polars.Series.arg_sort": [[637, "polars-series-arg-sort"]], "polars.Series.arr.shift": [[659, "polars-series-arr-shift"]], "polars.Series.arr.reverse": [[658, "polars-series-arr-reverse"]], "polars.Series.append": [[627, "polars-series-append"]], "polars.Series.arr.eval": [[647, "polars-series-arr-eval"]], "polars.Series.alias": [[624, "polars-series-alias"]], "polars.LazyFrame.take_every": [[603, "polars-lazyframe-take-every"]], "polars.Series.abs": [[623, "polars-series-abs"]], "polars.Series.arr": [[641, "polars-series-arr"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[615, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.bin.decode": [[668, "polars-series-bin-decode"]], "polars.LazyFrame.unique": [[604, "polars-lazyframe-unique"]], "Read/write logical plan": [[620, "read-write-logical-plan"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[612, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arccos": [[629, "polars-series-arccos"]], "polars.Series.apply": [[628, "polars-series-apply"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[613, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Expr.sum": [[471, "polars-expr-sum"]], "polars.any": [[486, "polars-any"]], "polars.from_epoch": [[508, "polars-from-epoch"]], "polars.spearman_rank_corr": [[524, "polars-spearman-rank-corr"]], "polars.date": [[500, "polars-date"]], "polars.Expr.take": [[473, "polars-expr-take"]], "polars.concat_str": [[494, "polars-concat-str"]], "polars.cumreduce": [[498, "polars-cumreduce"]], "polars.tail": [[528, "polars-tail"]], "polars.mean": [[515, "polars-mean"]], "polars.Expr.unique": [[479, "polars-expr-unique"]], "polars.Expr.struct.rename_fields": [[469, "polars-expr-struct-rename-fields"]], "polars.Expr.tan": [[475, "polars-expr-tan"]], "polars.struct": [[526, "polars-struct"]], "polars.fold": [[506, "polars-fold"]], "polars.format": [[507, "polars-format"]], "polars.select": [[523, "polars-select"]], "polars.arange": [[488, "polars-arange"]], "polars.reduce": [[521, "polars-reduce"]], "polars.repeat": [[522, "polars-repeat"]], "polars.min": [[517, "polars-min"]], "polars.median": [[516, "polars-median"]], "polars.head": [[510, "polars-head"]], "polars.coalesce": [[491, "polars-coalesce"]], "polars.all": [[485, "polars-all"]], "polars.groups": [[509, "polars-groups"]], "polars.duration": [[502, "polars-duration"]], "polars.apply": [[487, "polars-apply"]], "polars.col": [[492, "polars-col"]], "polars.Expr.unique_counts": [[480, "polars-expr-unique-counts"]], "polars.concat_list": [[493, "polars-concat-list"]], "polars.datetime": [[501, "polars-datetime"]], "polars.list": [[511, "polars-list"]], "polars.Expr.top_k": [[478, "polars-expr-top-k"]], "polars.Expr.value_counts": [[482, "polars-expr-value-counts"]], "polars.avg": [[490, "polars-avg"]], "polars.std": [[525, "polars-std"]], "Columns / names": [[535, "columns-names"]], "polars.quantile": [[520, "polars-quantile"]], "polars.n_unique": [[518, "polars-n-unique"]], "polars.cumfold": [[497, "polars-cumfold"]], "polars.sum": [[527, "polars-sum"]], "polars.Expr.take_every": [[474, "polars-expr-take-every"]], "polars.Expr.to_physical": [[477, "polars-expr-to-physical"]], "polars.cumsum": [[499, "polars-cumsum"]], "polars.count": [[495, "polars-count"]], "polars.exclude": [[504, "polars-exclude"]], "polars.cov": [[496, "polars-cov"]], "polars.Expr.tail": [[472, "polars-expr-tail"]], "polars.pearson_corr": [[519, "polars-pearson-corr"]], "polars.element": [[503, "polars-element"]], "polars.lit": [[512, "polars-lit"]], "polars.first": [[505, "polars-first"]], "polars.map": [[513, "polars-map"]], "polars.when": [[530, "polars-when"]], "polars.max": [[514, "polars-max"]], "polars.Expr.where": [[484, "polars-expr-where"]], "polars.Expr.suffix": [[470, "polars-expr-suffix"]], "polars.argsort_by": [[489, "polars-argsort-by"]], "polars.Expr.var": [[483, "polars-expr-var"]], "polars.Expr.upper_bound": [[481, "polars-expr-upper-bound"]], "polars.Expr.tanh": [[476, "polars-expr-tanh"]], "polars.var": [[529, "polars-var"]], "polars.Expr.struct.field": [[468, "polars-expr-struct-field"]], "polars.Expr.rolling_var": [[421, "polars-expr-rolling-var"]], "polars.Expr.sample": [[423, "polars-expr-sample"]], "polars.Expr.sort_by": [[436, "polars-expr-sort-by"]], "polars.Expr.rolling_sum": [[420, "polars-expr-rolling-sum"]], "polars.Expr.str.slice": [[458, "polars-expr-str-slice"]], "polars.Expr.search_sorted": [[424, "polars-expr-search-sorted"]], "polars.Expr.str.to_lowercase": [[465, "polars-expr-str-to-lowercase"]], "polars.Expr.str.parse_int": [[453, "polars-expr-str-parse-int"]], "polars.Expr.rolling_apply": [[412, "polars-expr-rolling-apply"]], "polars.Expr.str.explode": [[445, "polars-expr-str-explode"]], "polars.Expr.str.encode": [[443, "polars-expr-str-encode"]], "polars.Expr.reshape": [[410, "polars-expr-reshape"]], "polars.Expr.str.extract": [[446, "polars-expr-str-extract"]], "polars.Expr.sign": [[430, "polars-expr-sign"]], "polars.Expr.round": [[422, "polars-expr-round"]], "polars.Expr.std": [[438, "polars-expr-std"]], "polars.Expr.str.json_path_match": [[448, "polars-expr-str-json-path-match"]], "polars.Expr.str.splitn": [[461, "polars-expr-str-splitn"]], "polars.Expr.rolling_median": [[415, "polars-expr-rolling-median"]], "polars.Expr.str.contains": [[440, "polars-expr-str-contains"]], "polars.Expr.sqrt": [[437, "polars-expr-sqrt"]], "polars.Expr.shift": [[426, "polars-expr-shift"]], "polars.Expr.prefix": [[403, "polars-expr-prefix"]], "polars.Expr.rolling_mean": [[414, "polars-expr-rolling-mean"]], "polars.Expr.str.zfill": [[467, "polars-expr-str-zfill"]], "polars.Expr.skew": [[433, "polars-expr-skew"]], "polars.Expr.set_sorted": [[425, "polars-expr-set-sorted"]], "polars.Expr.str.n_chars": [[452, "polars-expr-str-n-chars"]], "polars.Expr.str.replace_all": [[455, "polars-expr-str-replace-all"]], "polars.Expr.str.extract_all": [[447, "polars-expr-str-extract-all"]], "polars.Expr.rolling_std": [[419, "polars-expr-rolling-std"]], "polars.Expr.str.rstrip": [[457, "polars-expr-str-rstrip"]], "polars.Expr.str.strptime": [[464, "polars-expr-str-strptime"]], "polars.Expr.str.ends_with": [[444, "polars-expr-str-ends-with"]], "polars.Expr.rechunk": [[407, "polars-expr-rechunk"]], "polars.Expr.rank": [[406, "polars-expr-rank"]], "polars.Expr.sinh": [[432, "polars-expr-sinh"]], "polars.Expr.slice": [[434, "polars-expr-slice"]], "polars.Expr.str.ljust": [[450, "polars-expr-str-ljust"]], "polars.Expr.rolling_max": [[413, "polars-expr-rolling-max"]], "polars.Expr.repeat_by": [[409, "polars-expr-repeat-by"]], "polars.Expr.str.concat": [[439, "polars-expr-str-concat"]], "polars.Expr.pow": [[402, "polars-expr-pow"]], "polars.Expr.str.split": [[459, "polars-expr-str-split"]], "polars.Expr.str.starts_with": [[462, "polars-expr-str-starts-with"]], "polars.Expr.quantile": [[405, "polars-expr-quantile"]], "polars.Expr.sin": [[431, "polars-expr-sin"]], "polars.Expr.str.lstrip": [[451, "polars-expr-str-lstrip"]], "polars.Expr.rolling_min": [[416, "polars-expr-rolling-min"]], "polars.Expr.shuffle": [[429, "polars-expr-shuffle"]], "polars.Expr.str.to_uppercase": [[466, "polars-expr-str-to-uppercase"]], "polars.Expr.str.rjust": [[456, "polars-expr-str-rjust"]], "polars.Expr.str.replace": [[454, "polars-expr-str-replace"]], "polars.Expr.shrink_dtype": [[428, "polars-expr-shrink-dtype"]], "polars.Expr.str.strip": [[463, "polars-expr-str-strip"]], "polars.Expr.product": [[404, "polars-expr-product"]], "polars.Expr.str.split_exact": [[460, "polars-expr-str-split-exact"]], "polars.Expr.shift_and_fill": [[427, "polars-expr-shift-and-fill"]], "polars.Expr.rolling_quantile": [[417, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_skew": [[418, "polars-expr-rolling-skew"]], "polars.Expr.reinterpret": [[408, "polars-expr-reinterpret"]], "polars.Expr.sort": [[435, "polars-expr-sort"]], "polars.Expr.reverse": [[411, "polars-expr-reverse"]], "polars.Expr.str.lengths": [[449, "polars-expr-str-lengths"]], "polars.Expr.str.count_match": [[441, "polars-expr-str-count-match"]], "polars.Expr.str.decode": [[442, "polars-expr-str-decode"]], "polars.Expr.meta.pop": [[391, "polars-expr-meta-pop"]], "polars.Expr.median": [[387, "polars-expr-median"]], "polars.Expr.nan_min": [[398, "polars-expr-nan-min"]], "polars.Expr.is_null": [[372, "polars-expr-is-null"]], "polars.Expr.meta.undo_aliases": [[393, "polars-expr-meta-undo-aliases"]], "polars.Expr.last": [[376, "polars-expr-last"]], "polars.Expr.len": [[377, "polars-expr-len"]], "polars.Expr.dt.year": [[342, "polars-expr-dt-year"]], "polars.Expr.exclude": [[347, "polars-expr-exclude"]], "polars.Expr.dt.week": [[338, "polars-expr-dt-week"]], "polars.Expr.dt.with_time_zone": [[341, "polars-expr-dt-with-time-zone"]], "polars.Expr.is_not": [[369, "polars-expr-is-not"]], "polars.Expr.list": [[379, "polars-expr-list"]], "polars.Expr.meta.has_multiple_outputs": [[388, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.dt.truncate": [[336, "polars-expr-dt-truncate"]], "polars.Expr.ewm_mean": [[344, "polars-expr-ewm-mean"]], "polars.Expr.is_nan": [[368, "polars-expr-is-nan"]], "polars.Expr.is_not_null": [[371, "polars-expr-is-not-null"]], "polars.Expr.map": [[383, "polars-expr-map"]], "polars.Expr.nan_max": [[397, "polars-expr-nan-max"]], "polars.Expr.is_not_nan": [[370, "polars-expr-is-not-nan"]], "polars.Expr.map_alias": [[384, "polars-expr-map-alias"]], "polars.Expr.is_between": [[362, "polars-expr-is-between"]], "polars.Expr.mode": [[395, "polars-expr-mode"]], "polars.Expr.hash": [[358, "polars-expr-hash"]], "polars.Expr.fill_nan": [[351, "polars-expr-fill-nan"]], "polars.Expr.null_count": [[399, "polars-expr-null-count"]], "polars.Expr.is_finite": [[364, "polars-expr-is-finite"]], "polars.Expr.interpolate": [[361, "polars-expr-interpolate"]], "polars.Expr.first": [[354, "polars-expr-first"]], "polars.Expr.ewm_std": [[345, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[346, "polars-expr-ewm-var"]], "polars.Expr.inspect": [[360, "polars-expr-inspect"]], "polars.Expr.is_first": [[365, "polars-expr-is-first"]], "polars.Expr.dt.with_time_unit": [[340, "polars-expr-dt-with-time-unit"]], "polars.Expr.keep_name": [[374, "polars-expr-keep-name"]], "polars.Expr.over": [[400, "polars-expr-over"]], "polars.Expr.min": [[394, "polars-expr-min"]], "polars.Expr.forward_fill": [[357, "polars-expr-forward-fill"]], "polars.Expr.kurtosis": [[375, "polars-expr-kurtosis"]], "polars.Expr.log10": [[381, "polars-expr-log10"]], "polars.Expr.max": [[385, "polars-expr-max"]], "polars.Expr.pct_change": [[401, "polars-expr-pct-change"]], "polars.Expr.is_duplicated": [[363, "polars-expr-is-duplicated"]], "polars.Expr.lower_bound": [[382, "polars-expr-lower-bound"]], "polars.Expr.meta.output_name": [[390, "polars-expr-meta-output-name"]], "polars.Expr.filter": [[353, "polars-expr-filter"]], "polars.Expr.dt.tz_localize": [[337, "polars-expr-dt-tz-localize"]], "polars.Expr.mean": [[386, "polars-expr-mean"]], "polars.Expr.exp": [[348, "polars-expr-exp"]], "polars.Expr.head": [[359, "polars-expr-head"]], "polars.Expr.floor": [[356, "polars-expr-floor"]], "polars.Expr.is_unique": [[373, "polars-expr-is-unique"]], "polars.Expr.extend_constant": [[350, "polars-expr-extend-constant"]], "polars.Expr.flatten": [[355, "polars-expr-flatten"]], "polars.Expr.entropy": [[343, "polars-expr-entropy"]], "polars.Expr.limit": [[378, "polars-expr-limit"]], "polars.Expr.log": [[380, "polars-expr-log"]], "polars.Expr.dt.timestamp": [[335, "polars-expr-dt-timestamp"]], "polars.Expr.n_unique": [[396, "polars-expr-n-unique"]], "polars.Expr.meta.is_regex_projection": [[389, "polars-expr-meta-is-regex-projection"]], "polars.Expr.fill_null": [[352, "polars-expr-fill-null"]], "polars.Expr.explode": [[349, "polars-expr-explode"]], "polars.Expr.dt.weekday": [[339, "polars-expr-dt-weekday"]], "polars.Expr.is_infinite": [[367, "polars-expr-is-infinite"]], "polars.Expr.is_in": [[366, "polars-expr-is-in"]], "polars.Expr.meta.root_names": [[392, "polars-expr-meta-root-names"]], "polars.LazyFrame.fetch": [[561, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_null": [[563, "polars-lazyframe-fill-null"]], "polars.LazyFrame.last": [[575, "polars-lazyframe-last"]], "polars.LazyFrame.show_graph": [[595, "polars-lazyframe-show-graph"]], "polars.LazyFrame.select": [[592, "polars-lazyframe-select"]], "polars.LazyFrame.max": [[579, "polars-lazyframe-max"]], "polars.LazyFrame.limit": [[577, "polars-lazyframe-limit"]], "polars.LazyFrame.sink_ipc": [[596, "polars-lazyframe-sink-ipc"]], "Expressions": [[538, "expressions"]], "API reference": [[547, "api-reference"]], "polars.LazyFrame.dtypes": [[559, "polars-lazyframe-dtypes"]], "polars.LazyFrame.describe_optimized_plan": [[555, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.reverse": [[590, "polars-lazyframe-reverse"]], "polars.LazyFrame.cache": [[550, "polars-lazyframe-cache"]], "polars.LazyFrame.tail": [[602, "polars-lazyframe-tail"]], "Input/output": [[548, "input-output"]], "CSV": [[548, "csv"]], "Feather/ IPC": [[548, "feather-ipc"]], "Parquet": [[548, "parquet"]], "JSON": [[548, "json"]], "AVRO": [[548, "avro"]], "Excel": [[548, "excel"]], "Delta Lake": [[548, "delta-lake"]], "Datasets": [[548, "datasets"]], "BatchedCsvReader": [[548, "batchedcsvreader"]], "polars.LazyFrame.from_json": [[566, "polars-lazyframe-from-json"]], "polars.LazyFrame.collect": [[553, "polars-lazyframe-collect"]], "polars.LazyFrame.groupby_rolling": [[569, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.quantile": [[587, "polars-lazyframe-quantile"]], "polars.LazyFrame.columns": [[554, "polars-lazyframe-columns"]], "Meta": [[539, "meta"]], "polars.LazyFrame.melt": [[582, "polars-lazyframe-melt"]], "polars.LazyFrame.fill_nan": [[562, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.min": [[584, "polars-lazyframe-min"]], "polars.LazyFrame.clone": [[552, "polars-lazyframe-clone"]], "polars.LazyFrame.groupby": [[567, "polars-lazyframe-groupby"]], "polars.LazyFrame.shift": [[593, "polars-lazyframe-shift"]], "polars.LazyFrame.median": [[581, "polars-lazyframe-median"]], "polars.LazyFrame.groupby_dynamic": [[568, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.lazy": [[576, "polars-lazyframe-lazy"]], "polars.LazyFrame.merge_sorted": [[583, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.std": [[600, "polars-lazyframe-std"]], "polars.LazyFrame.read_json": [[588, "polars-lazyframe-read-json"]], "polars.LazyFrame.profile": [[586, "polars-lazyframe-profile"]], "Window": [[545, "window"]], "polars.LazyFrame.interpolate": [[572, "polars-lazyframe-interpolate"]], "polars.LazyFrame.slice": [[598, "polars-lazyframe-slice"]], "polars.LazyFrame.first": [[565, "polars-lazyframe-first"]], "polars.LazyFrame.join_asof": [[574, "polars-lazyframe-join-asof"]], "polars.LazyFrame.sort": [[599, "polars-lazyframe-sort"]], "polars.LazyFrame.head": [[570, "polars-lazyframe-head"]], "polars.LazyFrame.map": [[578, "polars-lazyframe-map"]], "Functions": [[546, "functions"], [537, "functions"], [239, "functions"]], "Conversion": [[546, "conversion"]], "Eager/Lazy functions": [[546, "eager-lazy-functions"]], "Parallelization": [[546, "parallelization"]], "StringCache": [[546, "stringcache"]], "polars.LazyFrame.drop": [[557, "polars-lazyframe-drop"]], "polars.LazyFrame.schema": [[591, "polars-lazyframe-schema"]], "polars.LazyFrame.mean": [[580, "polars-lazyframe-mean"]], "polars.LazyFrame.drop_nulls": [[558, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.pipe": [[585, "polars-lazyframe-pipe"]], "polars.LazyFrame.sink_parquet": [[597, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.shift_and_fill": [[594, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.filter": [[564, "polars-lazyframe-filter"]], "polars.LazyFrame.explode": [[560, "polars-lazyframe-explode"]], "polars.LazyFrame.describe_plan": [[556, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.cleared": [[551, "polars-lazyframe-cleared"]], "polars.LazyFrame.rename": [[589, "polars-lazyframe-rename"]], "polars.LazyFrame.sum": [[601, "polars-lazyframe-sum"]], "polars.LazyFrame.inspect": [[571, "polars-lazyframe-inspect"]], "polars.LazyFrame.join": [[573, "polars-lazyframe-join"]], "polars.Expr.diff": [[306, "polars-expr-diff"]], "polars.Expr.arr.sort": [[279, "polars-expr-arr-sort"]], "polars.Expr.arr.slice": [[278, "polars-expr-arr-slice"]], "polars.Expr.bin.ends_with": [[289, "polars-expr-bin-ends-with"]], "polars.Expr.dt.nanoseconds": [[327, "polars-expr-dt-nanoseconds"]], "polars.Expr.clip_min": [[296, "polars-expr-clip-min"]], "polars.Expr.arr.max": [[273, "polars-expr-arr-max"]], "polars.Expr.dot": [[307, "polars-expr-dot"]], "polars.Expr.dt.combine": [[312, "polars-expr-dt-combine"]], "polars.Expr.dt.epoch": [[315, "polars-expr-dt-epoch"]], "polars.Expr.dt.millisecond": [[321, "polars-expr-dt-millisecond"]], "polars.Expr.dt.quarter": [[330, "polars-expr-dt-quarter"]], "polars.Expr.dt.ordinal_day": [[329, "polars-expr-dt-ordinal-day"]], "polars.Expr.arr.sum": [[280, "polars-expr-arr-sum"]], "polars.Expr.arr.unique": [[284, "polars-expr-arr-unique"]], "polars.Expr.arr.head": [[269, "polars-expr-arr-head"]], "polars.Expr.drop_nulls": [[309, "polars-expr-drop-nulls"]], "polars.Expr.dt.iso_year": [[318, "polars-expr-dt-iso-year"]], "polars.Expr.cummin": [[302, "polars-expr-cummin"]], "polars.Expr.arr.shift": [[277, "polars-expr-arr-shift"]], "polars.Expr.bin.encode": [[288, "polars-expr-bin-encode"]], "polars.Expr.dt.minute": [[323, "polars-expr-dt-minute"]], "polars.Expr.dt.offset_by": [[328, "polars-expr-dt-offset-by"]], "polars.Expr.dt.minutes": [[324, "polars-expr-dt-minutes"]], "polars.Expr.dt.second": [[332, "polars-expr-dt-second"]], "polars.Expr.cos": [[297, "polars-expr-cos"]], "polars.Expr.backward_fill": [[285, "polars-expr-backward-fill"]], "polars.Expr.dt.milliseconds": [[322, "polars-expr-dt-milliseconds"]], "polars.Expr.count": [[299, "polars-expr-count"]], "polars.Expr.bin.contains": [[286, "polars-expr-bin-contains"]], "polars.Expr.arr.take": [[282, "polars-expr-arr-take"]], "polars.Expr.cumsum": [[304, "polars-expr-cumsum"]], "polars.Expr.dt.cast_time_zone": [[311, "polars-expr-dt-cast-time-zone"]], "polars.Expr.dt.days": [[314, "polars-expr-dt-days"]], "polars.Expr.arr.get": [[268, "polars-expr-arr-get"]], "polars.Expr.bin.starts_with": [[290, "polars-expr-bin-starts-with"]], "polars.Expr.cummax": [[301, "polars-expr-cummax"]], "polars.Expr.arr.mean": [[274, "polars-expr-arr-mean"]], "polars.Expr.dt.month": [[325, "polars-expr-dt-month"]], "polars.Expr.dt.nanosecond": [[326, "polars-expr-dt-nanosecond"]], "polars.Expr.cumprod": [[303, "polars-expr-cumprod"]], "polars.Expr.cumulative_eval": [[305, "polars-expr-cumulative-eval"]], "polars.Expr.arr.min": [[275, "polars-expr-arr-min"]], "polars.Expr.dt.day": [[313, "polars-expr-dt-day"]], "polars.Expr.arr.reverse": [[276, "polars-expr-arr-reverse"]], "polars.Expr.arr.last": [[271, "polars-expr-arr-last"]], "polars.Expr.cat.set_ordering": [[292, "polars-expr-cat-set-ordering"]], "polars.Expr.ceil": [[293, "polars-expr-ceil"]], "polars.Expr.bin.decode": [[287, "polars-expr-bin-decode"]], "polars.Expr.dt.microsecond": [[319, "polars-expr-dt-microsecond"]], "polars.Expr.dt.strftime": [[334, "polars-expr-dt-strftime"]], "polars.Expr.clip": [[294, "polars-expr-clip"]], "polars.Expr.arr.tail": [[281, "polars-expr-arr-tail"]], "polars.Expr.arr.to_struct": [[283, "polars-expr-arr-to-struct"]], "polars.Expr.dt.microseconds": [[320, "polars-expr-dt-microseconds"]], "polars.Expr.dt.round": [[331, "polars-expr-dt-round"]], "polars.Expr.dt.seconds": [[333, "polars-expr-dt-seconds"]], "polars.Expr.drop_nans": [[308, "polars-expr-drop-nans"]], "polars.Expr.cumcount": [[300, "polars-expr-cumcount"]], "polars.Expr.cosh": [[298, "polars-expr-cosh"]], "polars.Expr.clip_max": [[295, "polars-expr-clip-max"]], "polars.Expr.dt.cast_time_unit": [[310, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.hour": [[316, "polars-expr-dt-hour"]], "polars.Expr.dt.hours": [[317, "polars-expr-dt-hours"]], "polars.Expr.arr.join": [[270, "polars-expr-arr-join"]], "polars.Expr.cast": [[291, "polars-expr-cast"]], "polars.Expr.arr.lengths": [[272, "polars-expr-arr-lengths"]], "polars.DataFrame.median": [[164, "polars-dataframe-median"]], "polars.DataFrame.shift_and_fill": [[189, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.product": [[175, "polars-dataframe-product"]], "polars.DataFrame.to_dicts": [[199, "polars-dataframe-to-dicts"]], "polars.DataFrame.partition_by": [[171, "polars-dataframe-partition-by"]], "polars.DataFrame.fill_nan": [[134, "polars-dataframe-fill-nan"]], "polars.DataFrame.slice": [[191, "polars-dataframe-slice"]], "polars.DataFrame.is_unique": [[154, "polars-dataframe-is-unique"]], "polars.DataFrame.pipe": [[173, "polars-dataframe-pipe"]], "polars.DataFrame.fold": [[138, "polars-dataframe-fold"]], "polars.DataFrame.take_every": [[196, "polars-dataframe-take-every"]], "polars.DataFrame.join": [[158, "polars-dataframe-join"]], "polars.DataFrame.row": [[182, "polars-dataframe-row"]], "polars.DataFrame.to_arrow": [[197, "polars-dataframe-to-arrow"]], "polars.DataFrame.sum": [[194, "polars-dataframe-sum"]], "polars.DataFrame.join_asof": [[159, "polars-dataframe-join-asof"]], "polars.DataFrame.interpolate": [[151, "polars-dataframe-interpolate"]], "polars.DataFrame.null_count": [[170, "polars-dataframe-null-count"]], "polars.DataFrame.item": [[155, "polars-dataframe-item"]], "polars.DataFrame.melt": [[165, "polars-dataframe-melt"]], "polars.DataFrame.std": [[193, "polars-dataframe-std"]], "polars.DataFrame.is_duplicated": [[152, "polars-dataframe-is-duplicated"]], "polars.DataFrame.insert_at_idx": [[150, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.hstack": [[149, "polars-dataframe-hstack"]], "polars.DataFrame.fill_null": [[135, "polars-dataframe-fill-null"]], "polars.DataFrame.to_dummies": [[200, "polars-dataframe-to-dummies"]], "polars.DataFrame.rows": [[183, "polars-dataframe-rows"]], "polars.DataFrame.get_column": [[140, "polars-dataframe-get-column"]], "polars.DataFrame.get_columns": [[141, "polars-dataframe-get-columns"]], "polars.DataFrame.rename": [[178, "polars-dataframe-rename"]], "polars.DataFrame.min": [[167, "polars-dataframe-min"]], "polars.DataFrame.replace": [[179, "polars-dataframe-replace"]], "polars.DataFrame.lazy": [[160, "polars-dataframe-lazy"]], "polars.DataFrame.pearson_corr": [[172, "polars-dataframe-pearson-corr"]], "polars.DataFrame.replace_at_idx": [[180, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.shift": [[188, "polars-dataframe-shift"]], "polars.DataFrame.head": [[147, "polars-dataframe-head"]], "polars.DataFrame.tail": [[195, "polars-dataframe-tail"]], "polars.DataFrame.glimpse": [[142, "polars-dataframe-glimpse"]], "polars.DataFrame.max": [[162, "polars-dataframe-max"]], "polars.DataFrame.hash_rows": [[146, "polars-dataframe-hash-rows"]], "polars.DataFrame.schema": [[185, "polars-dataframe-schema"]], "polars.DataFrame.n_chunks": [[168, "polars-dataframe-n-chunks"]], "polars.DataFrame.select": [[186, "polars-dataframe-select"]], "polars.DataFrame.shrink_to_fit": [[190, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.sort": [[192, "polars-dataframe-sort"]], "polars.DataFrame.find_idx_by_name": [[137, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.groupby_dynamic": [[144, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.height": [[148, "polars-dataframe-height"]], "polars.DataFrame.is_empty": [[153, "polars-dataframe-is-empty"]], "polars.DataFrame.mean": [[163, "polars-dataframe-mean"]], "polars.DataFrame.sample": [[184, "polars-dataframe-sample"]], "polars.DataFrame.shape": [[187, "polars-dataframe-shape"]], "polars.DataFrame.to_dict": [[198, "polars-dataframe-to-dict"]], "polars.DataFrame.iter_rows": [[156, "polars-dataframe-iter-rows"]], "polars.DataFrame.quantile": [[176, "polars-dataframe-quantile"]], "polars.DataFrame.groupby": [[143, "polars-dataframe-groupby"]], "polars.DataFrame.n_unique": [[169, "polars-dataframe-n-unique"]], "polars.DataFrame.pivot": [[174, "polars-dataframe-pivot"]], "polars.DataFrame.reverse": [[181, "polars-dataframe-reverse"]], "polars.DataFrame.groupby_rolling": [[145, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.rechunk": [[177, "polars-dataframe-rechunk"]], "polars.DataFrame.filter": [[136, "polars-dataframe-filter"]], "polars.DataFrame.iter_slices": [[157, "polars-dataframe-iter-slices"]], "polars.DataFrame.frame_equal": [[139, "polars-dataframe-frame-equal"]], "polars.DataFrame.limit": [[161, "polars-dataframe-limit"]], "polars.DataFrame.merge_sorted": [[166, "polars-dataframe-merge-sorted"]], "polars.DataFrame.unique": [[206, "polars-dataframe-unique"]], "polars.DataFrame.upsample": [[209, "polars-dataframe-upsample"]], "polars.internals.dataframe.groupby.GroupBy.last": [[222, "polars-internals-dataframe-groupby-groupby-last"]], "polars.internals.dataframe.groupby.GroupBy.all": [[217, "polars-internals-dataframe-groupby-groupby-all"]], "Data types": [[239, "data-types"]], "Numeric": [[239, "numeric"]], "Date / Time": [[239, "date-time"]], "Nested": [[239, "nested"]], "Other": [[239, "other"]], "polars.DataFrame.vstack": [[211, "polars-dataframe-vstack"]], "polars.Expr.apply": [[248, "polars-expr-apply"]], "polars.Expr.arcsin": [[251, "polars-expr-arcsin"]], "polars.Expr.arg_sort": [[257, "polars-expr-arg-sort"]], "polars.Expr.agg_groups": [[243, "polars-expr-agg-groups"]], "polars.internals.dataframe.groupby.GroupBy.max": [[223, "polars-internals-dataframe-groupby-groupby-max"]], "polars.Expr.arg_unique": [[258, "polars-expr-arg-unique"]], "polars.DataFrame.width": [[212, "polars-dataframe-width"]], "polars.internals.dataframe.groupby.GroupBy.first": [[220, "polars-internals-dataframe-groupby-groupby-first"]], "polars.Expr.abs": [[242, "polars-expr-abs"]], "polars.Expr.arccos": [[249, "polars-expr-arccos"]], "polars.Expr.argsort": [[259, "polars-expr-argsort"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[224, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.Expr.append": [[247, "polars-expr-append"]], "polars.DataFrame.transpose": [[205, "polars-dataframe-transpose"]], "polars.DataFrame.unstack": [[208, "polars-dataframe-unstack"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[216, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.Expr.arctan": [[253, "polars-expr-arctan"]], "polars.Expr.arctanh": [[254, "polars-expr-arctanh"]], "polars.DataFrame.with_row_count": [[214, "polars-dataframe-with-row-count"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[227, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.groupby.GroupBy.head": [[221, "polars-internals-dataframe-groupby-groupby-head"]], "polars.DataFrame.unnest": [[207, "polars-dataframe-unnest"]], "polars.internals.dataframe.groupby.GroupBy.median": [[225, "polars-internals-dataframe-groupby-groupby-median"]], "polars.Expr.any": [[246, "polars-expr-any"]], "polars.DataFrame.to_numpy": [[201, "polars-dataframe-to-numpy"]], "polars.Expr.alias": [[244, "polars-expr-alias"]], "polars.internals.dataframe.groupby.GroupBy.min": [[226, "polars-internals-dataframe-groupby-groupby-min"]], "polars.Expr.arr.first": [[267, "polars-expr-arr-first"]], "polars.DataFrame.with_columns": [[213, "polars-dataframe-with-columns"]], "polars.internals.dataframe.groupby.GroupBy.__iter__": [[215, "polars-internals-dataframe-groupby-groupby-iter"]], "polars.Expr.arr.contains": [[263, "polars-expr-arr-contains"]], "polars.Expr.arr.arg_max": [[260, "polars-expr-arr-arg-max"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[229, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.Expr.arr.concat": [[262, "polars-expr-arr-concat"]], "polars.Expr.arccosh": [[250, "polars-expr-arccosh"]], "polars.Expr.arr.arg_min": [[261, "polars-expr-arr-arg-min"]], "polars.internals.dataframe.groupby.GroupBy.count": [[219, "polars-internals-dataframe-groupby-groupby-count"]], "polars.Expr.arg_min": [[256, "polars-expr-arg-min"]], "polars.Expr.all": [[245, "polars-expr-all"]], "polars.DataFrame.to_series": [[203, "polars-dataframe-to-series"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[230, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.DataFrame.to_struct": [[204, "polars-dataframe-to-struct"]], "polars.Expr.arr.explode": [[266, "polars-expr-arr-explode"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[218, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.DataFrame.var": [[210, "polars-dataframe-var"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[228, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.DataFrame.to_pandas": [[202, "polars-dataframe-to-pandas"]], "polars.Expr.arcsinh": [[252, "polars-expr-arcsinh"]], "polars.Expr.arg_max": [[255, "polars-expr-arg-max"]], "polars.Expr.arr.eval": [[265, "polars-expr-arr-eval"]], "polars.Expr.arr.diff": [[264, "polars-expr-arr-diff"]], "DataFrame": [[236, "dataframe"]], "Exceptions": [[240, "exceptions"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[9, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[10, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[11, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[12, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[13, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[14, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[15, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[20, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[21, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[22, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[23, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[24, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[25, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[26, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[27, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[28, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[29, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[30, "polars.DataType"]], "__init__() (polars.datatype method)": [[30, "polars.DataType.__init__"]], "date (class in polars)": [[31, "polars.Date"]], "__init__() (polars.date method)": [[31, "polars.Date.__init__"]], "datetime (class in polars)": [[32, "polars.Datetime"]], "__init__() (polars.datetime method)": [[32, "polars.Datetime.__init__"]], "duration (class in polars)": [[33, "polars.Duration"]], "__init__() (polars.duration method)": [[33, "polars.Duration.__init__"]], "float32 (class in polars)": [[34, "polars.Float32"]], "__init__() (polars.float32 method)": [[34, "polars.Float32.__init__"]], "float64 (class in polars)": [[35, "polars.Float64"]], "__init__() (polars.float64 method)": [[35, "polars.Float64.__init__"]], "int16 (class in polars)": [[36, "polars.Int16"]], "__init__() (polars.int16 method)": [[36, "polars.Int16.__init__"]], "int32 (class in polars)": [[37, "polars.Int32"]], "__init__() (polars.int32 method)": [[37, "polars.Int32.__init__"]], "int64 (class in polars)": [[38, "polars.Int64"]], "__init__() (polars.int64 method)": [[38, "polars.Int64.__init__"]], "int8 (class in polars)": [[39, "polars.Int8"]], "__init__() (polars.int8 method)": [[39, "polars.Int8.__init__"]], "list (class in polars)": [[40, "polars.List"]], "__init__() (polars.list method)": [[40, "polars.List.__init__"]], "null (class in polars)": [[41, "polars.Null"]], "__init__() (polars.null method)": [[41, "polars.Null.__init__"]], "object (class in polars)": [[42, "polars.Object"]], "__init__() (polars.object method)": [[42, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[43, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[44, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[45, "polars.SQLContext.register"]], "stringcache (class in polars)": [[46, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__"]], "struct (class in polars)": [[47, "polars.Struct"]], "__init__() (polars.struct method)": [[47, "polars.Struct.__init__"]], "time (class in polars)": [[48, "polars.Time"]], "__init__() (polars.time method)": [[48, "polars.Time.__init__"]], "uint16 (class in polars)": [[49, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[49, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[50, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[50, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[51, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[51, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[52, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[52, "polars.UInt8.__init__"]], "unknown (class in polars)": [[53, "polars.Unknown"]], "__init__() (polars.unknown method)": [[53, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[54, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[54, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[55, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[56, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[57, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[58, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[59, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[60, "polars.arg_where"]], "build_info() (in module polars)": [[61, "polars.build_info"]], "collect_all() (in module polars)": [[62, "polars.collect_all"]], "concat() (in module polars)": [[63, "polars.concat"]], "cut() (in module polars)": [[64, "polars.cut"]], "date_range() (in module polars)": [[65, "polars.date_range"]], "arrowerror": [[66, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[67, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[68, "polars.exceptions.ComputeError"]], "duplicateerror": [[69, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[70, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[71, "polars.exceptions.NoDataError"]], "norowsreturned": [[72, "polars.exceptions.NoRowsReturned"]], "panicexception": [[73, "polars.exceptions.PanicException"]], "rowsexception": [[74, "polars.exceptions.RowsException"]], "schemaerror": [[75, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[76, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[77, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[78, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[79, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[80, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[81, "polars.from_dataframe"]], "from_dict() (in module polars)": [[82, "polars.from_dict"]], "from_dicts() (in module polars)": [[83, "polars.from_dicts"]], "from_numpy() (in module polars)": [[84, "polars.from_numpy"]], "from_pandas() (in module polars)": [[85, "polars.from_pandas"]], "from_records() (in module polars)": [[86, "polars.from_records"]], "get_dummies() (in module polars)": [[87, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[88, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[89, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[90, "polars.ones"]], "read_avro() (in module polars)": [[91, "polars.read_avro"]], "read_csv() (in module polars)": [[92, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[93, "polars.read_csv_batched"]], "read_delta() (in module polars)": [[94, "polars.read_delta"]], "read_excel() (in module polars)": [[95, "polars.read_excel"]], "read_ipc() (in module polars)": [[96, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[97, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[98, "polars.read_json"]], "read_ndjson() (in module polars)": [[99, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[100, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[101, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[102, "polars.read_sql"]], "scan_csv() (in module polars)": [[103, "polars.scan_csv"]], "scan_delta() (in module polars)": [[104, "polars.scan_delta"]], "scan_ds() (in module polars)": [[105, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[106, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[107, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[108, "polars.scan_parquet"]], "show_versions() (in module polars)": [[109, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[110, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[111, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[112, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[112, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[113, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[114, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[115, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[116, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[117, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[118, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[121, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[122, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[123, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[124, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[125, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[126, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[127, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[128, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[129, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[130, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[131, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[132, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[133, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[134, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[135, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[136, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[137, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[138, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[139, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[140, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[141, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[142, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[143, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[144, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[145, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[146, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[147, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[148, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[149, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[150, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[151, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[152, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[153, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[154, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[155, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[156, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[157, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[158, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[159, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[160, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[161, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[162, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[163, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[164, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[165, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[166, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[167, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[168, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[169, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[170, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[171, "polars.DataFrame.partition_by"]], "pearson_corr() (polars.dataframe method)": [[172, "polars.DataFrame.pearson_corr"]], "pipe() (polars.dataframe method)": [[173, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[174, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[175, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[176, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[177, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[178, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[179, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[180, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[181, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[182, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[183, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[184, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[185, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[186, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[187, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[188, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[189, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[190, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[191, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[192, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[193, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[194, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[195, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[196, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[197, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[198, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[199, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[200, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[201, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[202, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[203, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[204, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[205, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[206, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[207, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[208, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[209, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[210, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[211, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[212, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[213, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[214, "polars.DataFrame.with_row_count"]], "__iter__() (polars.internals.dataframe.groupby.groupby method)": [[215, "polars.internals.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.agg"]], "all() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.all"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[226, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[227, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[228, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[229, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[230, "polars.internals.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[242, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[243, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[244, "polars.Expr.alias"]], "all() (polars.expr method)": [[245, "polars.Expr.all"]], "any() (polars.expr method)": [[246, "polars.Expr.any"]], "append() (polars.expr method)": [[247, "polars.Expr.append"]], "apply() (polars.expr method)": [[248, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[249, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[250, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[251, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[252, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[253, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[254, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[255, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[256, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[257, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[258, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[259, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[260, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[261, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[262, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[263, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[264, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[265, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[266, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[267, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[268, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[269, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[270, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[271, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[272, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[273, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[274, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[275, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[276, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[277, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[278, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[279, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[280, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[281, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[282, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[283, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[284, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[285, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[286, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[287, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[288, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[289, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[290, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[291, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[292, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[293, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[294, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[295, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[296, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[297, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[298, "polars.Expr.cosh"]], "count() (polars.expr method)": [[299, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[300, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[301, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[302, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[303, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[304, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[305, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[306, "polars.Expr.diff"]], "dot() (polars.expr method)": [[307, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[308, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[309, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[310, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[311, "polars.Expr.dt.cast_time_zone"]], "combine() (polars.expr.dt method)": [[312, "polars.Expr.dt.combine"]], "day() (polars.expr.dt method)": [[313, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[314, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[315, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[316, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[317, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[318, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[319, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[320, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[321, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[322, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[323, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[324, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[325, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[326, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[327, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[328, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[329, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[330, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[331, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[332, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[333, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[334, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[335, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[336, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[337, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[338, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[339, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[340, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[341, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[342, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[343, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[344, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[345, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[346, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[347, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[348, "polars.Expr.exp"]], "explode() (polars.expr method)": [[349, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[350, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[351, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[352, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[353, "polars.Expr.filter"]], "first() (polars.expr method)": [[354, "polars.Expr.first"]], "flatten() (polars.expr method)": [[355, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[356, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[357, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[358, "polars.Expr.hash"]], "head() (polars.expr method)": [[359, "polars.Expr.head"]], "inspect() (polars.expr method)": [[360, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[361, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[362, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[363, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[364, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[365, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[366, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[367, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[368, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[369, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[370, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[371, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[372, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[373, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[374, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[375, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[376, "polars.Expr.last"]], "len() (polars.expr method)": [[377, "polars.Expr.len"]], "limit() (polars.expr method)": [[378, "polars.Expr.limit"]], "list() (polars.expr method)": [[379, "polars.Expr.list"]], "log() (polars.expr method)": [[380, "polars.Expr.log"]], "log10() (polars.expr method)": [[381, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[382, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[383, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[384, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[385, "polars.Expr.max"]], "mean() (polars.expr method)": [[386, "polars.Expr.mean"]], "median() (polars.expr method)": [[387, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[388, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[389, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[390, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[391, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[392, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[393, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[394, "polars.Expr.min"]], "mode() (polars.expr method)": [[395, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[396, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[397, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[398, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[399, "polars.Expr.null_count"]], "over() (polars.expr method)": [[400, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[401, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[402, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[403, "polars.Expr.prefix"]], "product() (polars.expr method)": [[404, "polars.Expr.product"]], "quantile() (polars.expr method)": [[405, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[406, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[407, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[408, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[409, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[410, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[411, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[412, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[413, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[414, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[415, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[416, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[417, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[418, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[419, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[420, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[421, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[422, "polars.Expr.round"]], "sample() (polars.expr method)": [[423, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[424, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[425, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[426, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[427, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[428, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[429, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[430, "polars.Expr.sign"]], "sin() (polars.expr method)": [[431, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[432, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[433, "polars.Expr.skew"]], "slice() (polars.expr method)": [[434, "polars.Expr.slice"]], "sort() (polars.expr method)": [[435, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[436, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[437, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[438, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[439, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[440, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[441, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[442, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[443, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[444, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[445, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[446, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[447, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[448, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[449, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[450, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[451, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[452, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[453, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[454, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[455, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[456, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[457, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[458, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[459, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[460, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[461, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[462, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[463, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[464, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[465, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[466, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[467, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[468, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[469, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[470, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[471, "polars.Expr.sum"]], "tail() (polars.expr method)": [[472, "polars.Expr.tail"]], "take() (polars.expr method)": [[473, "polars.Expr.take"]], "take_every() (polars.expr method)": [[474, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[475, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[476, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[477, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[478, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[479, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[480, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[481, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[482, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[483, "polars.Expr.var"]], "where() (polars.expr method)": [[484, "polars.Expr.where"]], "all() (in module polars)": [[485, "polars.all"]], "any() (in module polars)": [[486, "polars.any"]], "apply() (in module polars)": [[487, "polars.apply"]], "arange() (in module polars)": [[488, "polars.arange"]], "argsort_by() (in module polars)": [[489, "polars.argsort_by"]], "avg() (in module polars)": [[490, "polars.avg"]], "coalesce() (in module polars)": [[491, "polars.coalesce"]], "col() (in module polars)": [[492, "polars.col"]], "concat_list() (in module polars)": [[493, "polars.concat_list"]], "concat_str() (in module polars)": [[494, "polars.concat_str"]], "count() (in module polars)": [[495, "polars.count"]], "cov() (in module polars)": [[496, "polars.cov"]], "cumfold() (in module polars)": [[497, "polars.cumfold"]], "cumreduce() (in module polars)": [[498, "polars.cumreduce"]], "cumsum() (in module polars)": [[499, "polars.cumsum"]], "date() (in module polars)": [[500, "polars.date"]], "datetime() (in module polars)": [[501, "polars.datetime"]], "duration() (in module polars)": [[502, "polars.duration"]], "element() (in module polars)": [[503, "polars.element"]], "exclude() (in module polars)": [[504, "polars.exclude"]], "first() (in module polars)": [[505, "polars.first"]], "fold() (in module polars)": [[506, "polars.fold"]], "format() (in module polars)": [[507, "polars.format"]], "from_epoch() (in module polars)": [[508, "polars.from_epoch"]], "groups() (in module polars)": [[509, "polars.groups"]], "head() (in module polars)": [[510, "polars.head"]], "list() (in module polars)": [[511, "polars.list"]], "lit() (in module polars)": [[512, "polars.lit"]], "map() (in module polars)": [[513, "polars.map"]], "max() (in module polars)": [[514, "polars.max"]], "mean() (in module polars)": [[515, "polars.mean"]], "median() (in module polars)": [[516, "polars.median"]], "min() (in module polars)": [[517, "polars.min"]], "n_unique() (in module polars)": [[518, "polars.n_unique"]], "pearson_corr() (in module polars)": [[519, "polars.pearson_corr"]], "quantile() (in module polars)": [[520, "polars.quantile"]], "reduce() (in module polars)": [[521, "polars.reduce"]], "repeat() (in module polars)": [[522, "polars.repeat"]], "select() (in module polars)": [[523, "polars.select"]], "spearman_rank_corr() (in module polars)": [[524, "polars.spearman_rank_corr"]], "std() (in module polars)": [[525, "polars.std"]], "struct() (in module polars)": [[526, "polars.struct"]], "sum() (in module polars)": [[527, "polars.sum"]], "tail() (in module polars)": [[528, "polars.tail"]], "var() (in module polars)": [[529, "polars.var"]], "when() (in module polars)": [[530, "polars.when"]], "cache() (polars.lazyframe method)": [[550, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[551, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[552, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[553, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[554, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[555, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[556, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[557, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[558, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[559, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[560, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[561, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[562, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[563, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[564, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[565, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[566, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[567, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[568, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[569, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[570, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[571, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[572, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[573, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[574, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[575, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[576, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[577, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[578, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[579, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[580, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[581, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[582, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[583, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[584, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[585, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[586, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[587, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[588, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[589, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[590, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[591, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[592, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[593, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[594, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[595, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[596, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[597, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[598, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[599, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[600, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[601, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[602, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[603, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[604, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[605, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[606, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[607, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[608, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[609, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[610, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[611, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[612, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[613, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[614, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[615, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[623, "polars.Series.abs"]], "alias() (polars.series method)": [[624, "polars.Series.alias"]], "all() (polars.series method)": [[625, "polars.Series.all"]], "any() (polars.series method)": [[626, "polars.Series.any"]], "append() (polars.series method)": [[627, "polars.Series.append"]], "apply() (polars.series method)": [[628, "polars.Series.apply"]], "arccos() (polars.series method)": [[629, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[630, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[631, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[632, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[633, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[634, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[635, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[636, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[637, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[638, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[639, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[640, "polars.Series.argsort"]], "arr (polars.series attribute)": [[641, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[642, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[643, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[644, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[645, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[646, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[647, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[648, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[649, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[650, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[651, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[652, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[653, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[654, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[655, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[656, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[657, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[658, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[659, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[660, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[661, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[662, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[663, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[664, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[665, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[666, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[667, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[668, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[669, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[670, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[671, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[672, "polars.Series.cast"]], "cat (polars.series attribute)": [[673, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[674, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[675, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[676, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[677, "polars.Series.cleared"]], "clip() (polars.series method)": [[678, "polars.Series.clip"]], "clip_max() (polars.series method)": [[679, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[680, "polars.Series.clip_min"]], "clone() (polars.series method)": [[681, "polars.Series.clone"]], "cos() (polars.series method)": [[682, "polars.Series.cos"]], "cosh() (polars.series method)": [[683, "polars.Series.cosh"]], "cummax() (polars.series method)": [[684, "polars.Series.cummax"]], "cummin() (polars.series method)": [[685, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[686, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[687, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[688, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[689, "polars.Series.describe"]], "diff() (polars.series method)": [[690, "polars.Series.diff"]], "dot() (polars.series method)": [[691, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[692, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[693, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[694, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[695, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[696, "polars.Series.dt.cast_time_zone"]], "combine() (polars.series.dt method)": [[697, "polars.Series.dt.combine"]], "day() (polars.series.dt method)": [[698, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[699, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[700, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[701, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[702, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[703, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[704, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[705, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[706, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[707, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[708, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[709, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[710, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[711, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[712, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[713, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[714, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[715, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[716, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[717, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[718, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[719, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[720, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[721, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[722, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[723, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[724, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[725, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[726, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[727, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[728, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[729, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[730, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[731, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[732, "polars.Series.dtype"]], "entropy() (polars.series method)": [[733, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[734, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[735, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[736, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[737, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[738, "polars.Series.exp"]], "explode() (polars.series method)": [[739, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[740, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[741, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[742, "polars.Series.fill_null"]], "filter() (polars.series method)": [[743, "polars.Series.filter"]], "flags (polars.series attribute)": [[744, "polars.Series.flags"]], "floor() (polars.series method)": [[745, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[746, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[747, "polars.Series.has_validity"]], "hash() (polars.series method)": [[748, "polars.Series.hash"]], "head() (polars.series method)": [[749, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[750, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[751, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[752, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[753, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[754, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[755, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[756, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[757, "polars.Series.is_first"]], "is_float() (polars.series method)": [[758, "polars.Series.is_float"]], "is_in() (polars.series method)": [[759, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[760, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[761, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[762, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[763, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[764, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[765, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[766, "polars.Series.is_sorted"]], "is_unique() (polars.series method)": [[767, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[768, "polars.Series.is_utf8"]], "item() (polars.series method)": [[769, "polars.Series.item"]], "kurtosis() (polars.series method)": [[770, "polars.Series.kurtosis"]], "len() (polars.series method)": [[771, "polars.Series.len"]], "limit() (polars.series method)": [[772, "polars.Series.limit"]], "log() (polars.series method)": [[773, "polars.Series.log"]], "log10() (polars.series method)": [[774, "polars.Series.log10"]], "max() (polars.series method)": [[775, "polars.Series.max"]], "mean() (polars.series method)": [[776, "polars.Series.mean"]], "median() (polars.series method)": [[777, "polars.Series.median"]], "min() (polars.series method)": [[778, "polars.Series.min"]], "mode() (polars.series method)": [[779, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[780, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[781, "polars.Series.n_unique"]], "name (polars.series attribute)": [[782, "polars.Series.name"]], "nan_max() (polars.series method)": [[783, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[784, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[785, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[786, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[787, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[788, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[789, "polars.Series.peak_min"]], "product() (polars.series method)": [[790, "polars.Series.product"]], "quantile() (polars.series method)": [[791, "polars.Series.quantile"]], "rank() (polars.series method)": [[792, "polars.Series.rank"]], "rechunk() (polars.series method)": [[793, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[794, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[795, "polars.Series.rename"]], "reshape() (polars.series method)": [[796, "polars.Series.reshape"]], "reverse() (polars.series method)": [[797, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[798, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[799, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[800, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[801, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[802, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[803, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[804, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[805, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[806, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[807, "polars.Series.rolling_var"]], "round() (polars.series method)": [[808, "polars.Series.round"]], "sample() (polars.series method)": [[809, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[810, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[811, "polars.Series.series_equal"]], "set() (polars.series method)": [[812, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[813, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[814, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[815, "polars.Series.shape"]], "shift() (polars.series method)": [[816, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[817, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[818, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[819, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[820, "polars.Series.shuffle"]], "sign() (polars.series method)": [[821, "polars.Series.sign"]], "sin() (polars.series method)": [[822, "polars.Series.sin"]], "sinh() (polars.series method)": [[823, "polars.Series.sinh"]], "skew() (polars.series method)": [[824, "polars.Series.skew"]], "slice() (polars.series method)": [[825, "polars.Series.slice"]], "sort() (polars.series method)": [[826, "polars.Series.sort"]], "sqrt() (polars.series method)": [[827, "polars.Series.sqrt"]], "std() (polars.series method)": [[828, "polars.Series.std"]], "str (polars.series attribute)": [[829, "polars.Series.str"]], "concat() (polars.series.str method)": [[830, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[831, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[832, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[833, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[834, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[835, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[836, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[837, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[838, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[839, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[840, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[841, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[842, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[843, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[844, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[845, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[846, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[847, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[848, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[849, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[850, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[851, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[852, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[853, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[854, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[855, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[856, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[857, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[858, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[859, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[860, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[861, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[862, "polars.Series.struct.to_frame"]], "unnest() (polars.series.struct method)": [[863, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[864, "polars.Series.sum"]], "tail() (polars.series method)": [[865, "polars.Series.tail"]], "take() (polars.series method)": [[866, "polars.Series.take"]], "take_every() (polars.series method)": [[867, "polars.Series.take_every"]], "tan() (polars.series method)": [[868, "polars.Series.tan"]], "tanh() (polars.series method)": [[869, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[870, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[871, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[872, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[873, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[874, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[875, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[876, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[877, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[878, "polars.Series.top_k"]], "unique() (polars.series method)": [[879, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[880, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[881, "polars.Series.value_counts"]], "var() (polars.series method)": [[882, "polars.Series.var"]], "view() (polars.series method)": [[883, "polars.Series.view"]], "zip_with() (polars.series method)": [[884, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[899, "polars.SQLContext"]]}})